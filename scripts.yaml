kitchen_cabinet_light_based_on_entity_state:
  alias: Kitchen Cabinet Light Based On Entity State
  mode: queued
  max: 10
  icon: mdi:file-cabinet
  sequence:
  - service: scene.create
    data:
      scene_id: kitchen_cabinet_light_based_on_entity_state_kitchen_cabinet_backup
      snapshot_entities:
      - light.kitchen_cabinet_light
  - service: light.turn_on
    data:
      rgb_color: "{% if states(entity_id) == 'off' -%}\n  [50, 200, 0]\n{% else -%}\n
        \ [200, 50, 0]\n{% endif %}"
      brightness: 150
      transition: 1
    target:
      entity_id: light.kitchen_cabinet_light
  - delay: 00:00:01
  - service: scene.turn_on
    target:
      entity_id: scene.kitchen_cabinet_light_based_on_entity_state_kitchen_cabinet_backup
    data: {}
office_on_off:
  alias: Office On Off
  mode: single
  icon: mdi:office-building
  sequence:
  - if:
    - condition: and
      conditions:
      - condition: state
        entity_id: light.office_lights
        state: 'off'
      - condition: state
        entity_id: switch.desk_switch
        state: 'off'
    then:
    - service: light.turn_on
      target:
        entity_id: light.office_lights
    - service: switch.turn_on
      target:
        entity_id: switch.desk_switch
    else:
    - service: light.turn_off
      data:
        transition: 10
      target:
        entity_id: light.office_lights
    - service: switch.turn_off
      target:
        entity_id: switch.desk_switch
shutters_up_sun:
  alias: Shutters Up Sun
  mode: single
  icon: hass:window-open
  sequence:
  - condition: state
    entity_id: binary_sensor.shutter_operation_to_cold_or_windy
    state: 'off'
  - if:
    - condition: state
      entity_id: binary_sensor.office_window_sensor
      state: 'off'
    then:
    - service: cover.open_cover
      target:
        area_id: office
  - if:
    - condition: state
      entity_id: binary_sensor.parlor_window_sensor
      state: 'off'
    then:
    - service: cover.open_cover
      target:
        area_id: parlor
  - if:
    - condition: state
      entity_id: binary_sensor.lower_kitchen_window_sensor
      state: 'off'
    then:
    - service: cover.open_cover
      target:
        entity_id: cover.lower_kitchen_roller_shutter_left_level
  - if:
    - condition: state
      entity_id: binary_sensor.upstairs_window_sensor
      state: 'off'
    then:
    - service: cover.open_cover
      target:
        area_id: upstairs
night_light:
  alias: Home Light
  fields:
    scene_color:
      name: Scene Color
      description: ''
      required: true
      selector:
        select:
          options:
          - label: Purple
            value: purple
          - label: Night
            value: night
          - label: Green
            value: green
          - label: Blue
            value: blue
          - label: Red
            value: red
          - label: White
            value: white
  sequence:
  - parallel:
    - service: automation.turn_off
      data:
        stop_actions: true
      target:
        entity_id: automation.office_ceiling_lights_backup_kitchen_cabinet_state
    - service: scene.turn_on
      target:
        entity_id:
        - scene.floor_front_night
        - scene.office_desk_{{ scene_color }}
        - scene.kitchen_cabinet_{{ scene_color }}
        - scene.bathroom_lamp_{{ scene_color }}
    - service: light.turn_on
      target:
        entity_id: light.panel_mirror_switch
      data: {}
    - service: script.turn_on
      target:
        entity_id: script.scene_on
      data:
        variables:
          scene: scene.bedroom_bed_{{ scene_color }}
          light:
          - light.bedroom_bed_light
    - service: input_boolean.turn_on
      target:
        entity_id:
        - input_boolean.floor_light_active
        - input_boolean.floor_helper_light_active
        - input_boolean.bathroom_light_active
      enabled: true
      data: {}
    - if:
      - condition: state
        entity_id: switch.bedroom_shutter_down_relay
        state: 'off'
      then:
      - service: scene.turn_on
        target:
          entity_id:
          - scene.terrace_plants_spots_{{ scene_color }}
  - service: light.turn_off
    target:
      entity_id:
      - light.floor_middle_light
      - light.floor_back_light
      - light.office_ceiling_lights
      - light.kitchen_cabinet_switch
      - light.bedroom_nightstand_lights
    data: {}
  - wait_for_trigger:
    - platform: state
      entity_id:
      - light.office_ceiling_lights
      to: 'off'
      from: 'on'
      for:
        hours: 0
        minutes: 0
        seconds: 1
    timeout:
      hours: 0
      minutes: 0
      seconds: 15
      milliseconds: 0
  - service: automation.turn_on
    data: {}
    target:
      entity_id: automation.office_ceiling_lights_backup_kitchen_cabinet_state
  mode: single
  icon: mdi:lightbulb-night
scene_on:
  alias: Scene On
  fields:
    scene:
      name: Scene Entity
      description: Scene to turn on
      required: true
      selector:
        entity:
          domain: scene
    light:
      name: Light Entity
      required: false
      selector:
        entity:
          domain: light
          multiple: true
  mode: queued
  max: 10
  icon: mdi:light-flood-down
  sequence:
  - service: light.turn_off
    target:
      entity_id: "{{ \n  light | \n  default(scene | \n    regex_replace(find='^scene',
        replace='light') | \n    regex_replace(find='[a-z]+$', replace='light')\n
        \ ) \n}}"
    data: {}
  - service: scene.turn_on
    target:
      entity_id: '{{ scene }}'
shutter_horizontal_open:
  alias: Shutter Horizontal Open
  fields:
    area:
      name: Area name
      description: Close shutter but open them horizontally at the end (parlor/bedroom)
      required: true
      selector:
        area:
  sequence:
  - service: switch.turn_on
    data: {}
    target:
      entity_id: switch.{{ area }}_shutter_down_relay
  - delay:
      hours: 0
      minutes: 0
      seconds: '{{ states(''input_number.'' + area + ''_shutter_horizontal_open_delay'')
        | int(0) }}'
      milliseconds: 0
  - wait_template: '{{ states(''sensor.'' + area + ''_shutter_down_energy_power'')
      | float(0) < 2.0 }}'
    continue_on_timeout: false
    timeout: 00:01:30
    enabled: false
  - service: switch.turn_on
    data: {}
    target:
      entity_id: switch.{{ area }}_shutter_up_relay
  - delay:
      hours: 0
      minutes: 0
      seconds: 1
      milliseconds: 100
  - service: switch.turn_off
    data: {}
    target:
      entity_id: switch.{{ area }}_shutter_up_relay
  mode: single
  icon: mdi:blinds-horizontal
bedroom_bed_light_helper:
  alias: Bedroom Bed Light Helper
  fields:
    action:
      name: Action Type
      description: ''
      required: true
      selector:
        select:
          options:
          - label: Toggle
            value: toggle
          - label: Scene
            value: scene
          - label: Turn On
            value: turn_on
    scene:
      name: Scene Entity
      description: Scene to turn on
      example: "service: script.bedroom_bed_light_helper\ndata:\n  action: scene\n
        \ scene: scene.bedroom_bed_green\n"
      required: false
      selector:
        entity:
          domain: scene
  sequence:
  - if:
    - condition: or
      conditions:
      - condition: and
        conditions:
        - condition: or
          conditions:
          - condition: state
            entity_id: light.bedroom_bed_light
            state: 'off'
          - condition: numeric_state
            entity_id: automation.bedroom_motion
            attribute: current
            above: 0
        - condition: state
          entity_id: input_boolean.bedroom_bed_light_active
          state: 'off'
      - condition: template
        value_template: '{{ action == ''scene'' or action == ''turn_on'' }}'
    then:
    - service: input_boolean.turn_on
      data: {}
      target:
        entity_id: input_boolean.bedroom_bed_light_active
    - choose:
      - conditions:
        - condition: template
          value_template: '{{ action == ''toggle'' or action == ''turn_on'' }}'
        sequence:
        - service: script.turn_on
          target:
            entity_id: script.scene_on
          data:
            variables:
              scene: scene.bedroom_bed_white
      - conditions:
        - condition: template
          value_template: "{% if not scene|default('') and action == 'scene' -%} \n
            \ true \n{%- else -%} \n  false \n{%- endif -%} \n"
        sequence:
        - service: input_select.select_next
          data:
            cycle: true
          target:
            entity_id: input_select.bedroom_bed_scenes
        - service: script.turn_on
          target:
            entity_id: script.scene_on
          data:
            variables:
              scene: '{{ states(''input_select.bedroom_bed_scenes'') }}'
      - conditions:
        - condition: template
          value_template: "{% if scene|default('') and action == 'scene' -%} \n  true
            \n{%- else -%} \n  false \n{%- endif -%} \n"
        sequence:
        - service: script.turn_on
          target:
            entity_id: script.scene_on
          data:
            variables:
              scene: '{{ scene }}'
      default:
      - stop: Wrong usage or wrong/missing condition
        error: true
    else:
    - service: light.turn_off
      data: {}
      target:
        entity_id: light.bedroom_bed_light
  mode: queued
  icon: mdi:bed-double
  max: 5
bathroom_light_helper:
  alias: Bathroom Light Helper
  sequence:
  - service: input_boolean.turn_on
    data: {}
    target:
      entity_id: input_boolean.bathroom_light_active
  - choose:
    - conditions:
      - condition: template
        value_template: "{% if light|default([]) and action == 'call-service' and
          service|default('') -%} \n  true \n{%- else -%} \n  false \n{%- endif -%}
          \n"
      sequence:
      - service: '{{ service }}'
        data: "{% if service == 'light.turn_off' -%}\n  {}\n{%- else -%}\n  {\n    'brightness':
          {{ states('sensor.daytime_light_brightness') }},\n    'color_temp': {{ states('sensor.daytime_light_color_temp')
          }}\n  }\n{%- endif -%}"
        target:
          entity_id: '{{ light }}'
    - conditions:
      - condition: template
        value_template: "{% if not scene|default('') and action == 'scene' -%} \n
          \ true \n{%- else -%} \n  false \n{%- endif -%} \n"
      sequence:
      - service: input_select.select_next
        data:
          cycle: true
        target:
          entity_id: input_select.bathroom_lamp_scenes
      - service: scene.turn_on
        data: {}
        target:
          entity_id: '{{ states(''input_select.bathroom_lamp_scenes'') }}'
    - conditions:
      - condition: template
        value_template: "{% if scene|default('') and action == 'scene' -%} \n  true
          \n{%- else -%} \n  false \n{%- endif -%} \n"
      sequence:
      - service: scene.turn_on
        target:
          entity_id: '{{ scene }}'
    default:
    - stop: Wrong usage or wrong/missing condition
      error: true
  fields:
    action:
      name: Action Type
      description: call-service/scene
      required: true
      selector:
        select:
          options:
          - label: Call-Service
            value: call-service
          - label: Scene
            value: scene
    service:
      name: The service to call, if 'action' is 'call-service'.
      description: Turn on/off/toggle lights
      example: "service: script.bathroom_light_helper\ndata:\n  action: call-service\n
        \ service: light.turn_on\n  light:\n    - light.bathroom_lights\n"
      required: false
      selector:
        select:
          options:
          - label: Light Turn On
            value: light.turn_on
          - label: Light Turn Off
            value: light.turn_off
          - label: Light Toggle
            value: light.toggle
    scene:
      name: Scene Entity
      description: Scene to turn on. If empty, cycle if 'action' is 'scene'.
      example: "service: script.bathroom_light_helper\ndata:\n  action: scene\n  scene:
        scene.bathroom_lamp_green\n"
      required: false
      selector:
        entity:
          domain: scene
    light:
      name: Light Entity To Toggle
      description: List of light entities. Ignored if 'action' is 'scene'
      example: "service: script.bathroom_light_helper\ndata:\n  action: toggle\n  light:\n
        \   - light.bathroom_lights\n"
      required: false
      selector:
        entity:
          domain: light
          multiple: true
  mode: queued
  icon: mdi:bathtub
  max: 5
daytime_night:
  alias: Daytime Night
  sequence:
  - if:
    - condition: state
      entity_id: input_boolean.daytime_night_running
      state: 'off'
    then:
    - service: input_boolean.turn_on
      target:
        entity_id: input_boolean.daytime_night_running
      data: {}
    - service: scene.create
      data:
        scene_id: daytime_night_running_{{ light | replace('light.', '') }}_backup
        snapshot_entities:
        - '{{ light }}'
    - repeat:
        count: '4'
        sequence:
        - service: light.turn_on
          data:
            rgb_color:
            - 200
            - 50
            - 0
            brightness: 150
            transition: 1
          target:
            entity_id: '{{ light }}'
        - delay: 00:00:02
        - service: light.turn_on
          data:
            rgb_color:
            - 200
            - 50
            - 0
            brightness: 20
            transition: 1
          target:
            entity_id: '{{ light }}'
        - delay: 00:00:02
    - service: input_select.select_option
      data:
        option: Night
      target:
        entity_id: input_select.daytime
    - service: input_boolean.turn_off
      target:
        entity_id: input_boolean.daytime_night_running
      data: {}
    else:
    - service: input_boolean.turn_off
      target:
        entity_id: input_boolean.daytime_night_running
      data: {}
    - service: scene.turn_on
      target:
        entity_id: scene.daytime_night_running_{{ light | replace('light.', '') }}_backup
      data: {}
  mode: restart
  icon: mdi:sleep
  fields:
    light:
      name: Light Entity
      description: The light entity to use as an indicator.
      example: "service: script.daytimes_night\ndata:\n  light:\n    - light.bedroom_bed_light\n"
      required: true
      selector:
        entity:
          domain: light
shutter_sunny_down:
  alias: Shutter Sunny Down
  sequence:
  - service: switch.turn_on
    data: {}
    target:
      entity_id: switch.{{ area }}_shutter_down_relay
  - delay:
      hours: 0
      minutes: 0
      seconds: '{{ (states(''input_number.'' + area + ''_shutter_horizontal_open_delay'')
        | int(0) / 32) * 23}}'
      milliseconds: 0
  - wait_template: '{{ states(''sensor.'' + area + ''_shutter_down_energy_power'')
      | float(0) < 2.0 }}'
    continue_on_timeout: false
    timeout: 00:01:30
    enabled: false
  - service: switch.turn_on
    data: {}
    target:
      entity_id: switch.{{ area }}_shutter_up_relay
  - delay:
      hours: 0
      minutes: 0
      seconds: 1
      milliseconds: 50
  - service: switch.turn_off
    data: {}
    target:
      entity_id: switch.{{ area }}_shutter_up_relay
  fields:
    area:
      name: Area name
      description: Close shutter but open them horizontally at the end (parlor/bedroom)
      required: true
      selector:
        area:
  mode: single
  icon: mdi:weather-sunny
