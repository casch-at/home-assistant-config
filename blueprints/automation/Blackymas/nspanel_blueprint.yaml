blueprint:
  name: NSPanel Configuration
  description: "# Configuration and synchronization NSPanel via Blueprint\nThis project
    allows you to configure your complete NSPanel via a Blueprint with UI.\n### *That
    means you dont have to customize any code or change any lines in the code.*\nSo
    you have a nice graphical interface where you can build your NSPanel. And the
    best thing is, the installation takes only a few minutes.\n\nThe goal was to create
    a version that allows everyone to use the NSPanel fully local without having to
    deal with programming or reading hours of documentation - *AND YES WE DID IT!!!!*
    ;)\n\n\U0001F4D5 Full documentation and installation video is available here:
    [NSPanel Configuration, Setup and HowTo](https://github.com/Blackymas/NSPanel_HA_Blueprint/wiki).\n\n\U0001F4CC
    Step by Step - [Setup Video](https://www.youtube.com/watch?v=3afPFg6kUdc)\n\n\U0001F680
    How to create \"Issues\" when I have a problem: [WIKI HowTo](https://github.com/Blackymas/NSPanel_HA_Blueprint/wiki)\n\n⭐
    All Feature Requests can be found here: [All Feature Request](https://github.com/Blackymas/NSPanel_HA_Blueprint/labels/new%20feature%20request)\n\n\U0001F389
    Roadmap can be found here: [Roadmap](https://github.com/Blackymas/NSPanel_HA_Blueprint/labels/roadmap)\n\nℹ️
    Version: v4.0.2\n"
  source_url: https://github.com/Blackymas/NSPanel_HA_Blueprint/blob/main/nspanel_blueprint.yaml
  domain: automation
  homeassistant:
    min_version: 2023.5.0
  input:
    nspanel_name:
      name: NSPanel device (REQUIRED)
      description: '*SYSTEM settings*

        *Please select the ESPHome device related to the NSPanel to be controlled
        by this automation*

        '
      default: []
      selector:
        device:
          filter:
          - integration: esphome
            model: esp32dev
          multiple: false
    language:
      name: Language for NSPanel
      description: '*SYSTEM settings*

        *Select the language for your NSPanel*

        '
      default: en
      selector:
        language:
          languages:
          - en
          - bg
          - hr
          - cs
          - da
          - nl
          - et
          - fi
          - fr
          - de
          - el
          - he
          - hu
          - id
          - it
          - lv
          - lt
          - nb
          - pl
          - pt
          - ro
          - ru
          - sk
          - sl
          - es
          - sv
          - tr
          - uk
          no_sort: false
          native_name: false
    date_format:
      name: Date Format
      description: '*SYSTEM settings*

        *Select the format for date to display*

        '
      default: '%A, %d.%m'
      selector:
        select:
          multiple: false
          custom_value: true
          options:
          - label: Weekday, DD.MM (ex. "Friday, 22.03")
            value: '%A, %d.%m'
          - label: Weekday, DD/MM (ex. "Friday, 22/03")
            value: '%A, %d/%m'
          - label: Weekday, D/M (ex. "Friday, 22/3")
            value: '%A, %-d/%-m'
          - label: Weekday, M/D (ex. "Friday, 3/22")
            value: '%A, %-m/%-d'
          - label: Weekday D.M (ex. "Friday 22.3")
            value: '%A %-d.%-m'
          sort: false
    time_format:
      name: Time Format
      description: '*SYSTEM settings*

        *Select the format for time to display*

        '
      default: '%H:%M'
      selector:
        select:
          multiple: false
          custom_value: true
          options:
          - label: HH:MM (ex. 08:30 and 20:30)
            value: '%H:%M'
          - label: H:MM AM/PM (ex. 8:30AM and 8:30PM)
            value: '%-I:%M %p'
          - label: H:MM 24H (ex. 8:30 and 20:30)
            value: '%-H:%M'
          - label: H.MM 24H (ex. 8.30 and 20.30)
            value: '%-H.%M'
          sort: false
    delay:
      name: Delay to avoid synchronization problem
      description: '*SYSTEM settings*

        *Synchronization issues may occur due to the **NETWORK / WLAN**. To avoid
        this, please select the delay (milliseconds) between each instruction sent
        to the panel*

        '
      default: '1'
      selector:
        number:
          min: 0.0
          max: 100.0
          mode: slider
          step: 1.0
    placeholder01:
      name: ' '
      description: '# ✅ WEATHER AND TEMPERATURE ✅'
      default: ' '
      selector:
        select:
          options:
          - ' '
          custom_value: false
          multiple: false
          sort: false
    weather_entity:
      name: Weather entity from HA
      description: '*SYSTEM settings*

        *Select your weather entity.*

        '
      default: []
      selector:
        entity:
          filter:
          - domain:
            - weather
          multiple: false
    outdoortemp:
      name: Outdoor Temperature Sensor (Optional)
      description: '*HOME page*

        *If no outdoor sensor is available, leave the field empty and the value from
        your selected weather integration will be used automatically*

        '
      default: []
      selector:
        entity:
          filter:
          - domain:
            - sensor
            device_class:
            - temperature
          multiple: false
    home_outdoor_temp_label_color:
      name: Outdoor Temperature Sensor - LABEL COLOR (Optional)
      description: '*HOME page*

        *Label color which should be displayed*

        '
      default:
      - 255
      - 255
      - 255
      selector:
        color_rgb: {}
    indoortemp:
      name: Indoor Temperature Sensor - ENTITY (Optional)
      description: '*HOME page*

        *An indoor temperature sensor is not necessary. Leave the field empty if you
        want to use the temperature sensor of the NSPanel. Additionally a temperature
        correction for the NSPanel sensor is possible under HA Devices. So everyone
        can adjust the sensor exactly*

        '
      default: []
      selector:
        entity:
          filter:
          - domain:
            - sensor
            device_class:
            - temperature
          multiple: false
    home_indoor_temp_icon:
      name: Indoor Temperature Sensor - ICON (Optional)
      description: '*HOME page*

        *Icon which should be displayed (Default mdi:thermometer)*

        '
      default: mdi:thermometer
      selector:
        icon: {}
    home_indoor_temp_icon_color:
      name: Indoor Temperature Sensor - ICON COLOR (Optional)
      description: '*HOME page*

        *Icon color which should be displayed*

        '
      default:
      - 255
      - 255
      - 255
      selector:
        color_rgb: {}
    home_indoor_temp_label_color:
      name: Indoor Temperature Sensor - LABEL COLOR (Optional)
      description: '*HOME page*

        *Label color which should be displayed*

        '
      default:
      - 255
      - 255
      - 255
      selector:
        color_rgb: {}
    placeholder02:
      name: ' '
      description: '# ✅ HOME PAGE - SENSORS ✅'
      default: ' '
      selector:
        select:
          options:
          - ' '
          custom_value: false
          multiple: false
          sort: false
    home_value01:
      name: Sensor 01 - ENTITY (Optional)
      description: '*HOME page*

        *Entity which should be displayed*

        '
      default: []
      selector:
        entity:
          filter:
          - domain:
            - sensor
          multiple: false
    home_value01_icon:
      name: Sensor 01 - ICON (Optional)
      description: '*HOME page*

        *Icon which should be displayed (if not set, it would be used an icon from
        attributes, if available, or no icon is shown)*

        '
      default: []
      selector:
        icon: {}
    home_value01_icon_color:
      name: Sensor 01 - ICON COLOR (Optional)
      description: '*HOME page*

        *Icon color which should be displayed*

        '
      default:
      - 200
      - 204
      - 200
      selector:
        color_rgb: {}
    home_value01_label_color:
      name: Sensor 01 - LABEL COLOR (Optional)
      description: '*HOME page*

        *Label color which should be displayed*

        '
      default:
      - 200
      - 204
      - 200
      selector:
        color_rgb: {}
    home_value02:
      name: Sensor 02 - ENTITY (Optional)
      description: '*HOME page*

        *Entity which should be displayed*

        '
      default: []
      selector:
        entity:
          filter:
          - domain:
            - sensor
          multiple: false
    home_value02_icon:
      name: Sensor 02 - ICON (Optional)
      description: '*HOME page*

        *Icon which should be displayed (if not set, it would be used an icon from
        attributes, if available, or no icon is shown)*

        '
      default: []
      selector:
        icon: {}
    home_value02_icon_color:
      name: Sensor 02 - ICON COLOR (Optional)
      description: '*HOME page*

        *Icon color which should be displayed*

        '
      default:
      - 200
      - 204
      - 200
      selector:
        color_rgb: {}
    home_value02_label_color:
      name: Sensor 02 - LABEL COLOR (Optional)
      description: '*HOME page*

        *Label color which should be displayed*

        '
      default:
      - 200
      - 204
      - 200
      selector:
        color_rgb: {}
    home_value03:
      name: Sensor 03 - ENTITY (Optional)
      description: '*HOME page*

        *Entity which should be displayed*

        '
      default: []
      selector:
        entity:
          filter:
          - domain:
            - sensor
          multiple: false
    home_value03_icon:
      name: Sensor 03 - ICON (Optional)
      description: '*HOME page*

        *Icon which should be displayed (if not set, it would be used an icon from
        attributes, if available, or no icon is shown)*

        '
      default: []
      selector:
        icon: {}
    home_value03_icon_color:
      name: Sensor 03 - ICON COLOR (Optional)
      description: '*HOME page*

        *Icon color which should be displayed*

        '
      default:
      - 200
      - 204
      - 200
      selector:
        color_rgb: {}
    home_value03_label_color:
      name: Sensor 03 - LABEL COLOR (Optional)
      description: '*HOME page*

        *Label color which should be displayed*

        '
      default:
      - 200
      - 204
      - 200
      selector:
        color_rgb: {}
    placeholder03:
      name: ' '
      description: '# ✅ HOME PAGE - CHIPS ✅'
      default: ' '
      selector:
        select:
          options:
          - ' '
          custom_value: false
          multiple: false
          sort: false
    chip01:
      name: Chip 01 - ENTITY (Optional)
      description: '*HOME page*

        *Entity which should be displayed (ONLY light | switch | binary_sensor | sensor
        | with state ON/OFF)*

        '
      default: []
      selector:
        entity:
          filter:
          - domain:
            - binary_sensor
            - input_boolean
            - light
            - sensor
            - switch
          multiple: false
    chip01_icon:
      name: Chip 01 - ICON (Optional)
      description: '*HOME page*

        *Icon which should be displayed when state ON (if not set, no icon is shown)*

        '
      default: []
      selector:
        icon: {}
    chip01_icon_color:
      name: Chip 01 - ICON COLOR (Optional)
      description: '*HOME page*

        *Icon color which should be displayed*

        '
      default:
      - 128
      - 128
      - 128
      selector:
        color_rgb: {}
    chip02:
      name: Chip 02 - ENTITY (Optional)
      description: '*HOME page*

        *Entity which should be displayed (ONLY light | switch | binary_sensor | sensor
        | with state ON/OFF)*

        '
      default: []
      selector:
        entity:
          filter:
          - domain:
            - binary_sensor
            - input_boolean
            - light
            - sensor
            - switch
          multiple: false
    chip02_icon:
      name: Chip 02 - ICON (Optional)
      description: '*HOME page*

        *Icon which should be displayed when state ON (if not set, no icon is shown)*

        '
      default: []
      selector:
        icon: {}
    chip02_icon_color:
      name: Chip 02 - ICON COLOR (Optional)
      description: '*HOME page*

        *Icon color which should be displayed*

        '
      default:
      - 128
      - 128
      - 128
      selector:
        color_rgb: {}
    chip03:
      name: Chip 03 - ENTITY (Optional)
      description: '*HOME page*

        *Entity which should be displayed (ONLY light | switch | binary_sensor | sensor
        | with state ON/OFF)*

        '
      default: []
      selector:
        entity:
          filter:
          - domain:
            - binary_sensor
            - input_boolean
            - light
            - sensor
            - switch
          multiple: false
    chip03_icon:
      name: Chip 03 - ICON (Optional)
      description: '*HOME page*

        *Icon which should be displayed when state ON (if not set, no icon is shown)*

        '
      default: []
      selector:
        icon: {}
    chip03_icon_color:
      name: Chip 03 - ICON COLOR (Optional)
      description: '*HOME page*

        *Icon color which should be displayed*

        '
      default:
      - 128
      - 128
      - 128
      selector:
        color_rgb: {}
    chip04:
      name: Chip 04 - ENTITY (Optional)
      description: '*HOME page*

        *Entity which should be displayed (ONLY light | switch | binary_sensor | sensor
        | with state ON/OFF)*

        '
      default: []
      selector:
        entity:
          filter:
          - domain:
            - binary_sensor
            - input_boolean
            - light
            - sensor
            - switch
          multiple: false
    chip04_icon:
      name: Chip 04 - ICON (Optional)
      description: '*HOME page*

        *Icon which should be displayed when state ON (if not set, no icon is shown)*

        '
      default: []
      selector:
        icon: {}
    chip04_icon_color:
      name: Chip 04 - ICON COLOR (Optional)
      description: '*HOME page*

        *Icon color which should be displayed*

        '
      default:
      - 128
      - 128
      - 128
      selector:
        color_rgb: {}
    chip05:
      name: Chip 05 - ENTITY (Optional)
      description: '*HOME page*

        *Entity which should be displayed (ONLY light | switch | binary_sensor | sensor
        | with state ON/OFF)*

        '
      default: []
      selector:
        entity:
          filter:
          - domain:
            - binary_sensor
            - input_boolean
            - light
            - sensor
            - switch
          multiple: false
    chip05_icon:
      name: Chip 05 - ICON (Optional)
      description: '*HOME page*

        *Icon which should be displayed when state ON (if not set, no icon is shown)*

        '
      default: []
      selector:
        icon: {}
    chip05_icon_color:
      name: Chip 05 - ICON COLOR (Optional)
      description: '*HOME page*

        *Icon color which should be displayed*

        '
      default:
      - 128
      - 128
      - 128
      selector:
        color_rgb: {}
    chip06:
      name: Chip 06 - ENTITY (Optional)
      description: '*HOME page*

        *Entity which should be displayed (ONLY light | switch | binary_sensor | sensor
        | with state ON/OFF)*

        '
      default: []
      selector:
        entity:
          filter:
          - domain:
            - binary_sensor
            - input_boolean
            - light
            - sensor
            - switch
          multiple: false
    chip06_icon:
      name: Chip 06 - ICON (Optional)
      description: '*HOME page*

        *Icon which should be displayed when state ON (if not set, no icon is shown)*

        '
      default: []
      selector:
        icon: {}
    chip06_icon_color:
      name: Chip 06 - ICON COLOR (Optional)
      description: '*HOME page*

        *Icon color which should be displayed*

        '
      default:
      - 128
      - 128
      - 128
      selector:
        color_rgb: {}
    chip07:
      name: Chip 07 - ENTITY (Optional)
      description: '*HOME page*

        *Entity which should be displayed (ONLY light | switch | binary_sensor | sensor
        | with state ON/OFF)*

        '
      default: []
      selector:
        entity:
          filter:
          - domain:
            - binary_sensor
            - input_boolean
            - light
            - sensor
            - switch
          multiple: false
    chip07_icon:
      name: Chip 07 - ICON (Optional)
      description: '*HOME page*

        *Icon which should be displayed when state ON (if not set, no icon is shown)*

        '
      default: []
      selector:
        icon: {}
    chip07_icon_color:
      name: Chip 07 - ICON COLOR (Optional)
      description: '*HOME page*

        *Icon color which should be displayed*

        '
      default:
      - 128
      - 128
      - 128
      selector:
        color_rgb: {}
    placeholder18:
      name: ' '
      description: '# ✅ HOME PAGE - CUSTOM BUTTONS ✅'
      default: ' '
      selector:
        select:
          options:
          - ' '
          custom_value: false
          multiple: false
          sort: false
    home_custom_button01:
      name: Custom button 01 - ENTITY (Optional)
      description: '*HOME page*

        *Entity which should be switched (ONLY light | switch | cover | input_boolean
        | automation | button | input_button | scene | script | fan | climate | media_player)*

        *Entities with supported advanced settings will open it''s settings page,
        all other entities will execute the action or toggle when clicked.*

        '
      default: []
      selector:
        entity:
          filter:
          - domain:
            - automation
            - button
            - climate
            - cover
            - fan
            - input_boolean
            - input_button
            - light
            - media_player
            - scene
            - script
            - switch
          multiple: false
    home_custom_button01_icon:
      name: Custom button 01 - ICON (Optional)
      description: '*HOME page*

        *Icon which should be displayed (Default - an icon matching the entity will
        be set automatically)*

        '
      default: []
      selector:
        icon: {}
    home_custom_button02:
      name: Custom button 02 - ENTITY (Optional)
      description: '*HOME page*

        *Entity which should be switched (ONLY light | switch | cover | input_boolean
        | automation | button | input_button | scene | script | fan | climate | media_player)*

        *Entities with supported advanced settings will open it''s settings page,
        all other entities will execute the action or toggle when clicked.*

        '
      default: []
      selector:
        entity:
          filter:
          - domain:
            - automation
            - button
            - climate
            - cover
            - fan
            - input_boolean
            - input_button
            - light
            - media_player
            - scene
            - script
            - switch
          multiple: false
    home_custom_button02_icon:
      name: Custom button 02 - ICON (Optional)
      description: '*HOME page*

        *Icon which should be displayed (Default - an icon matching the entity will
        be set automatically)*

        '
      default: []
      selector:
        icon: {}
    home_custom_button03:
      name: Custom button 03 - ENTITY (Optional)
      description: '*HOME page*

        *Entity which should be switched (ONLY light | switch | cover | input_boolean
        | automation | button | input_button | scene | script | fan | climate | media_player)*

        *Entities with supported advanced settings will open it''s settings page,
        all other entities will execute the action or toggle when clicked.*

        '
      default: []
      selector:
        entity:
          filter:
          - domain:
            - automation
            - button
            - climate
            - cover
            - fan
            - input_boolean
            - input_button
            - light
            - media_player
            - scene
            - script
            - switch
          multiple: false
    home_custom_button03_icon:
      name: Custom button 03 - ICON (Optional)
      description: '*HOME page*

        *Icon which should be displayed (Default - an icon matching the entity will
        be set automatically)*

        '
      default: []
      selector:
        icon: {}
    placeholder17:
      name: ' '
      description: '# ✅ ALARM CONTROL PANEL ✅'
      default: ' '
      selector:
        select:
          options:
          - ' '
          custom_value: false
          multiple: false
          sort: false
    alarm:
      name: Alarm Control Panel to control from Home page - ENTITY (Optional)
      description: '*ALARM page*

        *If an entity is selected, the **"Alarm page"** is activated and enabled.

        '
      default: []
      selector:
        entity:
          filter:
          - domain:
            - alarm_control_panel
          multiple: false
    placeholder04:
      name: ' '
      description: '# ✅ CLIMATE ✅'
      default: ' '
      selector:
        select:
          options:
          - ' '
          custom_value: false
          multiple: false
          sort: false
    climate:
      name: Climate to control - ENTITY (Optional)
      description: '*CLIMATE page*

        *If an entity is selected, the **"Thermostat page"** is activated and enabled.
        If you have **"Underfloor Heating System"** and want to switch it via the
        relay, you must create a separate climate in HA. See HowTo*

        '
      default: []
      selector:
        entity:
          filter:
          - domain:
            - climate
          multiple: false
    climate_button08:
      name: Custom button 01 - ENTITY (Optional)
      description: '*CLIMATE page*

        *Entity which should be switched (ONLY light | switch | cover | input_boolean
        | automation | button | input_button | scene | person | script | binary_sensor
        | fan | climate | media_player)*

        '
      default: []
      selector:
        entity:
          filter:
          - domain:
            - light
            - switch
            - cover
            - input_boolean
            - automation
            - button
            - input_button
            - scene
            - person
            - script
            - binary_sensor
            - fan
          multiple: false
    climate_button08_icon:
      name: Custom button 01 - ICON (Optional)
      description: '*CLIMATE page*

        *Icon which should be displayed (Default - an icon matching the entity will
        be set automatically)*

        '
      default: []
      selector:
        icon: {}
    climate_button08_icon_color:
      name: Custom button 01 - ICON COLOR (Optional)
      description: '*CLIMATE page*

        *Icon color which should be displayed when button is on*

        '
      default:
      - 0
      - 128
      - 248
      selector:
        color_rgb: {}
    climate_button08_hold_custom_action:
      name: Custom button 01 - Hold action (Optional)
      description: '*CLIMATE page*

        *The action(s) to launch on hold*

        '
      default: []
      selector:
        action: {}
    climate_button09:
      name: Custom button 02 - ENTITY (Optional)
      description: '*CLIMATE page*

        *Entity which should be switched (ONLY light | switch | cover | input_boolean
        | automation | button | input_button | scene | person | script | binary_sensor
        | fan | climate | media_player)*

        '
      default: []
      selector:
        entity:
          filter:
          - domain:
            - light
            - switch
            - cover
            - input_boolean
            - automation
            - button
            - input_button
            - scene
            - person
            - script
            - binary_sensor
            - fan
          multiple: false
    climate_button09_icon:
      name: Custom button 02 - ICON (Optional)
      description: '*CLIMATE page*

        *Icon which should be displayed (Default - an icon matching the entity will
        be set automatically)*

        '
      default: []
      selector:
        icon: {}
    climate_button09_icon_color:
      name: Custom button 02 - ICON COLOR (Optional)
      description: '*CLIMATE page*

        *Icon color which should be displayed when button is on*

        '
      default:
      - 0
      - 128
      - 248
      selector:
        color_rgb: {}
    climate_button09_hold_custom_action:
      name: Custom button 02 - Hold action (Optional)
      description: '*CLIMATE page*

        *The action(s) to launch on hold*

        '
      default: []
      selector:
        action: {}
    climate_value01:
      name: Sensor 01 - ENTITY (Optional)
      description: '*CLIMATE page*

        *Entity which should be controlled*

        '
      default: []
      selector:
        entity:
          filter:
          - domain:
            - sensor
          multiple: false
    climate_value01_icon:
      name: Sensor 01 - ICON (Optional)
      description: '*CLIMATE page*

        *Icon which should be displayed (if not set, it would be used an icon from
        attributes, if available, or no icon is shown)*

        '
      default: []
      selector:
        icon: {}
    climate_value01_icon_color:
      name: Sensor 01 - ICON COLOR (Optional)
      description: '*CLIMATE page*

        *Icon color which should be displayed*

        '
      default:
      - 200
      - 204
      - 200
      selector:
        color_rgb: {}
    climate_value01_label_color:
      name: Sensor 01 - LABEL COLOR (Optional)
      description: '*CLIMATE page*

        *Label color which should be displayed*

        '
      default:
      - 200
      - 204
      - 200
      selector:
        color_rgb: {}
    climate_value02:
      name: Sensor 02 - ENTITY (Optional)
      description: '*CLIMATE page*

        *Entity which should be displayed*

        '
      default: []
      selector:
        entity:
          filter:
          - domain:
            - sensor
          multiple: false
    climate_value02_icon:
      name: Sensor 02 - ICON (Optional)
      description: '*CLIMATE page*

        *Icon which should be displayed (if not set, it would be used an icon from
        attributes, if available, or no icon is shown)*

        '
      default: []
      selector:
        icon: {}
    climate_value02_icon_color:
      name: Sensor 02 - ICON COLOR (Optional)
      description: '*CLIMATE page*

        *Icon color which should be displayed*

        '
      default:
      - 200
      - 204
      - 200
      selector:
        color_rgb: {}
    climate_value02_label_color:
      name: Sensor 02 - LABEL COLOR (Optional)
      description: '*CLIMATE page*

        *Label color which should be displayed*

        '
      default:
      - 200
      - 204
      - 200
      selector:
        color_rgb: {}
    climate_value03:
      name: Sensor 03 - ENTITY (Optional)
      description: '*CLIMATE page*

        *Entity which should be displayed*

        '
      default: []
      selector:
        entity:
          filter:
          - domain:
            - sensor
          multiple: false
    climate_value03_icon:
      name: Sensor 03 - ICON (Optional)
      description: '*CLIMATE page*

        *Icon which should be displayed (if not set, it would be used an icon from
        attributes, if available, or no icon is shown)*

        '
      default: []
      selector:
        icon: {}
    climate_value03_icon_color:
      name: Sensor 03 - ICON COLOR (Optional)
      description: '*CLIMATE page*

        *Icon color which should be displayed*

        '
      default:
      - 200
      - 204
      - 200
      selector:
        color_rgb: {}
    climate_value03_label_color:
      name: Sensor 03 - LABEL COLOR (Optional)
      description: '*CLIMATE page*

        *Label color which should be displayed*

        '
      default:
      - 200
      - 204
      - 200
      selector:
        color_rgb: {}
    climate_value04:
      name: Sensor 04 - ENTITY (Optional)
      description: '*CLIMATE page*

        *Entity which should be displayed*

        '
      default: []
      selector:
        entity:
          filter:
          - domain:
            - sensor
          multiple: false
    climate_value04_icon:
      name: Sensor 04 - ICON (Optional)
      description: '*CLIMATE page*

        *Icon which should be displayed (if not set, it would be used an icon from
        attributes, if available, or no icon is shown)*

        '
      default: []
      selector:
        icon: {}
    climate_value04_icon_color:
      name: Sensor 04 - ICON COLOR (Optional)
      description: '*CLIMATE page*

        *Icon color which should be displayed*

        '
      default:
      - 200
      - 204
      - 200
      selector:
        color_rgb: {}
    climate_value04_label_color:
      name: Sensor 04 - LABEL COLOR (Optional)
      description: '*CLIMATE page*

        *Label color which should be displayed*

        '
      default:
      - 200
      - 204
      - 200
      selector:
        color_rgb: {}
    placeholder05:
      name: ' '
      description: '# ✅ QR CODE ✅'
      default: ' '
      selector:
        select:
          options:
          - ' '
          custom_value: false
          multiple: false
          sort: false
    qrcode_enabled:
      name: Activate QR Code - TRUE/FALSE (Optional)
      default: false
      description: '*HOME page*

        *activate QR Code page and QR Code Button on the home page*

        '
      selector:
        boolean: {}
    qrcode_label:
      name: QR Code page name - LABEL (Optional)
      description: '*QRCODE page*

        *Label which should be displayed*

        '
      default: []
      selector:
        text:
          multiline: false
    qrcode_value:
      name: QR Code content - VALUE (Optional)
      description: '*QRCODE page*

        *Value you want to display as QR code*

        '
      default: []
      selector:
        text:
          multiline: false
    home_button05_icon:
      name: QR Code - ICON (Optional)
      description: '*HOME page*

        *Icon which should be displayed (Default mdi:qrcode-scan)*

        '
      default: mdi:qrcode-scan
      selector:
        icon: {}
    home_button05_icon_color:
      name: QR Code - ICON COLOR (Optional)
      description: '*HOME page*

        *Icon color which should be displayed (default color is set)*

        '
      default:
      - 200
      - 204
      - 200
      selector:
        color_rgb: {}
    placeholder06:
      name: ' '
      description: '# ✅ HARDWARE BUTTONS ✅'
      default: ' '
      selector:
        select:
          options:
          - ' '
          custom_value: false
          multiple: false
          sort: false
    relay_1_local_fallback:
      name: Activate relay 1 local fallback - TRUE/FALSE (Optional)
      default: false
      description: '*SYSTEM settings*

        *activate this to use left button to toggle relay 1 if display is offline*

        *When button left is using the entity related to relay 1 the processing will
        always be local, even if fallback is disabled.*

        '
      selector:
        boolean: {}
    left_button_entity:
      name: Left hardware button - ENTITY (Optional)
      description: '*SYSTEM settings*

        *Entity which should be switched*

        '
      default: []
      selector:
        entity:
          filter:
          - domain:
            - light
            - switch
            - input_boolean
            - cover
            - automation
            - button
            - input_button
            - scene
            - script
            - fan
            - media_player
          multiple: false
    left_button_name:
      name: Left hardware button name - LABEL (Optional)
      description: '*HOME page*

        *Label which should be displayed (10 characters are supported)*

        Note: This label is not visible on the US landscape model.

        '
      default: []
      selector:
        text:
          multiline: false
    left_button_hold_select:
      name: Left hardware button hold assignment - VALUE (Optional)
      description: '*SYSTEM settings*

        *Select what should happen on hold*

        '
      default: Default
      selector:
        select:
          options:
          - Default
          - Custom Action
          custom_value: false
          multiple: false
          sort: false
    left_button_hold_custom_action:
      name: Left hardware button custom hold action - VALUE (Optional)
      description: '*SYSTEM settings*

        *The action(s) to launch on hold*

        '
      default: []
      selector:
        action: {}
    left_button_color:
      name: Left hardware button - LABEL COLOR (Optional)
      description: '*HOME page*

        *LABEL color which should be displayed*

        '
      default:
      - 200
      - 204
      - 200
      selector:
        color_rgb: {}
    relay_2_local_fallback:
      name: Activate relay 2 local fallback - TRUE/FALSE (Optional)
      default: false
      description: '*SYSTEM settings*

        *activate this to use right button to toggle relay 2 if display is offline*

        *When button right is using the entity related to relay 2 the processing will
        always be local, even if fallback is disabled.*

        '
      selector:
        boolean: {}
    right_button_entity:
      name: Right hardware button - ENTITY (Optional)
      description: '*SYSTEM settings*

        *Entity which should be switched*

        '
      default: []
      selector:
        entity:
          filter:
          - domain:
            - light
            - switch
            - input_boolean
            - cover
            - automation
            - button
            - input_button
            - scene
            - script
            - fan
            - media_player
          multiple: false
    right_button_name:
      name: Right hardware button name - LABEL (Optional)
      description: '*HOME page*

        *Label which should be displayed (10 characters are supported)*

        Note: This label is not visible on the US landscape model.

        '
      default: []
      selector:
        text:
          multiline: false
    right_button_hold_select:
      name: Right hardware button hold assignment - VALUE (Optional)
      description: '*SYSTEM settings*

        *Select what should happen on hold*

        '
      default: Default
      selector:
        select:
          options:
          - Default
          - Custom Action
          custom_value: false
          multiple: false
          sort: false
    right_button_hold_custom_action:
      name: Right hardware button custom hold action - VALUE (Optional)
      description: '*SYSTEM settings*

        *The action(s) to launch on hold*

        '
      default: []
      selector:
        action: {}
    right_button_color:
      name: Right hardware button - LABEL COLOR (Optional)
      description: '*HOME page*

        *LABEL color which should be displayed*

        '
      default:
      - 200
      - 204
      - 200
      selector:
        color_rgb: {}
    placeholder07:
      name: ' '
      description: '# ✅ BUTTON PAGE 01 ✅'
      default: ' '
      selector:
        select:
          options:
          - ' '
          custom_value: false
          multiple: false
          sort: false
    button_page01_label:
      name: Button page 01 name - LABEL (Optional)
      description: '*ButtonPage01*

        *Label which should be displayed*

        '
      default: []
      selector:
        text:
          multiline: false
    entity01:
      name: Button 01 - ENTITY (Optional)
      description: '*ButtonPage01*

        *Entity which should be switched (ONLY light | switch | cover | input_boolean
        | automation | button | input_button | scene | person | script | binary_sensor
        | fan | climate | media_player)*

        '
      default: []
      selector:
        entity:
          filter:
          - domain:
            - light
            - switch
            - cover
            - input_boolean
            - automation
            - button
            - input_button
            - scene
            - person
            - script
            - binary_sensor
            - fan
            - climate
            - media_player
          multiple: false
    entity01_name:
      name: Button 01 name - LABEL (Optional)
      description: '*ButtonPage01*

        *Label which should be displayed (10 characters are supported)*

        '
      default: []
      selector:
        text:
          multiline: false
    entity01_icon:
      name: Button 01 - ICON (Optional)
      description: '*ButtonPage01*

        *Icon which should be displayed (Default - an icon matching the entity will
        be set automatically)*

        '
      default: []
      selector:
        icon: {}
    entity01_icon_color:
      name: Button 01 - ICON COLOR (Optional)
      description: '*ButtonPage01*

        *Icon color which should be displayed when button is on*

        '
      default:
      - 0
      - 128
      - 248
      selector:
        color_rgb: {}
    entity01_confirm:
      name: Confirm execution of the button press - TRUE/FALSE (Optional)
      default: false
      description: '*ButtonPage01*

        *Ask for confirmation to execute **Button01** action*

        '
      selector:
        boolean: {}
    entity02:
      name: Button 02 - ENTITY (Optional)
      description: '*ButtonPage01*

        *Entity which should be switched (ONLY light | switch | cover | input_boolean
        | automation | button | input_button | scene | person | script | binary_sensor
        | fan | climate | media_player)*

        '
      default: []
      selector:
        entity:
          filter:
          - domain:
            - light
            - switch
            - cover
            - input_boolean
            - automation
            - button
            - input_button
            - scene
            - person
            - script
            - binary_sensor
            - fan
            - climate
            - media_player
          multiple: false
    entity02_name:
      name: Button 02 name - LABEL (Optional)
      description: '*ButtonPage01*

        *Label which should be displayed (10 characters are supported)*

        '
      default: []
      selector:
        text:
          multiline: false
    entity02_icon:
      name: Button 02 - ICON (Optional)
      description: '*ButtonPage01*

        *Icon which should be displayed (Default - an icon matching the entity will
        be set automatically)*

        '
      default: []
      selector:
        icon: {}
    entity02_icon_color:
      name: Button 02 - ICON COLOR (Optional)
      description: '*ButtonPage01*

        *Icon color which should be displayed when button is on*

        '
      default:
      - 0
      - 128
      - 248
      selector:
        color_rgb: {}
    entity02_confirm:
      name: Confirm execution of the button press - TRUE/FALSE (Optional)
      default: false
      description: '*ButtonPage01*

        *Ask for confirmation to execute **Button02** action*

        '
      selector:
        boolean: {}
    entity03:
      name: Button 03 - ENTITY (Optional)
      description: '*ButtonPage01*

        *Entity which should be switched (ONLY light | switch | cover | input_boolean
        | automation | button | input_button | scene | person | script | binary_sensor
        | fan | climate | media_player)*

        '
      default: []
      selector:
        entity:
          filter:
          - domain:
            - light
            - switch
            - cover
            - input_boolean
            - automation
            - button
            - input_button
            - scene
            - person
            - script
            - binary_sensor
            - fan
            - climate
            - media_player
          multiple: false
    entity03_name:
      name: Button 03 name - LABEL (Optional)
      description: '*ButtonPage01*

        *Label which should be displayed (10 characters are supported)*

        '
      default: []
      selector:
        text:
          multiline: false
    entity03_icon:
      name: Button 03 - ICON (Optional)
      description: '*ButtonPage01*

        *Icon which should be displayed (Default - an icon matching the entity will
        be set automatically)*

        '
      default: []
      selector:
        icon: {}
    entity03_icon_color:
      name: Button 03 - ICON COLOR (Optional)
      description: '*ButtonPage01*

        *Icon color which should be displayed when button is on*

        '
      default:
      - 0
      - 128
      - 248
      selector:
        color_rgb: {}
    entity03_confirm:
      name: Confirm execution of the button press - TRUE/FALSE (Optional)
      default: false
      description: '*ButtonPage01*

        *Ask for confirmation to execute **Button03** action*

        '
      selector:
        boolean: {}
    entity04:
      name: Button 04 - ENTITY (Optional)
      description: '*ButtonPage01*

        *Entity which should be switched (ONLY light | switch | cover | input_boolean
        | automation | button | input_button | scene | person | script | binary_sensor
        | fan | climate | media_player)*

        '
      default: []
      selector:
        entity:
          filter:
          - domain:
            - light
            - switch
            - cover
            - input_boolean
            - automation
            - button
            - input_button
            - scene
            - person
            - script
            - binary_sensor
            - fan
            - climate
            - media_player
          multiple: false
    entity04_name:
      name: Button 04 name - LABEL (Optional)
      description: '*ButtonPage01*

        *Label which should be displayed (10 characters are supported)*

        '
      default: []
      selector:
        text:
          multiline: false
    entity04_icon:
      name: Button 04 - ICON (Optional)
      description: '*ButtonPage01*

        *Icon which should be displayed (Default - an icon matching the entity will
        be set automatically)*

        '
      default: []
      selector:
        icon: {}
    entity04_icon_color:
      name: Button 04 - ICON COLOR (Optional)
      description: '*ButtonPage01*

        *Icon color which should be displayed when button is on*

        '
      default:
      - 0
      - 128
      - 248
      selector:
        color_rgb: {}
    entity04_confirm:
      name: Confirm execution of the button press - TRUE/FALSE (Optional)
      default: false
      description: '*ButtonPage01*

        *Ask for confirmation to execute **Button04** action*

        '
      selector:
        boolean: {}
    entity05:
      name: Button 05 - ENTITY (Optional)
      description: '*ButtonPage01*

        *Entity which should be switched (ONLY light | switch | cover | input_boolean
        | automation | button | input_button | scene | person | script | binary_sensor
        | fan | climate | media_player)*

        '
      default: []
      selector:
        entity:
          filter:
          - domain:
            - light
            - switch
            - cover
            - input_boolean
            - automation
            - button
            - input_button
            - scene
            - person
            - script
            - binary_sensor
            - fan
            - climate
            - media_player
          multiple: false
    entity05_name:
      name: Button 05 name - LABEL (Optional)
      description: '*ButtonPage01*

        *Label which should be displayed (10 characters are supported)*

        '
      default: []
      selector:
        text:
          multiline: false
    entity05_icon:
      name: Button 05 - ICON (Optional)
      description: '*ButtonPage01*

        *Icon which should be displayed (Default - an icon matching the entity will
        be set automatically)*

        '
      default: []
      selector:
        icon: {}
    entity05_icon_color:
      name: Button 05 - ICON COLOR (Optional)
      description: '*ButtonPage01*

        *Icon color which should be displayed when button is on*

        '
      default:
      - 0
      - 128
      - 248
      selector:
        color_rgb: {}
    entity05_confirm:
      name: Confirm execution of the button press - TRUE/FALSE (Optional)
      default: false
      description: '*ButtonPage01*

        *Ask for confirmation to execute **Button05** action*

        '
      selector:
        boolean: {}
    entity06:
      name: Button 06 - ENTITY (Optional)
      description: '*ButtonPage01*

        *Entity which should be switched (ONLY light | switch | cover | input_boolean
        | automation | button | input_button | scene | person | script | binary_sensor
        | fan | climate | media_player)*

        '
      default: []
      selector:
        entity:
          filter:
          - domain:
            - light
            - switch
            - cover
            - input_boolean
            - automation
            - button
            - input_button
            - scene
            - person
            - script
            - binary_sensor
            - fan
            - climate
            - media_player
          multiple: false
    entity06_name:
      name: Button 06 name - LABEL (Optional)
      description: '*ButtonPage01*

        *Label which should be displayed (10 characters are supported)*

        '
      default: []
      selector:
        text:
          multiline: false
    entity06_icon:
      name: Button 06 - ICON (Optional)
      description: '*ButtonPage01*

        *Icon which should be displayed (Default - an icon matching the entity will
        be set automatically)*

        '
      default: []
      selector:
        icon: {}
    entity06_icon_color:
      name: Button 06 - ICON COLOR (Optional)
      description: '*ButtonPage01*

        *Icon color which should be displayed when button is on*

        '
      default:
      - 0
      - 128
      - 248
      selector:
        color_rgb: {}
    entity06_confirm:
      name: Confirm execution of the button press - TRUE/FALSE (Optional)
      default: false
      description: '*ButtonPage01*

        *Ask for confirmation to execute **Button06** action*

        '
      selector:
        boolean: {}
    entity07:
      name: Button 07 - ENTITY (Optional)
      description: '*ButtonPage01*

        *Entity which should be switched (ONLY light | switch | cover | input_boolean
        | automation | button | input_button | scene | person | script | binary_sensor
        | fan | climate | media_player)*

        '
      default: []
      selector:
        entity:
          filter:
          - domain:
            - light
            - switch
            - cover
            - input_boolean
            - automation
            - button
            - input_button
            - scene
            - person
            - script
            - binary_sensor
            - fan
            - climate
            - media_player
          multiple: false
    entity07_name:
      name: Button 07 name - LABEL (Optional)
      description: '*ButtonPage01*

        *Label which should be displayed (10 characters are supported)*

        '
      default: []
      selector:
        text:
          multiline: false
    entity07_icon:
      name: Button 07 - ICON (Optional)
      description: '*ButtonPage01*

        *Icon which should be displayed (Default - an icon matching the entity will
        be set automatically)*

        '
      default: []
      selector:
        icon: {}
    entity07_icon_color:
      name: Button 07 - ICON COLOR (Optional)
      description: '*ButtonPage01*

        *Icon color which should be displayed when button is on*

        '
      default:
      - 0
      - 128
      - 248
      selector:
        color_rgb: {}
    entity07_confirm:
      name: Confirm execution of the button press - TRUE/FALSE (Optional)
      default: false
      description: '*ButtonPage01*

        *Ask for confirmation to execute **Button07** action*

        '
      selector:
        boolean: {}
    entity08:
      name: Button 08 - ENTITY (Optional)
      description: '*ButtonPage01*

        *Entity which should be switched (ONLY light | switch | cover | input_boolean
        | automation | button | input_button | scene | person | script | binary_sensor
        | fan | climate | media_player)*

        '
      default: []
      selector:
        entity:
          filter:
          - domain:
            - light
            - switch
            - cover
            - input_boolean
            - automation
            - button
            - input_button
            - scene
            - person
            - script
            - binary_sensor
            - fan
            - climate
            - media_player
          multiple: false
    entity08_name:
      name: Button 08 name - LABEL (Optional)
      description: '*ButtonPage01*

        *Label which should be displayed (10 characters are supported)*

        '
      default: []
      selector:
        text:
          multiline: false
    entity08_icon:
      name: Button 08 - ICON (Optional)
      description: '*ButtonPage01*

        *Icon which should be displayed (Default - an icon matching the entity will
        be set automatically)*

        '
      default: []
      selector:
        icon: {}
    entity08_icon_color:
      name: Button 08 - ICON COLOR (Optional)
      description: '*ButtonPage01*

        *Icon color which should be displayed when button is on*

        '
      default:
      - 0
      - 128
      - 248
      selector:
        color_rgb: {}
    entity08_confirm:
      name: Confirm execution of the button press - TRUE/FALSE (Optional)
      default: false
      description: '*ButtonPage01*

        *Ask for confirmation to execute **Button08** action*

        '
      selector:
        boolean: {}
    placeholder08:
      name: ' '
      description: '# ✅ BUTTON PAGE 02 ✅'
      default: ' '
      selector:
        select:
          options:
          - ' '
          custom_value: false
          multiple: false
          sort: false
    button_page02_label:
      name: Button page 02 name - LABEL (Optional)
      description: '*ButtonPage02*

        *Label which should be displayed*

        '
      default: []
      selector:
        text:
          multiline: false
    entity09:
      name: Button 09 - ENTITY (Optional)
      description: '*ButtonPage02*

        *Entity which should be switched (ONLY light | switch | cover | input_boolean
        | automation | button | input_button | scene | person | script | binary_sensor
        | fan | climate | media_player)*

        '
      default: []
      selector:
        entity:
          filter:
          - domain:
            - light
            - switch
            - cover
            - input_boolean
            - automation
            - button
            - input_button
            - scene
            - person
            - script
            - binary_sensor
            - fan
            - climate
            - media_player
          multiple: false
    entity09_name:
      name: Button 09 name - LABEL (Optional)
      description: '*ButtonPage02*

        *Label which should be displayed (10 characters are supported)*

        '
      default: []
      selector:
        text:
          multiline: false
    entity09_icon:
      name: Button 09 - ICON (Optional)
      description: '*ButtonPage02*

        *Icon which should be displayed (Default - an icon matching the entity will
        be set automatically)*

        '
      default: []
      selector:
        icon: {}
    entity09_icon_color:
      name: Button 09 - ICON COLOR (Optional)
      description: '*ButtonPage02*

        *Icon color which should be displayed when button is on*

        '
      default:
      - 0
      - 128
      - 248
      selector:
        color_rgb: {}
    entity09_confirm:
      name: Confirm execution of the button press - TRUE/FALSE (Optional)
      default: false
      description: '*ButtonPage02*

        *Ask for confirmation to execute **Button09** action*

        '
      selector:
        boolean: {}
    entity10:
      name: Button 10 - ENTITY (Optional)
      description: '*ButtonPage02*

        *Entity which should be switched (ONLY light | switch | cover | input_boolean
        | automation | button | input_button | scene | person | script | binary_sensor
        | fan | climate | media_player)*

        '
      default: []
      selector:
        entity:
          filter:
          - domain:
            - light
            - switch
            - cover
            - input_boolean
            - automation
            - button
            - input_button
            - scene
            - person
            - script
            - binary_sensor
            - fan
            - climate
            - media_player
          multiple: false
    entity10_name:
      name: Button 10 name - LABEL (Optional)
      description: '*ButtonPage02*

        *Label which should be displayed (10 characters are supported)*

        '
      default: []
      selector:
        text:
          multiline: false
    entity10_icon:
      name: Button 10 - ICON (Optional)
      description: '*ButtonPage02*

        *Icon which should be displayed (Default - an icon matching the entity will
        be set automatically)*

        '
      default: []
      selector:
        icon: {}
    entity10_icon_color:
      name: Button 10 - ICON COLOR (Optional)
      description: '*ButtonPage02*

        *Icon color which should be displayed when button is on*

        '
      default:
      - 0
      - 128
      - 248
      selector:
        color_rgb: {}
    entity10_confirm:
      name: Confirm execution of the button press - TRUE/FALSE (Optional)
      default: false
      description: '*ButtonPage02*

        *Ask for confirmation to execute **Button10** action*

        '
      selector:
        boolean: {}
    entity11:
      name: Button 11 - ENTITY (Optional)
      description: '*ButtonPage02*

        *Entity which should be switched (ONLY light | switch | cover | input_boolean
        | automation | button | input_button | scene | person | script | binary_sensor
        | fan | climate | media_player)*

        '
      default: []
      selector:
        entity:
          filter:
          - domain:
            - light
            - switch
            - cover
            - input_boolean
            - automation
            - button
            - input_button
            - scene
            - person
            - script
            - binary_sensor
            - fan
            - climate
            - media_player
          multiple: false
    entity11_name:
      name: Button 11 name - LABEL (Optional)
      description: '*ButtonPage02*

        *Label which should be displayed (10 characters are supported)*

        '
      default: []
      selector:
        text:
          multiline: false
    entity11_icon:
      name: Button 11 - ICON (Optional)
      description: '*ButtonPage02*

        *Icon which should be displayed (Default - an icon matching the entity will
        be set automatically)*

        '
      default: []
      selector:
        icon: {}
    entity11_icon_color:
      name: Button 11 - ICON COLOR (Optional)
      description: '*ButtonPage02*

        *Icon color which should be displayed when button is on*

        '
      default:
      - 0
      - 128
      - 248
      selector:
        color_rgb: {}
    entity11_confirm:
      name: Confirm execution of the button press - TRUE/FALSE (Optional)
      default: false
      description: '*ButtonPage02*

        *Ask for confirmation to execute **Button11** action*

        '
      selector:
        boolean: {}
    entity12:
      name: Button 12 - ENTITY (Optional)
      description: '*ButtonPage02*

        *Entity which should be switched (ONLY light | switch | cover | input_boolean
        | automation | button | input_button | scene | person | script | binary_sensor
        | fan | climate | media_player)*

        '
      default: []
      selector:
        entity:
          filter:
          - domain:
            - light
            - switch
            - cover
            - input_boolean
            - automation
            - button
            - input_button
            - scene
            - person
            - script
            - binary_sensor
            - fan
            - climate
            - media_player
          multiple: false
    entity12_name:
      name: Button 12 name - LABEL (Optional)
      description: '*ButtonPage02*

        *Label which should be displayed (10 characters are supported)*

        '
      default: []
      selector:
        text:
          multiline: false
    entity12_icon:
      name: Button 12 - ICON (Optional)
      description: '*ButtonPage02*

        *Icon which should be displayed (Default - an icon matching the entity will
        be set automatically)*

        '
      default: []
      selector:
        icon: {}
    entity12_icon_color:
      name: Button 12 - ICON COLOR (Optional)
      description: '*ButtonPage02*

        *Icon color which should be displayed when button is on*

        '
      default:
      - 0
      - 128
      - 248
      selector:
        color_rgb: {}
    entity12_confirm:
      name: Confirm execution of the button press - TRUE/FALSE (Optional)
      default: false
      description: '*ButtonPage02*

        *Ask for confirmation to execute **Button12** action*

        '
      selector:
        boolean: {}
    entity13:
      name: Button 13 - ENTITY (Optional)
      description: '*ButtonPage02*

        *Entity which should be switched (ONLY light | switch | cover | input_boolean
        | automation | button | input_button | scene | person | script | binary_sensor
        | fan | climate | media_player)*

        '
      default: []
      selector:
        entity:
          filter:
          - domain:
            - light
            - switch
            - cover
            - input_boolean
            - automation
            - button
            - input_button
            - scene
            - person
            - script
            - binary_sensor
            - fan
            - climate
            - media_player
          multiple: false
    entity13_name:
      name: Button 13 name - LABEL (Optional)
      description: '*ButtonPage02*

        *Label which should be displayed (10 characters are supported)*

        '
      default: []
      selector:
        text:
          multiline: false
    entity13_icon:
      name: Button 13 - ICON (Optional)
      description: '*ButtonPage02*

        *Icon which should be displayed (Default - an icon matching the entity will
        be set automatically)*

        '
      default: []
      selector:
        icon: {}
    entity13_icon_color:
      name: Button 13 - ICON COLOR (Optional)
      description: '*ButtonPage02*

        *Icon color which should be displayed when button is on*

        '
      default:
      - 0
      - 128
      - 248
      selector:
        color_rgb: {}
    entity13_confirm:
      name: Confirm execution of the button press - TRUE/FALSE (Optional)
      default: false
      description: '*ButtonPage02*

        *Ask for confirmation to execute **Button13** action*

        '
      selector:
        boolean: {}
    entity14:
      name: Button 14 - ENTITY (Optional)
      description: '*ButtonPage02*

        *Entity which should be switched (ONLY light | switch | cover | input_boolean
        | automation | button | input_button | scene | person | script | binary_sensor
        | fan | climate | media_player)*

        '
      default: []
      selector:
        entity:
          filter:
          - domain:
            - light
            - switch
            - cover
            - input_boolean
            - automation
            - button
            - input_button
            - scene
            - person
            - script
            - binary_sensor
            - fan
            - climate
            - media_player
          multiple: false
    entity14_name:
      name: Button 14 name - LABEL (Optional)
      description: '*ButtonPage02*

        *Label which should be displayed (10 characters are supported)*

        '
      default: []
      selector:
        text:
          multiline: false
    entity14_icon:
      name: Button 14 - ICON (Optional)
      description: '*ButtonPage02*

        *Icon which should be displayed (Default - an icon matching the entity will
        be set automatically)*

        '
      default: []
      selector:
        icon: {}
    entity14_icon_color:
      name: Button 14 - ICON COLOR (Optional)
      description: '*ButtonPage02*

        *Icon color which should be displayed when button is on*

        '
      default:
      - 0
      - 128
      - 248
      selector:
        color_rgb: {}
    entity14_confirm:
      name: Confirm execution of the button press - TRUE/FALSE (Optional)
      default: false
      description: '*ButtonPage02*

        *Ask for confirmation to execute **Button14** action*

        '
      selector:
        boolean: {}
    entity15:
      name: Button 15 - ENTITY (Optional)
      description: '*ButtonPage02*

        *Entity which should be switched (ONLY light | switch | cover | input_boolean
        | automation | button | input_button | scene | person | script | binary_sensor
        | fan | climate | media_player)*

        '
      default: []
      selector:
        entity:
          filter:
          - domain:
            - light
            - switch
            - cover
            - input_boolean
            - automation
            - button
            - input_button
            - scene
            - person
            - script
            - binary_sensor
            - fan
            - climate
            - media_player
          multiple: false
    entity15_name:
      name: Button 15 name - LABEL (Optional)
      description: '*ButtonPage02*

        *Label which should be displayed (10 characters are supported)*

        '
      default: []
      selector:
        text:
          multiline: false
    entity15_icon:
      name: Button 15 - ICON (Optional)
      description: '*ButtonPage02*

        *Icon which should be displayed (Default - an icon matching the entity will
        be set automatically)*

        '
      default: []
      selector:
        icon: {}
    entity15_icon_color:
      name: Button 15 - ICON COLOR (Optional)
      description: '*ButtonPage02*

        *Icon color which should be displayed when button is on*

        '
      default:
      - 0
      - 128
      - 248
      selector:
        color_rgb: {}
    entity15_confirm:
      name: Confirm execution of the button press - TRUE/FALSE (Optional)
      default: false
      description: '*ButtonPage02*

        *Ask for confirmation to execute **Button15** action*

        '
      selector:
        boolean: {}
    entity16:
      name: Button 16 - ENTITY (Optional)
      description: '*ButtonPage02*

        *Entity which should be switched (ONLY light | switch | cover | input_boolean
        | automation | button | input_button | scene | person | script | binary_sensor
        | fan | climate | media_player)*

        '
      default: []
      selector:
        entity:
          filter:
          - domain:
            - light
            - switch
            - cover
            - input_boolean
            - automation
            - button
            - input_button
            - scene
            - person
            - script
            - binary_sensor
            - fan
            - climate
            - media_player
          multiple: false
    entity16_name:
      name: Button 16 name - LABEL (Optional)
      description: '*ButtonPage02*

        *Label which should be displayed (10 characters are supported)*

        '
      default: []
      selector:
        text:
          multiline: false
    entity16_icon:
      name: Button 16 - ICON (Optional)
      description: '*ButtonPage02*

        *Icon which should be displayed (Default - an icon matching the entity will
        be set automatically)*

        '
      default: []
      selector:
        icon: {}
    entity16_icon_color:
      name: Button 16 - ICON COLOR (Optional)
      description: '*ButtonPage02*

        *Icon color which should be displayed when button is on*

        '
      default:
      - 0
      - 128
      - 248
      selector:
        color_rgb: {}
    entity16_confirm:
      name: Confirm execution of the button press - TRUE/FALSE (Optional)
      default: false
      description: '*ButtonPage02*

        *Ask for confirmation to execute **Button16** action*

        '
      selector:
        boolean: {}
    placeholder09:
      name: ' '
      description: '# ✅ BUTTON PAGE 03 ✅'
      default: ' '
      selector:
        select:
          options:
          - ' '
          custom_value: false
          multiple: false
          sort: false
    button_page03_label:
      name: Button page 03 name - LABEL (Optional)
      description: '*ButtonPage03*

        *Label which should be displayed*

        '
      default: []
      selector:
        text:
          multiline: false
    entity17:
      name: Button 17 - ENTITY (Optional)
      description: '*ButtonPage03*

        *Entity which should be switched (ONLY light | switch | cover | input_boolean
        | automation | button | input_button | scene | person | script | binary_sensor
        | fan | climate | media_player)*

        '
      default: []
      selector:
        entity:
          filter:
          - domain:
            - light
            - switch
            - cover
            - input_boolean
            - automation
            - button
            - input_button
            - scene
            - person
            - script
            - binary_sensor
            - fan
            - climate
            - media_player
          multiple: false
    entity17_name:
      name: Button 17 name - LABEL (Optional)
      description: '*ButtonPage03*

        *Label which should be displayed (10 characters are supported)*

        '
      default: []
      selector:
        text:
          multiline: false
    entity17_icon:
      name: Button 17 - ICON (Optional)
      description: '*ButtonPage03*

        *Icon which should be displayed (Default - an icon matching the entity will
        be set automatically)*

        '
      default: []
      selector:
        icon: {}
    entity17_icon_color:
      name: Button 17 - ICON COLOR (Optional)
      description: '*ButtonPage03*

        *Icon color which should be displayed when button is on*

        '
      default:
      - 0
      - 128
      - 248
      selector:
        color_rgb: {}
    entity17_confirm:
      name: Confirm execution of the button press - TRUE/FALSE (Optional)
      default: false
      description: '*ButtonPage03*

        *Ask for confirmation to execute **Button17** action*

        '
      selector:
        boolean: {}
    entity18:
      name: Button 18 - ENTITY (Optional)
      description: '*ButtonPage03*

        *Entity which should be switched (ONLY light | switch | cover | input_boolean
        | automation | button | input_button | scene | person | script | binary_sensor
        | fan | climate | media_player)*

        '
      default: []
      selector:
        entity:
          filter:
          - domain:
            - light
            - switch
            - cover
            - input_boolean
            - automation
            - button
            - input_button
            - scene
            - person
            - script
            - binary_sensor
            - fan
            - climate
            - media_player
          multiple: false
    entity18_name:
      name: Button 18 name - LABEL (Optional)
      description: '*ButtonPage03*

        *Label which should be displayed (10 characters are supported)*

        '
      default: []
      selector:
        text:
          multiline: false
    entity18_icon:
      name: Button 18 - ICON (Optional)
      description: '*ButtonPage03*

        *Icon which should be displayed (Default - an icon matching the entity will
        be set automatically)*

        '
      default: []
      selector:
        icon: {}
    entity18_icon_color:
      name: Button 18 - ICON COLOR (Optional)
      description: '*ButtonPage03*

        *Icon color which should be displayed when button is on*

        '
      default:
      - 0
      - 128
      - 248
      selector:
        color_rgb: {}
    entity18_confirm:
      name: Confirm execution of the button press - TRUE/FALSE (Optional)
      default: false
      description: '*ButtonPage03*

        *Ask for confirmation to execute **Button18** action*

        '
      selector:
        boolean: {}
    entity19:
      name: Button 19 - ENTITY (Optional)
      description: '*ButtonPage03*

        *Entity which should be switched (ONLY light | switch | cover | input_boolean
        | automation | button | input_button | scene | person | script | binary_sensor
        | fan | climate | media_player)*

        '
      default: []
      selector:
        entity:
          filter:
          - domain:
            - light
            - switch
            - cover
            - input_boolean
            - automation
            - button
            - input_button
            - scene
            - person
            - script
            - binary_sensor
            - fan
            - climate
            - media_player
          multiple: false
    entity19_name:
      name: Button 19 name - LABEL (Optional)
      description: '*ButtonPage03*

        *Label which should be displayed (10 characters are supported)*

        '
      default: []
      selector:
        text:
          multiline: false
    entity19_icon:
      name: Button 19 - ICON (Optional)
      description: '*ButtonPage03*

        *Icon which should be displayed (Default - an icon matching the entity will
        be set automatically)*

        '
      default: []
      selector:
        icon: {}
    entity19_icon_color:
      name: Button 19 - ICON COLOR (Optional)
      description: '*ButtonPage03*

        *Icon color which should be displayed when button is on*

        '
      default:
      - 0
      - 128
      - 248
      selector:
        color_rgb: {}
    entity19_confirm:
      name: Confirm execution of the button press - TRUE/FALSE (Optional)
      default: false
      description: '*ButtonPage03*

        *Ask for confirmation to execute **Button19** action*

        '
      selector:
        boolean: {}
    entity20:
      name: Button 20 - ENTITY (Optional)
      description: '*ButtonPage03*

        *Entity which should be switched (ONLY light | switch | cover | input_boolean
        | automation | button | input_button | scene | person | script | binary_sensor
        | fan | climate | media_player)*

        '
      default: []
      selector:
        entity:
          filter:
          - domain:
            - light
            - switch
            - cover
            - input_boolean
            - automation
            - button
            - input_button
            - scene
            - person
            - script
            - binary_sensor
            - fan
            - climate
            - media_player
          multiple: false
    entity20_name:
      name: Button 20 name - LABEL (Optional)
      description: '*ButtonPage03*

        *Label which should be displayed (10 characters are supported)*

        '
      default: []
      selector:
        text:
          multiline: false
    entity20_icon:
      name: Button 20 - ICON (Optional)
      description: '*ButtonPage03*

        *Icon which should be displayed (Default - an icon matching the entity will
        be set automatically)*

        '
      default: []
      selector:
        icon: {}
    entity20_icon_color:
      name: Button 20 - ICON COLOR (Optional)
      description: '*ButtonPage03*

        *Icon color which should be displayed when button is on*

        '
      default:
      - 0
      - 128
      - 248
      selector:
        color_rgb: {}
    entity20_confirm:
      name: Confirm execution of the button press - TRUE/FALSE (Optional)
      default: false
      description: '*ButtonPage03*

        *Ask for confirmation to execute **Button20** action*

        '
      selector:
        boolean: {}
    entity21:
      name: Button 21 - ENTITY (Optional)
      description: '*ButtonPage03*

        *Entity which should be switched (ONLY light | switch | cover | input_boolean
        | automation | button | input_button | scene | person | script | binary_sensor
        | fan | climate | media_player)*

        '
      default: []
      selector:
        entity:
          filter:
          - domain:
            - light
            - switch
            - cover
            - input_boolean
            - automation
            - button
            - input_button
            - scene
            - person
            - script
            - binary_sensor
            - fan
            - climate
            - media_player
          multiple: false
    entity21_name:
      name: Button 21 name - LABEL (Optional)
      description: '*ButtonPage03*

        *Label which should be displayed (10 characters are supported)*

        '
      default: []
      selector:
        text:
          multiline: false
    entity21_icon:
      name: Button 21 - ICON (Optional)
      description: '*ButtonPage03*

        *Icon which should be displayed (Default - an icon matching the entity will
        be set automatically)*

        '
      default: []
      selector:
        icon: {}
    entity21_icon_color:
      name: Button 21 - ICON COLOR (Optional)
      description: '*ButtonPage03*

        *Icon color which should be displayed when button is on*

        '
      default:
      - 0
      - 128
      - 248
      selector:
        color_rgb: {}
    entity21_confirm:
      name: Confirm execution of the button press - TRUE/FALSE (Optional)
      default: false
      description: '*ButtonPage03*

        *Ask for confirmation to execute **Button21** action*

        '
      selector:
        boolean: {}
    entity22:
      name: Button 22 - ENTITY (Optional)
      description: '*ButtonPage03*

        *Entity which should be switched (ONLY light | switch | cover | input_boolean
        | automation | button | input_button | scene | person | script | binary_sensor
        | fan | climate | media_player)*

        '
      default: []
      selector:
        entity:
          filter:
          - domain:
            - light
            - switch
            - cover
            - input_boolean
            - automation
            - button
            - input_button
            - scene
            - person
            - script
            - binary_sensor
            - fan
            - climate
            - media_player
          multiple: false
    entity22_name:
      name: Button 22 name - LABEL (Optional)
      description: '*ButtonPage03*

        *Label which should be displayed (10 characters are supported)*

        '
      default: []
      selector:
        text:
          multiline: false
    entity22_icon:
      name: Button 22 - ICON (Optional)
      description: '*ButtonPage03*

        *Icon which should be displayed (Default - an icon matching the entity will
        be set automatically)*

        '
      default: []
      selector:
        icon: {}
    entity22_icon_color:
      name: Button 22 - ICON COLOR (Optional)
      description: '*ButtonPage03*

        *Icon color which should be displayed when button is on*

        '
      default:
      - 0
      - 128
      - 248
      selector:
        color_rgb: {}
    entity22_confirm:
      name: Confirm execution of the button press - TRUE/FALSE (Optional)
      default: false
      description: '*ButtonPage03*

        *Ask for confirmation to execute **Button22** action*

        '
      selector:
        boolean: {}
    entity23:
      name: Button 23 - ENTITY (Optional)
      description: '*ButtonPage03*

        *Entity which should be switched (ONLY light | switch | cover | input_boolean
        | automation | button | input_button | scene | person | script | binary_sensor
        | fan | climate | media_player)*

        '
      default: []
      selector:
        entity:
          filter:
          - domain:
            - light
            - switch
            - cover
            - input_boolean
            - automation
            - button
            - input_button
            - scene
            - person
            - script
            - binary_sensor
            - fan
            - climate
            - media_player
          multiple: false
    entity23_name:
      name: Button 23 name - LABEL (Optional)
      description: '*ButtonPage03*

        *Label which should be displayed (10 characters are supported)*

        '
      default: []
      selector:
        text:
          multiline: false
    entity23_icon:
      name: Button 23 - ICON (Optional)
      description: '*ButtonPage03*

        *Icon which should be displayed (Default - an icon matching the entity will
        be set automatically)*

        '
      default: []
      selector:
        icon: {}
    entity23_icon_color:
      name: Button 23 - ICON COLOR (Optional)
      description: '*ButtonPage03*

        *Icon color which should be displayed when button is on*

        '
      default:
      - 0
      - 128
      - 248
      selector:
        color_rgb: {}
    entity23_confirm:
      name: Confirm execution of the button press - TRUE/FALSE (Optional)
      default: false
      description: '*ButtonPage03*

        *Ask for confirmation to execute **Button23** action*

        '
      selector:
        boolean: {}
    entity24:
      name: Button 24 - ENTITY (Optional)
      description: '*ButtonPage03*

        *Entity which should be switched (ONLY light | switch | cover | input_boolean
        | automation | button | input_button | scene | person | script | binary_sensor
        | fan | climate | media_player)*

        '
      default: []
      selector:
        entity:
          filter:
          - domain:
            - light
            - switch
            - cover
            - input_boolean
            - automation
            - button
            - input_button
            - scene
            - person
            - script
            - binary_sensor
            - fan
            - climate
            - media_player
          multiple: false
    entity24_name:
      name: Button 24 name - LABEL (Optional)
      description: '*ButtonPage03*

        *Label which should be displayed (10 characters are supported)*

        '
      default: []
      selector:
        text:
          multiline: false
    entity24_icon:
      name: Button 24 - ICON (Optional)
      description: '*ButtonPage03*

        *Icon which should be displayed (Default - an icon matching the entity will
        be set automatically)*

        '
      default: []
      selector:
        icon: {}
    entity24_icon_color:
      name: Button 24 - ICON COLOR (Optional)
      description: '*ButtonPage03*

        *Icon color which should be displayed when button is on*

        '
      default:
      - 0
      - 128
      - 248
      selector:
        color_rgb: {}
    entity24_confirm:
      name: Confirm execution of the button press - TRUE/FALSE (Optional)
      default: false
      description: '*ButtonPage03*

        *Ask for confirmation to execute **Button24** action*

        '
      selector:
        boolean: {}
    placeholder10:
      name: ' '
      description: '# ✅ BUTTON PAGE 04 ✅'
      default: ' '
      selector:
        select:
          options:
          - ' '
          custom_value: false
          multiple: false
          sort: false
    button_page04_label:
      name: Button page 04 name - LABEL (Optional)
      description: '*ButtonPage04*

        *Label which should be displayed*

        '
      default: []
      selector:
        text:
          multiline: false
    entity25:
      name: Button 25 - ENTITY (Optional)
      description: '*ButtonPage04*

        *Entity which should be switched (ONLY light | switch | cover | input_boolean
        | automation | button | input_button | scene | person | script | binary_sensor
        | fan | climate | media_player)*

        '
      default: []
      selector:
        entity:
          filter:
          - domain:
            - light
            - switch
            - cover
            - input_boolean
            - automation
            - button
            - input_button
            - scene
            - person
            - script
            - binary_sensor
            - fan
            - climate
            - media_player
          multiple: false
    entity25_name:
      name: Button 25 name - LABEL (Optional)
      description: '*ButtonPage04*

        *Label which should be displayed (10 characters are supported)*

        '
      default: []
      selector:
        text:
          multiline: false
    entity25_icon:
      name: Button 25 - ICON (Optional)
      description: '*ButtonPage04*

        *Icon which should be displayed (Default - an icon matching the entity will
        be set automatically)*

        '
      default: []
      selector:
        icon: {}
    entity25_icon_color:
      name: Button 25 - ICON COLOR (Optional)
      description: '*ButtonPage04*

        *Icon color which should be displayed when button is on*

        '
      default:
      - 0
      - 128
      - 248
      selector:
        color_rgb: {}
    entity25_confirm:
      name: Confirm execution of the button press - TRUE/FALSE (Optional)
      default: false
      description: '*ButtonPage04*

        *Ask for confirmation to execute **Button25** action*

        '
      selector:
        boolean: {}
    entity26:
      name: Button 26 - ENTITY (Optional)
      description: '*ButtonPage04*

        *Entity which should be switched (ONLY light | switch | cover | input_boolean
        | automation | button | input_button | scene | person | script | binary_sensor
        | fan | climate | media_player)*

        '
      default: []
      selector:
        entity:
          filter:
          - domain:
            - light
            - switch
            - cover
            - input_boolean
            - automation
            - button
            - input_button
            - scene
            - person
            - script
            - binary_sensor
            - fan
            - climate
            - media_player
          multiple: false
    entity26_name:
      name: Button 26 name - LABEL (Optional)
      description: '*ButtonPage04*

        *Label which should be displayed (10 characters are supported)*

        '
      default: []
      selector:
        text:
          multiline: false
    entity26_icon:
      name: Button 26 - ICON (Optional)
      description: '*ButtonPage04*

        *Icon which should be displayed (Default - an icon matching the entity will
        be set automatically)*

        '
      default: []
      selector:
        icon: {}
    entity26_icon_color:
      name: Button 26 - ICON COLOR (Optional)
      description: '*ButtonPage04*

        *Icon color which should be displayed when button is on*

        '
      default:
      - 0
      - 128
      - 248
      selector:
        color_rgb: {}
    entity26_confirm:
      name: Confirm execution of the button press - TRUE/FALSE (Optional)
      default: false
      description: '*ButtonPage04*

        *Ask for confirmation to execute **Button26** action*

        '
      selector:
        boolean: {}
    entity27:
      name: Button 27 - ENTITY (Optional)
      description: '*ButtonPage04*

        *Entity which should be switched (ONLY light | switch | cover | input_boolean
        | automation | button | input_button | scene | person | script | binary_sensor
        | fan | climate | media_player)*

        '
      default: []
      selector:
        entity:
          filter:
          - domain:
            - light
            - switch
            - cover
            - input_boolean
            - automation
            - button
            - input_button
            - scene
            - person
            - script
            - binary_sensor
            - fan
            - climate
            - media_player
          multiple: false
    entity27_name:
      name: Button 27 name - LABEL (Optional)
      description: '*ButtonPage04*

        *Label which should be displayed (10 characters are supported)*

        '
      default: []
      selector:
        text:
          multiline: false
    entity27_icon:
      name: Button 27 - ICON (Optional)
      description: '*ButtonPage04*

        *Icon which should be displayed (Default - an icon matching the entity will
        be set automatically)*

        '
      default: []
      selector:
        icon: {}
    entity27_icon_color:
      name: Button 27 - ICON COLOR (Optional)
      description: '*ButtonPage04*

        *Icon color which should be displayed when button is on*

        '
      default:
      - 0
      - 128
      - 248
      selector:
        color_rgb: {}
    entity27_confirm:
      name: Confirm execution of the button press - TRUE/FALSE (Optional)
      default: false
      description: '*ButtonPage04*

        *Ask for confirmation to execute **Button27** action*

        '
      selector:
        boolean: {}
    entity28:
      name: Button 28 - ENTITY (Optional)
      description: '*ButtonPage04*

        *Entity which should be switched (ONLY light | switch | cover | input_boolean
        | automation | button | input_button | scene | person | script | binary_sensor
        | fan | climate | media_player)*

        '
      default: []
      selector:
        entity:
          filter:
          - domain:
            - light
            - switch
            - cover
            - input_boolean
            - automation
            - button
            - input_button
            - scene
            - person
            - script
            - binary_sensor
            - fan
            - climate
            - media_player
          multiple: false
    entity28_name:
      name: Button 28 name - LABEL (Optional)
      description: '*ButtonPage04*

        *Label which should be displayed (10 characters are supported)*

        '
      default: []
      selector:
        text:
          multiline: false
    entity28_icon:
      name: Button 28 - ICON (Optional)
      description: '*ButtonPage04*

        *Icon which should be displayed (Default - an icon matching the entity will
        be set automatically)*

        '
      default: []
      selector:
        icon: {}
    entity28_icon_color:
      name: Button 28 - ICON COLOR (Optional)
      description: '*ButtonPage04*

        *Icon color which should be displayed when button is on*

        '
      default:
      - 0
      - 128
      - 248
      selector:
        color_rgb: {}
    entity28_confirm:
      name: Confirm execution of the button press - TRUE/FALSE (Optional)
      default: false
      description: '*ButtonPage04*

        *Ask for confirmation to execute **Button28** action*

        '
      selector:
        boolean: {}
    entity29:
      name: Button 29 - ENTITY (Optional)
      description: '*ButtonPage04*

        *Entity which should be switched (ONLY light | switch | cover | input_boolean
        | automation | button | input_button | scene | person | script | binary_sensor
        | fan | climate | media_player)*

        '
      default: []
      selector:
        entity:
          filter:
          - domain:
            - light
            - switch
            - cover
            - input_boolean
            - automation
            - button
            - input_button
            - scene
            - person
            - script
            - binary_sensor
            - fan
            - climate
            - media_player
          multiple: false
    entity29_name:
      name: Button 29 name - LABEL (Optional)
      description: '*ButtonPage04*

        *Label which should be displayed (10 characters are supported)*

        '
      default: []
      selector:
        text:
          multiline: false
    entity29_icon:
      name: Button 29 - ICON (Optional)
      description: '*ButtonPage04*

        *Icon which should be displayed (Default - an icon matching the entity will
        be set automatically)*

        '
      default: []
      selector:
        icon: {}
    entity29_icon_color:
      name: Button 29 - ICON COLOR (Optional)
      description: '*ButtonPage04*

        *Icon color which should be displayed when button is on*

        '
      default:
      - 0
      - 128
      - 248
      selector:
        color_rgb: {}
    entity29_confirm:
      name: Confirm execution of the button press - TRUE/FALSE (Optional)
      default: false
      description: '*ButtonPage04*

        *Ask for confirmation to execute **Button29** action*

        '
      selector:
        boolean: {}
    entity30:
      name: Button 30 - ENTITY (Optional)
      description: '*ButtonPage04*

        *Entity which should be switched (ONLY light | switch | cover | input_boolean
        | automation | button | input_button | scene | person | script | binary_sensor
        | fan | climate | media_player)*

        '
      default: []
      selector:
        entity:
          filter:
          - domain:
            - light
            - switch
            - cover
            - input_boolean
            - automation
            - button
            - input_button
            - scene
            - person
            - script
            - binary_sensor
            - fan
            - climate
            - media_player
          multiple: false
    entity30_name:
      name: Button 30 name - LABEL (Optional)
      description: '*ButtonPage04*

        *Label which should be displayed (10 characters are supported)*

        '
      default: []
      selector:
        text:
          multiline: false
    entity30_icon:
      name: Button 30 - ICON (Optional)
      description: '*ButtonPage04*

        *Icon which should be displayed (Default - an icon matching the entity will
        be set automatically)*

        '
      default: []
      selector:
        icon: {}
    entity30_icon_color:
      name: Button 30 - ICON COLOR (Optional)
      description: '*ButtonPage04*

        *Icon color which should be displayed when button is on*

        '
      default:
      - 0
      - 128
      - 248
      selector:
        color_rgb: {}
    entity30_confirm:
      name: Confirm execution of the button press - TRUE/FALSE (Optional)
      default: false
      description: '*ButtonPage04*

        *Ask for confirmation to execute **Button30** action*

        '
      selector:
        boolean: {}
    entity31:
      name: Button 31 - ENTITY (Optional)
      description: '*ButtonPage04*

        *Entity which should be switched (ONLY light | switch | cover | input_boolean
        | automation | button | input_button | scene | person | script | binary_sensor
        | fan | climate | media_player)*

        '
      default: []
      selector:
        entity:
          filter:
          - domain:
            - light
            - switch
            - cover
            - input_boolean
            - automation
            - button
            - input_button
            - scene
            - person
            - script
            - binary_sensor
            - fan
            - climate
            - media_player
          multiple: false
    entity31_name:
      name: Button 31 name - LABEL (Optional)
      description: '*ButtonPage04*

        *Label which should be displayed (10 characters are supported)*

        '
      default: []
      selector:
        text:
          multiline: false
    entity31_icon:
      name: Button 31 - ICON (Optional)
      description: '*ButtonPage04*

        *Icon which should be displayed (Default - an icon matching the entity will
        be set automatically)*

        '
      default: []
      selector:
        icon: {}
    entity31_icon_color:
      name: Button 31 - ICON COLOR (Optional)
      description: '*ButtonPage04*

        *Icon color which should be displayed when button is on*

        '
      default:
      - 0
      - 128
      - 248
      selector:
        color_rgb: {}
    entity31_confirm:
      name: Confirm execution of the button press - TRUE/FALSE (Optional)
      default: false
      description: '*ButtonPage04*

        *Ask for confirmation to execute **Button31** action*

        '
      selector:
        boolean: {}
    entity32:
      name: Button 32 - ENTITY (Optional)
      description: '*ButtonPage04*

        *Entity which should be switched (ONLY light | switch | cover | input_boolean
        | automation | button | input_button | scene | person | script | binary_sensor
        | fan | climate | media_player)*

        '
      default: []
      selector:
        entity:
          filter:
          - domain:
            - light
            - switch
            - cover
            - input_boolean
            - automation
            - button
            - input_button
            - scene
            - person
            - script
            - binary_sensor
            - fan
            - climate
            - media_player
          multiple: false
    entity32_name:
      name: Button 32 name - LABEL (Optional)
      description: '*ButtonPage04*

        *Label which should be displayed (10 characters are supported)*

        '
      default: []
      selector:
        text:
          multiline: false
    entity32_icon:
      name: Button 32 - ICON (Optional)
      description: '*ButtonPage04*

        *Icon which should be displayed (Default - an icon matching the entity will
        be set automatically)*

        '
      default: []
      selector:
        icon: {}
    entity32_icon_color:
      name: Button 32 - ICON COLOR (Optional)
      description: '*ButtonPage04*

        *Icon color which should be displayed when button is on*

        '
      default:
      - 0
      - 128
      - 248
      selector:
        color_rgb: {}
    entity32_confirm:
      name: Confirm execution of the button press - TRUE/FALSE (Optional)
      default: false
      description: '*ButtonPage04*

        *Ask for confirmation to execute **Button32** action*

        '
      selector:
        boolean: {}
    placeholder11:
      name: ' '
      description: '# ✅ ENTITY PAGE SETTINGS ✅'
      default: ' '
      selector:
        select:
          options:
          - ' '
          custom_value: false
          multiple: false
          sort: false
    entitypages_enabled:
      name: Activate entity page - TRUE/FALSE (Optional)
      default: false
      description: '*SYSTEM settings*

        *Activate entity page and entity page Button on the home page*

        '
      selector:
        boolean: {}
    home_button06_icon:
      name: Entity page - ICON (Optional)
      description: '*HOME page*

        *Icon which should be displayed (Default mdi:format-list-bulleted-square)*

        '
      default: mdi:format-list-bulleted-square
      selector:
        icon: {}
    home_button06_icon_color:
      name: Entity page - ICON COLOR (Optional)
      description: '*HOME page*

        *Icon color which should be displayed (default color is set)*

        '
      default:
      - 200
      - 204
      - 200
      selector:
        color_rgb: {}
    entitypages_value_alignment:
      name: Value column alignment
      description: '*Entity pages* *Select the alignment for the column containing
        the values on the entity pages.*

        '
      default: '0'
      selector:
        select:
          multiple: false
          options:
          - label: Right (default)
            value: '0'
          - label: Center
            value: '1'
          - label: Left
            value: '2'
          custom_value: false
          sort: false
    placeholder12:
      name: ' '
      description: '# ✅ ENTITY PAGE 01 ✅'
      default: ' '
      selector:
        select:
          options:
          - ' '
          custom_value: false
          multiple: false
          sort: false
    entity_page01_label:
      name: Entity page 01 name - LABEL (Optional)
      description: '*EntityPage01*

        *Label which should be displayed*

        '
      default: []
      selector:
        text:
          multiline: false
    entities_entity01:
      name: Entity 01 - ENTITY (Optional)
      description: '*EntityPage01*

        *Entity which should be displayed*

        '
      default: []
      selector:
        entity: {}
    entities_entity01_name:
      name: Entity 01 name - LABEL (Optional)
      description: '*EntityPage01*

        *Label which should be displayed (replaces the **"friendly_name"** of the
        entity)*

        '
      default: []
      selector:
        text:
          multiline: false
    entities_entity01_icon:
      name: Entity 01 - ICON (Optional)
      description: '*EntityPage01*

        *Icon which should be displayed (if not set, it would be used an icon from
        attributes, if available, or no icon is shown)*

        '
      default: []
      selector:
        icon: {}
    entities_entity02:
      name: Entity 02 - ENTITY (Optional)
      description: '*EntityPage01*

        *Entity which should be displayed*

        '
      default: []
      selector:
        entity: {}
    entities_entity02_name:
      name: Entity 02 name - LABEL (Optional)
      description: '*EntityPage01*

        *Label which should be displayed (replaces the **"friendly_name"** of the
        entity)*

        '
      default: []
      selector:
        text:
          multiline: false
    entities_entity02_icon:
      name: Entity 02 - ICON (Optional)
      description: '*EntityPage01*

        *Icon which should be displayed (if not set, it would be used an icon from
        attributes, if available, or no icon is shown)*

        '
      default: []
      selector:
        icon: {}
    entities_entity03:
      name: Entity 03 - ENTITY (Optional)
      description: '*EntityPage01*

        *Entity which should be displayed*

        '
      default: []
      selector:
        entity: {}
    entities_entity03_name:
      name: Entity 03 name - LABEL (Optional)
      description: '*EntityPage01*

        *Label which should be displayed (replaces the **"friendly_name"** of the
        entity)*

        '
      default: []
      selector:
        text:
          multiline: false
    entities_entity03_icon:
      name: Entity 03 - ICON (Optional)
      description: '*EntityPage01*

        *Icon which should be displayed (if not set, it would be used an icon from
        attributes, if available, or no icon is shown)*

        '
      default: []
      selector:
        icon: {}
    entities_entity04:
      name: Entity 04 - ENTITY (Optional)
      description: '*EntityPage01*

        *Entity which should be displayed*

        '
      default: []
      selector:
        entity: {}
    entities_entity04_name:
      name: Entity 04 name - LABEL (Optional)
      description: '*EntityPage01*

        *Label which should be displayed (replaces the **"friendly_name"** of the
        entity)*

        '
      default: []
      selector:
        text:
          multiline: false
    entities_entity04_icon:
      name: Entity 04 - ICON (Optional)
      description: '*EntityPage01*

        *Icon which should be displayed (if not set, it would be used an icon from
        attributes, if available, or no icon is shown)*

        '
      default: []
      selector:
        icon: {}
    entities_entity05:
      name: Entity 05 - ENTITY (Optional)
      description: '*EntityPage01*

        *Entity which should be displayed*

        '
      default: []
      selector:
        entity: {}
    entities_entity05_name:
      name: Entity 05 name - LABEL (Optional)
      description: '*EntityPage01*

        *Label which should be displayed (replaces the **"friendly_name"** of the
        entity)*

        '
      default: []
      selector:
        text:
          multiline: false
    entities_entity05_icon:
      name: Entity 05 - ICON (Optional)
      description: '*EntityPage01*

        *Icon which should be displayed (if not set, it would be used an icon from
        attributes, if available, or no icon is shown)*

        '
      default: []
      selector:
        icon: {}
    entities_entity06:
      name: Entity 06 - ENTITY (Optional)
      description: '*EntityPage01*

        *Entity which should be displayed*

        '
      default: []
      selector:
        entity: {}
    entities_entity06_name:
      name: Entity 06 name - LABEL (Optional)
      description: '*EntityPage01*

        *Label which should be displayed (replaces the **"friendly_name"** of the
        entity)*

        '
      default: []
      selector:
        text:
          multiline: false
    entities_entity06_icon:
      name: Entity 06 - ICON (Optional)
      description: '*EntityPage01*

        *Icon which should be displayed (if not set, it would be used an icon from
        attributes, if available, or no icon is shown)*

        '
      default: []
      selector:
        icon: {}
    entities_entity07:
      name: Entity 07 - ENTITY (Optional)
      description: '*EntityPage01*

        *Entity which should be displayed*

        '
      default: []
      selector:
        entity: {}
    entities_entity07_name:
      name: Entity 07 name - LABEL (Optional)
      description: '*EntityPage01*

        *Label which should be displayed (replaces the **"friendly_name"** of the
        entity)*

        '
      default: []
      selector:
        text:
          multiline: false
    entities_entity07_icon:
      name: Entity 07 - ICON (Optional)
      description: '*EntityPage01*

        *Icon which should be displayed (if not set, it would be used an icon from
        attributes, if available, or no icon is shown)*

        '
      default: []
      selector:
        icon: {}
    entities_entity08:
      name: Entity 08 - ENTITY (Optional)
      description: '*EntityPage01*

        *Entity which should be displayed*

        '
      default: []
      selector:
        entity: {}
    entities_entity08_name:
      name: Entity 08 name - LABEL (Optional)
      description: '*EntityPage01*

        *Label which should be displayed (replaces the **"friendly_name"** of the
        entity)*

        '
      default: []
      selector:
        text:
          multiline: false
    entities_entity08_icon:
      name: Entity 08 - ICON (Optional)
      description: '*EntityPage01*

        *Icon which should be displayed (if not set, it would be used an icon from
        attributes, if available, or no icon is shown)*

        '
      default: []
      selector:
        icon: {}
    placeholder13:
      name: ' '
      description: '# ✅ ENTITY PAGE 02 ✅'
      default: ' '
      selector:
        select:
          options:
          - ' '
          custom_value: false
          multiple: false
          sort: false
    entity_page02_label:
      name: Entity page 02 name - LABEL (Optional)
      description: '*EntityPage02*

        *Label which should be displayed*

        '
      default: []
      selector:
        text:
          multiline: false
    entities_entity09:
      name: Entity 09 - ENTITY (Optional)
      description: '*EntityPage02*

        *Entity which should be displayed*

        '
      default: []
      selector:
        entity: {}
    entities_entity09_name:
      name: Entity 09 name - LABEL (Optional)
      description: '*EntityPage02*

        *Label which should be displayed (replaces the **"friendly_name"** of the
        entity)*

        '
      default: []
      selector:
        text:
          multiline: false
    entities_entity09_icon:
      name: Entity 09 - ICON (Optional)
      description: '*EntityPage02*

        *Icon which should be displayed (if not set, it would be used an icon from
        attributes, if available, or no icon is shown)*

        '
      default: []
      selector:
        icon: {}
    entities_entity10:
      name: Entity 10 - ENTITY (Optional)
      description: '*EntityPage02*

        *Entity which should be displayed*

        '
      default: []
      selector:
        entity: {}
    entities_entity10_name:
      name: Entity 10 name - LABEL (Optional)
      description: '*EntityPage02*

        *Label which should be displayed (replaces the **"friendly_name"** of the
        entity)*

        '
      default: []
      selector:
        text:
          multiline: false
    entities_entity10_icon:
      name: Entity 10 - ICON (Optional)
      description: '*EntityPage02*

        *Icon which should be displayed (if not set, it would be used an icon from
        attributes, if available, or no icon is shown)*

        '
      default: []
      selector:
        icon: {}
    entities_entity11:
      name: Entity 11 - ENTITY (Optional)
      description: '*EntityPage02*

        *Entity which should be displayed*

        '
      default: []
      selector:
        entity: {}
    entities_entity11_name:
      name: Entity 11 name - LABEL (Optional)
      description: '*EntityPage02*

        *Label which should be displayed (replaces the **"friendly_name"** of the
        entity)*

        '
      default: []
      selector:
        text:
          multiline: false
    entities_entity11_icon:
      name: Entity 11 - ICON (Optional)
      description: '*EntityPage02*

        *Icon which should be displayed (if not set, it would be used an icon from
        attributes, if available, or no icon is shown)*

        '
      default: []
      selector:
        icon: {}
    entities_entity12:
      name: Entity 12 - ENTITY (Optional)
      description: '*EntityPage02*

        *Entity which should be displayed*

        '
      default: []
      selector:
        entity: {}
    entities_entity12_name:
      name: Entity 12 name - LABEL (Optional)
      description: '*EntityPage02*

        *Label which should be displayed (replaces the **"friendly_name"** of the
        entity)*

        '
      default: []
      selector:
        text:
          multiline: false
    entities_entity12_icon:
      name: Entity 12 - ICON (Optional)
      description: '*EntityPage02*

        *Icon which should be displayed (if not set, it would be used an icon from
        attributes, if available, or no icon is shown)*

        '
      default: []
      selector:
        icon: {}
    entities_entity13:
      name: Entity 13 - ENTITY (Optional)
      description: '*EntityPage02*

        *Entity which should be displayed*

        '
      default: []
      selector:
        entity: {}
    entities_entity13_name:
      name: Entity 13 name - LABEL (Optional)
      description: '*EntityPage02*

        *Label which should be displayed (replaces the **"friendly_name"** of the
        entity)*

        '
      default: []
      selector:
        text:
          multiline: false
    entities_entity13_icon:
      name: Entity 13 - ICON (Optional)
      description: '*EntityPage02*

        *Icon which should be displayed (if not set, it would be used an icon from
        attributes, if available, or no icon is shown)*

        '
      default: []
      selector:
        icon: {}
    entities_entity14:
      name: Entity 14 - ENTITY (Optional)
      description: '*EntityPage02*

        *Entity which should be displayed*

        '
      default: []
      selector:
        entity: {}
    entities_entity14_name:
      name: Entity 14 name - LABEL (Optional)
      description: '*EntityPage02*

        *Label which should be displayed (replaces the **"friendly_name"** of the
        entity)*

        '
      default: []
      selector:
        text:
          multiline: false
    entities_entity14_icon:
      name: Entity 14 - ICON (Optional)
      description: '*EntityPage02*

        *Icon which should be displayed (if not set, it would be used an icon from
        attributes, if available, or no icon is shown)*

        '
      default: []
      selector:
        icon: {}
    entities_entity15:
      name: Entity 15 - ENTITY (Optional)
      description: '*EntityPage02*

        *Entity which should be displayed*

        '
      default: []
      selector:
        entity: {}
    entities_entity15_name:
      name: Entity 15 name - LABEL (Optional)
      description: '*EntityPage02*

        *Label which should be displayed (replaces the **"friendly_name"** of the
        entity)*

        '
      default: []
      selector:
        text:
          multiline: false
    entities_entity15_icon:
      name: Entity 15 - ICON (Optional)
      description: '*EntityPage02*

        *Icon which should be displayed (if not set, it would be used an icon from
        attributes, if available, or no icon is shown)*

        '
      default: []
      selector:
        icon: {}
    entities_entity16:
      name: Entity 16 - ENTITY (Optional)
      description: '*EntityPage02*

        *Entity which should be displayed*

        '
      default: []
      selector:
        entity: {}
    entities_entity16_name:
      name: Entity 16 name - LABEL (Optional)
      description: '*EntityPage02*

        *Label which should be displayed (replaces the **"friendly_name"** of the
        entity)*

        '
      default: []
      selector:
        text:
          multiline: false
    entities_entity16_icon:
      name: Entity 16 - ICON (Optional)
      description: '*EntityPage02*

        *Icon which should be displayed (if not set, it would be used an icon from
        attributes, if available, or no icon is shown)*

        '
      default: []
      selector:
        icon: {}
    placeholder14:
      name: ' '
      description: '# ✅ ENTITY PAGE 03 ✅'
      default: ' '
      selector:
        select:
          options:
          - ' '
          custom_value: false
          multiple: false
          sort: false
    entity_page03_label:
      name: Entity page 03 name - LABEL (Optional)
      description: '*EntityPage03*

        *Label which should be displayed*

        '
      default: []
      selector:
        text:
          multiline: false
    entities_entity17:
      name: Entity 17 - ENTITY (Optional)
      description: '*EntityPage03*

        *Entity which should be displayed*

        '
      default: []
      selector:
        entity: {}
    entities_entity17_name:
      name: Entity 17 name - LABEL (Optional)
      description: '*EntityPage03*

        *Label which should be displayed (replaces the **"friendly_name"** of the
        entity)*

        '
      default: []
      selector:
        text:
          multiline: false
    entities_entity17_icon:
      name: Entity 17 - ICON (Optional)
      description: '*EntityPage03*

        *Icon which should be displayed (if not set, it would be used an icon from
        attributes, if available, or no icon is shown)*

        '
      default: []
      selector:
        icon: {}
    entities_entity18:
      name: Entity 18 - ENTITY (Optional)
      description: '*EntityPage03*

        *Entity which should be displayed*

        '
      default: []
      selector:
        entity: {}
    entities_entity18_name:
      name: Entity 18 name - LABEL (Optional)
      description: '*EntityPage03*

        *Label which should be displayed (replaces the **"friendly_name"** of the
        entity)*

        '
      default: []
      selector:
        text:
          multiline: false
    entities_entity18_icon:
      name: Entity 18 - ICON (Optional)
      description: '*EntityPage03*

        *Icon which should be displayed (if not set, it would be used an icon from
        attributes, if available, or no icon is shown)*

        '
      default: []
      selector:
        icon: {}
    entities_entity19:
      name: Entity 19 - ENTITY (Optional)
      description: '*EntityPage03*

        *Entity which should be displayed*

        '
      default: []
      selector:
        entity: {}
    entities_entity19_name:
      name: Entity 19 name - LABEL (Optional)
      description: '*EntityPage03*

        *Label which should be displayed (replaces the **"friendly_name"** of the
        entity)*

        '
      default: []
      selector:
        text:
          multiline: false
    entities_entity19_icon:
      name: Entity 19 - ICON (Optional)
      description: '*EntityPage03*

        *Icon which should be displayed (if not set, it would be used an icon from
        attributes, if available, or no icon is shown)*

        '
      default: []
      selector:
        icon: {}
    entities_entity20:
      name: Entity 20 - ENTITY (Optional)
      description: '*EntityPage03*

        *Entity which should be displayed*

        '
      default: []
      selector:
        entity: {}
    entities_entity20_name:
      name: Entity 20 name - LABEL (Optional)
      description: '*EntityPage03*

        *Label which should be displayed (replaces the **"friendly_name"** of the
        entity)*

        '
      default: []
      selector:
        text:
          multiline: false
    entities_entity20_icon:
      name: Entity 20 - ICON (Optional)
      description: '*EntityPage03*

        *Icon which should be displayed (if not set, it would be used an icon from
        attributes, if available, or no icon is shown)*

        '
      default: []
      selector:
        icon: {}
    entities_entity21:
      name: Entity 21 - ENTITY (Optional)
      description: '*EntityPage03*

        *Entity which should be displayed*

        '
      default: []
      selector:
        entity: {}
    entities_entity21_name:
      name: Entity 21 name - LABEL (Optional)
      description: '*EntityPage03*

        *Label which should be displayed (replaces the **"friendly_name"** of the
        entity)*

        '
      default: []
      selector:
        text:
          multiline: false
    entities_entity21_icon:
      name: Entity 21 - ICON (Optional)
      description: '*EntityPage03*

        *Icon which should be displayed (if not set, it would be used an icon from
        attributes, if available, or no icon is shown)*

        '
      default: []
      selector:
        icon: {}
    entities_entity22:
      name: Entity 22 - ENTITY (Optional)
      description: '*EntityPage03*

        *Entity which should be displayed*

        '
      default: []
      selector:
        entity: {}
    entities_entity22_name:
      name: Entity 22 name - LABEL (Optional)
      description: '*EntityPage03*

        *Label which should be displayed (replaces the **"friendly_name"** of the
        entity)*

        '
      default: []
      selector:
        text:
          multiline: false
    entities_entity22_icon:
      name: Entity 22 - ICON (Optional)
      description: '*EntityPage03*

        *Icon which should be displayed (if not set, it would be used an icon from
        attributes, if available, or no icon is shown)*

        '
      default: []
      selector:
        icon: {}
    entities_entity23:
      name: Entity 23 - ENTITY (Optional)
      description: '*EntityPage03*

        *Entity which should be displayed*

        '
      default: []
      selector:
        entity: {}
    entities_entity23_name:
      name: Entity 23 name - LABEL (Optional)
      description: '*EntityPage03*

        *Label which should be displayed (replaces the **"friendly_name"** of the
        entity)*

        '
      default: []
      selector:
        text:
          multiline: false
    entities_entity23_icon:
      name: Entity 23 - ICON (Optional)
      description: '*EntityPage03*

        *Icon which should be displayed (if not set, it would be used an icon from
        attributes, if available, or no icon is shown)*

        '
      default: []
      selector:
        icon: {}
    entities_entity24:
      name: Entity 24 - ENTITY (Optional)
      description: '*EntityPage03*

        *Entity which should be displayed*

        '
      default: []
      selector:
        entity: {}
    entities_entity24_name:
      name: Entity 24 name - LABEL (Optional)
      description: '*EntityPage03*

        *Label which should be displayed (replaces the **"friendly_name"** of the
        entity)*

        '
      default: []
      selector:
        text:
          multiline: false
    entities_entity24_icon:
      name: Entity 24 - ICON (Optional)
      description: '*EntityPage03*

        *Icon which should be displayed (if not set, it would be used an icon from
        attributes, if available, or no icon is shown)*

        '
      default: []
      selector:
        icon: {}
    placeholder15:
      name: ' '
      description: '# ✅ ENTITY PAGE 04 ✅'
      default: ' '
      selector:
        select:
          options:
          - ' '
          custom_value: false
          multiple: false
          sort: false
    entity_page04_label:
      name: Entity page 04 name - LABEL (Optional)
      description: '*EntityPage04*

        *Label which should be displayed*

        '
      default: []
      selector:
        text:
          multiline: false
    entities_entity25:
      name: Entity 25 - ENTITY (Optional)
      description: '*EntityPage04*

        *Entity which should be displayed*

        '
      default: []
      selector:
        entity: {}
    entities_entity25_name:
      name: Entity 25 name - LABEL (Optional)
      description: '*EntityPage04*

        *Label which should be displayed (replaces the **"friendly_name"** of the
        entity)*

        '
      default: []
      selector:
        text:
          multiline: false
    entities_entity25_icon:
      name: Entity 25 - ICON (Optional)
      description: '*EntityPage04*

        *Icon which should be displayed (if not set, it would be used an icon from
        attributes, if available, or no icon is shown)*

        '
      default: []
      selector:
        icon: {}
    entities_entity26:
      name: Entity 26 - ENTITY (Optional)
      description: '*EntityPage04*

        *Entity which should be displayed*

        '
      default: []
      selector:
        entity: {}
    entities_entity26_name:
      name: Entity 26 name - LABEL (Optional)
      description: '*EntityPage04*

        *Label which should be displayed (replaces the **"friendly_name"** of the
        entity)*

        '
      default: []
      selector:
        text:
          multiline: false
    entities_entity26_icon:
      name: Entity 26 - ICON (Optional)
      description: '*EntityPage04*

        *Icon which should be displayed (if not set, it would be used an icon from
        attributes, if available, or no icon is shown)*

        '
      default: []
      selector:
        icon: {}
    entities_entity27:
      name: Entity 27 - ENTITY (Optional)
      description: '*EntityPage04*

        *Entity which should be displayed*

        '
      default: []
      selector:
        entity: {}
    entities_entity27_name:
      name: Entity 27 name - LABEL (Optional)
      description: '*EntityPage04*

        *Label which should be displayed (replaces the **"friendly_name"** of the
        entity)*

        '
      default: []
      selector:
        text:
          multiline: false
    entities_entity27_icon:
      name: Entity 27 - ICON (Optional)
      description: '*EntityPage04*

        *Icon which should be displayed (if not set, it would be used an icon from
        attributes, if available, or no icon is shown)*

        '
      default: []
      selector:
        icon: {}
    entities_entity28:
      name: Entity 28 - ENTITY (Optional)
      description: '*EntityPage04*

        *Entity which should be displayed*

        '
      default: []
      selector:
        entity: {}
    entities_entity28_name:
      name: Entity 28 name - LABEL (Optional)
      description: '*EntityPage04*

        *Label which should be displayed (replaces the **"friendly_name"** of the
        entity)*

        '
      default: []
      selector:
        text:
          multiline: false
    entities_entity28_icon:
      name: Entity 28 - ICON (Optional)
      description: '*EntityPage04*

        *Icon which should be displayed (if not set, it would be used an icon from
        attributes, if available, or no icon is shown)*

        '
      default: []
      selector:
        icon: {}
    entities_entity29:
      name: Entity 29 - ENTITY (Optional)
      description: '*EntityPage04*

        *Entity which should be displayed*

        '
      default: []
      selector:
        entity: {}
    entities_entity29_name:
      name: Entity 29 name - LABEL (Optional)
      description: '*EntityPage04*

        *Label which should be displayed (replaces the **"friendly_name"** of the
        entity)*

        '
      default: []
      selector:
        text:
          multiline: false
    entities_entity29_icon:
      name: Entity 29 - ICON (Optional)
      description: '*EntityPage04*

        *Icon which should be displayed (if not set, it would be used an icon from
        attributes, if available, or no icon is shown)*

        '
      default: []
      selector:
        icon: {}
    entities_entity30:
      name: Entity 30 - ENTITY (Optional)
      description: '*EntityPage04*

        *Entity which should be displayed*

        '
      default: []
      selector:
        entity: {}
    entities_entity30_name:
      name: Entity 30 name - LABEL (Optional)
      description: '*EntityPage04*

        *Label which should be displayed (replaces the **"friendly_name"** of the
        entity)*

        '
      default: []
      selector:
        text:
          multiline: false
    entities_entity30_icon:
      name: Entity 30 - ICON (Optional)
      description: '*EntityPage04*

        *Icon which should be displayed (if not set, it would be used an icon from
        attributes, if available, or no icon is shown)*

        '
      default: []
      selector:
        icon: {}
    entities_entity31:
      name: Entity 31 - ENTITY (Optional)
      description: '*EntityPage04*

        *Entity which should be displayed*

        '
      default: []
      selector:
        entity: {}
    entities_entity31_name:
      name: Entity 31 name - LABEL (Optional)
      description: '*EntityPage04*

        *Label which should be displayed (replaces the **"friendly_name"** of the
        entity)*

        '
      default: []
      selector:
        text:
          multiline: false
    entities_entity31_icon:
      name: Entity 31 - ICON (Optional)
      description: '*EntityPage04*

        *Icon which should be displayed (if not set, it would be used an icon from
        attributes, if available, or no icon is shown)*

        '
      default: []
      selector:
        icon: {}
    entities_entity32:
      name: Entity 32 - ENTITY (Optional)
      description: '*EntityPage04*

        *Entity which should be displayed*

        '
      default: []
      selector:
        entity: {}
    entities_entity32_name:
      name: Entity 32 name - LABEL (Optional)
      description: '*EntityPage04*

        *Label which should be displayed (replaces the **"friendly_name"** of the
        entity)*

        '
      default: []
      selector:
        text:
          multiline: false
    entities_entity32_icon:
      name: Entity 32 - ICON (Optional)
      description: '*EntityPage04*

        *Icon which should be displayed (if not set, it would be used an icon from
        attributes, if available, or no icon is shown)*

        '
      default: []
      selector:
        icon: {}
    placeholder16:
      name: ' '
      description: '# ✅ CUSTOM CONFIGURATION ✅'
      default: ' '
      selector:
        select:
          options:
          - ' '
          custom_value: false
          multiple: false
          sort: false
    home_button04_icon:
      name: Notification - ICON (Optional)
      description: '*HOME page*

        *Icon which should be displayed (Default mdi:email)*

        '
      default: mdi:email
      selector:
        icon: {}
    home_button04_icon_color01:
      name: Notification read - ICON COLOR (Optional)
      description: '*HOME page*

        *Icon color which should be displayed (default color is set)*

        '
      default:
      - 200
      - 204
      - 200
      selector:
        color_rgb: {}
    home_button04_icon_color02:
      name: Notification unread - ICON COLOR (Optional)
      description: '*HOME page*

        *Icon color which should be displayed (default color is set)*

        '
      default:
      - 248
      - 0
      - 0
      selector:
        color_rgb: {}
    relay01_icon:
      name: Relay 01 - ICON (Optional)
      description: '*HOME page*

        *Icon which should be displayed (Default mdi:numeric-1-box-outline)*

        '
      default: mdi:numeric-1-box-outline
      selector:
        icon: {}
    relay01_icon_color:
      name: Relay 01 - ICON COLOR (Optional)
      description: '*HOME page*

        *Icon color which should be displayed (default color is set)*

        '
      default:
      - 128
      - 128
      - 128
      selector:
        color_rgb: {}
    relay02_icon:
      name: Relay 02 - ICON (Optional)
      description: '*HOME page*

        *Icon which should be displayed (Default mdi:numeric-2-box-outline)*

        '
      default: mdi:numeric-2-box-outline
      selector:
        icon: {}
    relay02_icon_color:
      name: Relay 02 - ICON COLOR (Optional)
      description: '*HOME page*

        *Icon color which should be displayed (default color is set)*

        '
      default:
      - 128
      - 128
      - 128
      selector:
        color_rgb: {}
    time_label_color:
      name: Time - LABEL COLOR (Optional)
      description: '*HOME page*

        *Label color which should be displayed (default color is set)*

        '
      default:
      - 255
      - 255
      - 255
      selector:
        color_rgb: {}
    date_label_color:
      name: Date - LABEL COLOR (Optional)
      description: '*HOME page*

        *Label color which should be displayed (default color is set)*

        '
      default:
      - 255
      - 255
      - 255
      selector:
        color_rgb: {}
    placeholder19:
      name: ' '
      description: '# ✅ ADVANCED SETTINGS ✅'
      default: ' '
      selector:
        select:
          options:
          - ' '
          custom_value: false
          multiple: false
          sort: false
    tft_path:
      name: Nextion TFT File Folder (Optional)
      description: '*SYSTEM settings*

        *TFT Path where the Nextion TFT File is stored.

        Attention! The **"Folder-Watcher"** must also be configured in the configuration.yaml.

        **Only necessary for manual upload of TFT file in ESPHome Advaced mode.**

        See HowTo*

        '
      default: []
      selector:
        text:
          multiline: false
    show_while_loading:
      name: Show pages while loading?
      description: '*SYSTEM settings*

        *When this is enable, the pages will be shown earlier, but some information
        might not be visible from the begining and will be shown when available.*
        *When disabled (default), the pages will be shown when all the data is loaded
        and ready to be displayed.*

        **This may be useful when your pages takes too long to load and can help you
        identifying the elements slowing down the page construction.**

        '
      default: false
      selector:
        boolean: {}
    media_player_update_interval:
      name: Media player - Update interval
      description: Interval (msec) to call for an update from the media player entity.
        Lower values will improve the responsiveness, but could spam your Home Assistant
        with constant requests, while higher values will reduce the load on HA but
        the Media Player page can be laggy.
      default: 5000
      selector:
        number:
          min: 500.0
          max: 60000.0
          unit_of_measurement: milliseconds
          mode: slider
          step: 1.0
    media_player_update_delay:
      name: Media player - Delay (msec) after entity updade call?
      default: 500
      selector:
        number:
          min: 0.0
          max: 5000.0
          unit_of_measurement: milliseconds
          mode: slider
          step: 1.0
mode: parallel
max: 50
trace:
  stored_traces: 10
trigger_variables:
  nspanel_deviceid: !input nspanel_name
  nspanel_entities: '{{ device_entities(nspanel_deviceid) }}'
  nspanel_name: '{% if nspanel_entities | count > 0 %}{{ (nspanel_entities | selectattr(None,
    "search", "_nextion_display") | list | first).split(".")[1].split("_nextion_display")[0]
    }} {% elif nspanel_deviceid is string %}{{ nspanel_deviceid | replace("-","_")
    | replace(" ","_") | replace("___","_") | replace("__","_") }} {% endif %}

    '
  left_button: binary_sensor.{{ nspanel_name }}_left_button
  right_button: binary_sensor.{{ nspanel_name }}_right_button
  nextion_inited: binary_sensor.{{ nspanel_name }}_nextion_display
  currentpage: sensor.{{ nspanel_name }}_current_page
  relay01_entity: switch.{{ nspanel_name }}_relay_1
  relay02_entity: switch.{{ nspanel_name }}_relay_2
  nspaneltemp: sensor.{{ nspanel_name }}_temperature
  switch_sleep_mode: switch.{{ nspanel_name }}_sleep_mode
  thermostat_embedded: climate.{{ nspanel_name }}_thermostat
  notification_unread: switch.{{ nspanel_name }}_notification_unread
  notification_text: sensor.{{ nspanel_name }}_notification_text
  notification_label: sensor.{{ nspanel_name }}_notification_label
variables:
  blueprint_version: 4.0.2
  date_format_temp: !input date_format
  date_format: "{{\n  date_format_temp\n  if date_format_temp not in [\"%d.%m\", \"%d/%m\",
    \"%-d/%-m\", \"%-m/%-d\"]\n  else \"%A, \" ~ date_format_temp\n}}\n"
  sun_is_up: '{{ is_state("sun.sun", "above_horizon") }}'
  notification_sound: switch.{{ nspanel_name }}_notification_sound
  all_icons:
    blank: "\uFFFF"
    unknown: 
    unavailable: 
    ab-testing: 
    abacus: 
    abjad-arabic: 
    abjad-hebrew: 
    abugida-devanagari: 
    abugida-thai: 
    access-point: 
    access-point-check: 
    access-point-minus: 
    access-point-network: 
    access-point-network-off: 
    access-point-off: 
    access-point-plus: 
    access-point-remove: 
    account: 
    account-alert: 
    account-alert-outline: 
    account-arrow-down: 
    account-arrow-down-outline: 
    account-arrow-left: 
    account-arrow-left-outline: 
    account-arrow-right: 
    account-arrow-right-outline: 
    account-arrow-up: 
    account-arrow-up-outline: 
    account-box: 
    account-box-multiple: 
    account-box-multiple-outline: 
    account-box-outline: 
    account-cancel: 
    account-cancel-outline: 
    account-cash: 
    account-cash-outline: 
    account-check: 
    account-check-outline: 
    account-child: 
    account-child-circle: 
    account-child-outline: 
    account-circle: 
    account-circle-outline: 
    account-clock: 
    account-clock-outline: 
    account-cog: 
    account-cog-outline: 
    account-convert: 
    account-convert-outline: 
    account-cowboy-hat: 
    account-cowboy-hat-outline: 
    account-details: 
    account-details-outline: 
    account-edit: 
    account-edit-outline: 
    account-eye: 
    account-eye-outline: 
    account-filter: 
    account-filter-outline: 
    account-group: 
    account-group-outline: 
    account-hard-hat: 
    account-hard-hat-outline: 羽
    account-heart: 
    account-heart-outline: 
    account-injury: 
    account-injury-outline: 
    account-key: 
    account-key-outline: 
    account-lock: 
    account-lock-open: 寧
    account-lock-open-outline: 怒
    account-lock-outline: 
    account-minus: 
    account-minus-outline: 
    account-multiple: 
    account-multiple-check: 
    account-multiple-check-outline: 
    account-multiple-minus: 
    account-multiple-minus-outline: 
    account-multiple-outline: 
    account-multiple-plus: 
    account-multiple-plus-outline: 
    account-multiple-remove: 
    account-multiple-remove-outline: 
    account-music: 
    account-music-outline: 
    account-network: 
    account-network-outline: 
    account-off: 
    account-off-outline: 
    account-outline: 
    account-plus: 
    account-plus-outline: 
    account-question: 
    account-question-outline: 
    account-reactivate: 
    account-reactivate-outline: 
    account-remove: 
    account-remove-outline: 
    account-school: 﨟
    account-school-outline: 蘒
    account-search: 
    account-search-outline: 
    account-settings: 
    account-settings-outline: 
    account-star: 
    account-star-outline: 
    account-supervisor: 
    account-supervisor-circle: 
    account-supervisor-circle-outline: 
    account-supervisor-outline: 
    account-switch: 
    account-switch-outline: 
    account-sync: 駱
    account-sync-outline: 亂
    account-tie: 
    account-tie-hat: 
    account-tie-hat-outline: 
    account-tie-outline: 
    account-tie-voice: 
    account-tie-voice-off: 
    account-tie-voice-off-outline: 
    account-tie-voice-outline: 
    account-tie-woman: 懲
    account-voice: 
    account-voice-off: 
    account-wrench: 
    account-wrench-outline: 
    adjust: 
    advertisements: 朗
    advertisements-off: 浪
    air-conditioner: 
    air-filter: 
    air-horn: 
    air-humidifier: 
    air-humidifier-off: 
    air-purifier: 
    airbag: 
    airballoon: 
    airballoon-outline: 
    airplane: 
    airplane-alert: 
    airplane-check: 
    airplane-clock: 
    airplane-cog: 
    airplane-edit: 
    airplane-landing: 
    airplane-marker: 
    airplane-minus: 
    airplane-off: 
    airplane-plus: 
    airplane-remove: 
    airplane-search: 
    airplane-settings: 
    airplane-takeoff: 
    airport: 
    alarm: 
    alarm-bell: 
    alarm-check: 
    alarm-light: 
    alarm-light-off: 
    alarm-light-off-outline: 
    alarm-light-outline: 
    alarm-multiple: 
    alarm-note: 
    alarm-note-off: 
    alarm-off: 
    alarm-panel: 
    alarm-panel-outline: 
    alarm-plus: 
    alarm-snooze: 
    album: 
    alert: 
    alert-box: 
    alert-box-outline: 
    alert-circle: 
    alert-circle-check: 
    alert-circle-check-outline: 
    alert-circle-outline: 
    alert-decagram: 
    alert-decagram-outline: 
    alert-minus: 
    alert-minus-outline: 
    alert-octagon: 
    alert-octagon-outline: 
    alert-octagram: 
    alert-octagram-outline: 
    alert-outline: 
    alert-plus: 
    alert-plus-outline: 
    alert-remove: 
    alert-remove-outline: 
    alert-rhombus: 
    alert-rhombus-outline: 
    alien: 
    alien-outline: 
    align-horizontal-center: 
    align-horizontal-distribute: 率
    align-horizontal-left: 
    align-horizontal-right: 
    align-vertical-bottom: 
    align-vertical-center: 
    align-vertical-distribute: 異
    align-vertical-top: 
    all-inclusive: 
    all-inclusive-box: 
    all-inclusive-box-outline: 
    allergy: 
    alpha: 
    alpha-a: 
    alpha-a-box: 
    alpha-a-box-outline: 
    alpha-a-circle: 
    alpha-a-circle-outline: 
    alpha-b: 
    alpha-b-box: 
    alpha-b-box-outline: 
    alpha-b-circle: 
    alpha-b-circle-outline: 
    alpha-c: 
    alpha-c-box: 
    alpha-c-box-outline: 
    alpha-c-circle: 
    alpha-c-circle-outline: 
    alpha-d: 
    alpha-d-box: 
    alpha-d-box-outline: 
    alpha-d-circle: 
    alpha-d-circle-outline: 
    alpha-e: 
    alpha-e-box: 
    alpha-e-box-outline: 
    alpha-e-circle: 
    alpha-e-circle-outline: 
    alpha-f: 
    alpha-f-box: 
    alpha-f-box-outline: 
    alpha-f-circle: 
    alpha-f-circle-outline: 
    alpha-g: 
    alpha-g-box: 
    alpha-g-box-outline: 
    alpha-g-circle: 
    alpha-g-circle-outline: 
    alpha-h: 
    alpha-h-box: 
    alpha-h-box-outline: 
    alpha-h-circle: 
    alpha-h-circle-outline: 
    alpha-i: 
    alpha-i-box: 
    alpha-i-box-outline: 
    alpha-i-circle: 
    alpha-i-circle-outline: 
    alpha-j: 
    alpha-j-box: 
    alpha-j-box-outline: 
    alpha-j-circle: 
    alpha-j-circle-outline: 
    alpha-k: 
    alpha-k-box: 
    alpha-k-box-outline: 
    alpha-k-circle: 
    alpha-k-circle-outline: 
    alpha-l: 
    alpha-l-box: 
    alpha-l-box-outline: 
    alpha-l-circle: 
    alpha-l-circle-outline: 
    alpha-m: 
    alpha-m-box: 
    alpha-m-box-outline: 
    alpha-m-circle: 
    alpha-m-circle-outline: 
    alpha-n: 
    alpha-n-box: 
    alpha-n-box-outline: 
    alpha-n-circle: 
    alpha-n-circle-outline: 
    alpha-o: 
    alpha-o-box: 
    alpha-o-box-outline: 
    alpha-o-circle: 
    alpha-o-circle-outline: 
    alpha-p: 
    alpha-p-box: 
    alpha-p-box-outline: 
    alpha-p-circle: 
    alpha-p-circle-outline: 
    alpha-q: 
    alpha-q-box: 
    alpha-q-box-outline: 
    alpha-q-circle: 
    alpha-q-circle-outline: 
    alpha-r: 
    alpha-r-box: 
    alpha-r-box-outline: 
    alpha-r-circle: 
    alpha-r-circle-outline: 
    alpha-s: 
    alpha-s-box: 
    alpha-s-box-outline: 
    alpha-s-circle: 
    alpha-s-circle-outline: 
    alpha-t: 
    alpha-t-box: 
    alpha-t-box-outline: 
    alpha-t-circle: 
    alpha-t-circle-outline: 
    alpha-u: 
    alpha-u-box: 
    alpha-u-box-outline: 
    alpha-u-circle: 
    alpha-u-circle-outline: 
    alpha-v: 
    alpha-v-box: 
    alpha-v-box-outline: 
    alpha-v-circle: 
    alpha-v-circle-outline: 
    alpha-w: 
    alpha-w-box: 
    alpha-w-box-outline: 
    alpha-w-circle: 
    alpha-w-circle-outline: 
    alpha-x: 
    alpha-x-box: 
    alpha-x-box-outline: 
    alpha-x-circle: 
    alpha-x-circle-outline: 
    alpha-y: 
    alpha-y-box: 
    alpha-y-box-outline: 
    alpha-y-circle: 
    alpha-y-circle-outline: 
    alpha-z: 
    alpha-z-box: 
    alpha-z-box-outline: 
    alpha-z-circle: 
    alpha-z-circle-outline: 
    alphabet-aurebesh: 
    alphabet-cyrillic: 
    alphabet-greek: 
    alphabet-latin: 
    alphabet-piqad: 
    alphabet-tengwar: 
    alphabetical: 
    alphabetical-off: 
    alphabetical-variant: 
    alphabetical-variant-off: 
    altimeter: 
    ambulance: 
    ammunition: 
    ampersand: 
    amplifier: 
    amplifier-off: 
    anchor: 
    android: 
    android-messages: 
    android-studio: 
    angle-acute: 
    angle-obtuse: 
    angle-right: 
    angular: 
    angularjs: 
    animation: 
    animation-outline: 
    animation-play: 
    animation-play-outline: 
    ansible: 
    antenna: 
    anvil: 
    apache-kafka: 
    api: 
    api-off: 
    apple: 
    apple-finder: 
    apple-icloud: 
    apple-ios: 
    apple-keyboard-caps: 
    apple-keyboard-command: 
    apple-keyboard-control: 
    apple-keyboard-option: 
    apple-keyboard-shift: 
    apple-safari: 
    application: 
    application-array: 
    application-array-outline: 
    application-braces: 
    application-braces-outline: 
    application-brackets: 
    application-brackets-outline: 
    application-cog: 
    application-cog-outline: 
    application-edit: 
    application-edit-outline: 
    application-export: 
    application-import: 
    application-outline: 
    application-parentheses: 
    application-parentheses-outline: 
    application-settings: 
    application-settings-outline: 
    application-variable: 
    application-variable-outline: 
    approximately-equal: 
    approximately-equal-box: 
    apps: 
    apps-box: 
    arch: 
    archive: 
    archive-alert: 
    archive-alert-outline: 
    archive-arrow-down: 
    archive-arrow-down-outline: 
    archive-arrow-up: 
    archive-arrow-up-outline: 
    archive-cancel: 
    archive-cancel-outline: 
    archive-check: 
    archive-check-outline: 
    archive-clock: 
    archive-clock-outline: 
    archive-cog: 
    archive-cog-outline: 
    archive-edit: 
    archive-edit-outline: 
    archive-eye: 
    archive-eye-outline: 
    archive-lock: 
    archive-lock-open: 
    archive-lock-open-outline: 
    archive-lock-outline: 
    archive-marker: 
    archive-marker-outline: 
    archive-minus: 
    archive-minus-outline: 
    archive-music: 
    archive-music-outline: 
    archive-off: 
    archive-off-outline: 
    archive-outline: 
    archive-plus: 
    archive-plus-outline: 
    archive-refresh: 
    archive-refresh-outline: 
    archive-remove: 
    archive-remove-outline: 
    archive-search: 
    archive-search-outline: 
    archive-settings: 
    archive-settings-outline: 
    archive-star: 
    archive-star-outline: 
    archive-sync: 
    archive-sync-outline: 
    arm-flex: 
    arm-flex-outline: 
    arrange-bring-forward: 
    arrange-bring-to-front: 
    arrange-send-backward: 
    arrange-send-to-back: 
    arrow-all: 
    arrow-bottom-left: 
    arrow-bottom-left-bold-box: 北
    arrow-bottom-left-bold-box-outline: 磻
    arrow-bottom-left-bold-outline: 
    arrow-bottom-left-thick: 
    arrow-bottom-left-thin: 例
    arrow-bottom-left-thin-circle-outline: 
    arrow-bottom-right: 
    arrow-bottom-right-bold-box: 便
    arrow-bottom-right-bold-box-outline: 復
    arrow-bottom-right-bold-outline: 
    arrow-bottom-right-thick: 
    arrow-bottom-right-thin: 禮
    arrow-bottom-right-thin-circle-outline: 
    arrow-collapse: 
    arrow-collapse-all: 
    arrow-collapse-down: 
    arrow-collapse-horizontal: 
    arrow-collapse-left: 
    arrow-collapse-right: 
    arrow-collapse-up: 
    arrow-collapse-vertical: 
    arrow-decision: 
    arrow-decision-auto: 
    arrow-decision-auto-outline: 
    arrow-decision-outline: 
    arrow-down: 
    arrow-down-bold: 
    arrow-down-bold-box: 
    arrow-down-bold-box-outline: 
    arrow-down-bold-circle: 
    arrow-down-bold-circle-outline: 
    arrow-down-bold-hexagon-outline: 
    arrow-down-bold-outline: 
    arrow-down-box: 
    arrow-down-circle: 
    arrow-down-circle-outline: 
    arrow-down-drop-circle: 
    arrow-down-drop-circle-outline: 
    arrow-down-left: 
    arrow-down-left-bold: 
    arrow-down-right: 
    arrow-down-right-bold: 
    arrow-down-thick: 
    arrow-down-thin: 零
    arrow-down-thin-circle-outline: 
    arrow-expand: 
    arrow-expand-all: 
    arrow-expand-down: 
    arrow-expand-horizontal: 
    arrow-expand-left: 
    arrow-expand-right: 
    arrow-expand-up: 
    arrow-expand-vertical: 
    arrow-horizontal-lock: 
    arrow-left: 
    arrow-left-bold: 
    arrow-left-bold-box: 
    arrow-left-bold-box-outline: 
    arrow-left-bold-circle: 
    arrow-left-bold-circle-outline: 
    arrow-left-bold-hexagon-outline: 
    arrow-left-bold-outline: 
    arrow-left-bottom: 
    arrow-left-bottom-bold: 
    arrow-left-box: 
    arrow-left-circle: 
    arrow-left-circle-outline: 
    arrow-left-drop-circle: 
    arrow-left-drop-circle-outline: 
    arrow-left-right: 
    arrow-left-right-bold: 
    arrow-left-right-bold-outline: 
    arrow-left-thick: 
    arrow-left-thin: 聆
    arrow-left-thin-circle-outline: 
    arrow-left-top: 
    arrow-left-top-bold: 
    arrow-projectile: 
    arrow-projectile-multiple: 
    arrow-right: 
    arrow-right-bold: 
    arrow-right-bold-box: 
    arrow-right-bold-box-outline: 
    arrow-right-bold-circle: 
    arrow-right-bold-circle-outline: 
    arrow-right-bold-hexagon-outline: 
    arrow-right-bold-outline: 
    arrow-right-bottom: 
    arrow-right-bottom-bold: 
    arrow-right-box: 
    arrow-right-circle: 
    arrow-right-circle-outline: 
    arrow-right-drop-circle: 
    arrow-right-drop-circle-outline: 
    arrow-right-thick: 
    arrow-right-thin: 羚
    arrow-right-thin-circle-outline: 
    arrow-right-top: 
    arrow-right-top-bold: 
    arrow-split-horizontal: 
    arrow-split-vertical: 
    arrow-top-left: 
    arrow-top-left-bold-box: 不
    arrow-top-left-bold-box-outline: 泌
    arrow-top-left-bold-outline: 
    arrow-top-left-bottom-right: 
    arrow-top-left-bottom-right-bold: 
    arrow-top-left-thick: 
    arrow-top-left-thin: 領
    arrow-top-left-thin-circle-outline: 
    arrow-top-right: 
    arrow-top-right-bold-box: 數
    arrow-top-right-bold-box-outline: 索
    arrow-top-right-bold-outline: 
    arrow-top-right-bottom-left: 
    arrow-top-right-bottom-left-bold: 
    arrow-top-right-thick: 
    arrow-top-right-thin: 靈
    arrow-top-right-thin-circle-outline: 
    arrow-u-down-left: 
    arrow-u-down-left-bold: 
    arrow-u-down-right: 
    arrow-u-down-right-bold: 
    arrow-u-left-bottom: 
    arrow-u-left-bottom-bold: 
    arrow-u-left-top: 
    arrow-u-left-top-bold: 
    arrow-u-right-bottom: 
    arrow-u-right-bottom-bold: 
    arrow-u-right-top: 
    arrow-u-right-top-bold: 
    arrow-u-up-left: 
    arrow-u-up-left-bold: 
    arrow-u-up-right: 
    arrow-u-up-right-bold: 
    arrow-up: 
    arrow-up-bold: 
    arrow-up-bold-box: 
    arrow-up-bold-box-outline: 
    arrow-up-bold-circle: 
    arrow-up-bold-circle-outline: 
    arrow-up-bold-hexagon-outline: 
    arrow-up-bold-outline: 
    arrow-up-box: 
    arrow-up-circle: 
    arrow-up-circle-outline: 
    arrow-up-down: 
    arrow-up-down-bold: 
    arrow-up-down-bold-outline: 
    arrow-up-drop-circle: 
    arrow-up-drop-circle-outline: 
    arrow-up-left: 
    arrow-up-left-bold: 
    arrow-up-right: 
    arrow-up-right-bold: 
    arrow-up-thick: 
    arrow-up-thin: 鈴
    arrow-up-thin-circle-outline: 
    arrow-vertical-lock: 
    artstation: 
    aspect-ratio: 
    assistant: 
    asterisk: 
    asterisk-circle-outline: 都
    at: 
    atlassian: 
    atm: 
    atom: 
    atom-variant: 
    attachment: 
    attachment-check: 變
    attachment-lock: 遼
    attachment-minus: 贈
    attachment-off: 輸
    attachment-plus: 遲
    attachment-remove: 醙
    audio-input-rca: 
    audio-input-stereo-minijack: 
    audio-input-xlr: 
    audio-video: 
    audio-video-off: 
    augmented-reality: 
    auto-download: 
    auto-fix: 
    auto-upload: 
    autorenew: 
    autorenew-off: 罹
    av-timer: 
    aws: 
    axe: 
    axe-battle: 
    axis: 
    axis-arrow: 
    axis-arrow-info: 
    axis-arrow-lock: 
    axis-lock: 
    axis-x-arrow: 
    axis-x-arrow-lock: 
    axis-x-rotate-clockwise: 
    axis-x-rotate-counterclockwise: 
    axis-x-y-arrow-lock: 
    axis-y-arrow: 
    axis-y-arrow-lock: 
    axis-y-rotate-clockwise: 
    axis-y-rotate-counterclockwise: 
    axis-z-arrow: 
    axis-z-arrow-lock: 
    axis-z-rotate-clockwise: 
    axis-z-rotate-counterclockwise: 
    babel: 
    baby: 
    baby-bottle: 
    baby-bottle-outline: 
    baby-buggy: 
    baby-carriage: 
    baby-carriage-off: 
    baby-face: 
    baby-face-outline: 
    backburger: 
    backspace: 
    backspace-outline: 
    backspace-reverse: 
    backspace-reverse-outline: 
    backup-restore: 
    bacteria: 
    bacteria-outline: 
    badge-account: 
    badge-account-alert: 
    badge-account-alert-outline: 
    badge-account-horizontal: 
    badge-account-horizontal-outline: 
    badge-account-outline: 
    badminton: 
    bag-carry-on: 
    bag-carry-on-check: 
    bag-carry-on-off: 
    bag-checked: 
    bag-personal: 
    bag-personal-off: 
    bag-personal-off-outline: 
    bag-personal-outline: 
    bag-suitcase: 
    bag-suitcase-off: 
    bag-suitcase-off-outline: 
    bag-suitcase-outline: 
    baguette: 
    balcony: 
    balloon: 
    ballot: 
    ballot-outline: 
    ballot-recount: 
    ballot-recount-outline: 
    bandage: 
    bank: 
    bank-check: 
    bank-minus: 
    bank-off: 
    bank-off-outline: 
    bank-outline: 
    bank-plus: 
    bank-remove: 
    bank-transfer: 
    bank-transfer-in: 
    bank-transfer-out: 
    barcode: 
    barcode-off: 
    barcode-scan: 
    barley: 
    barley-off: 
    barn: 
    barrel: 
    barrel-outline: 﨧
    baseball: 
    baseball-bat: 
    baseball-diamond: 
    baseball-diamond-outline: 
    bash: 
    basket: 
    basket-check: 
    basket-check-outline: 
    basket-fill: 
    basket-minus: 
    basket-minus-outline: 
    basket-off: 
    basket-off-outline: 
    basket-outline: 
    basket-plus: 
    basket-plus-outline: 
    basket-remove: 
    basket-remove-outline: 
    basket-unfill: 
    basketball: 
    basketball-hoop: 
    basketball-hoop-outline: 
    bat: 
    bathtub: 
    bathtub-outline: 
    battery: 
    battery-10: 
    battery-10-bluetooth: 
    battery-20: 
    battery-20-bluetooth: 
    battery-30: 
    battery-30-bluetooth: 
    battery-40: 
    battery-40-bluetooth: 
    battery-50: 
    battery-50-bluetooth: 
    battery-60: 
    battery-60-bluetooth: 
    battery-70: 
    battery-70-bluetooth: 
    battery-80: 
    battery-80-bluetooth: 
    battery-90: 
    battery-90-bluetooth: 
    battery-alert: 
    battery-alert-bluetooth: 
    battery-alert-variant: 
    battery-alert-variant-outline: 
    battery-arrow-down: 
    battery-arrow-down-outline: 
    battery-arrow-up: 
    battery-arrow-up-outline: 
    battery-bluetooth: 
    battery-bluetooth-variant: 
    battery-charging: 
    battery-charging-10: 
    battery-charging-100: 
    battery-charging-20: 
    battery-charging-30: 
    battery-charging-40: 
    battery-charging-50: 
    battery-charging-60: 
    battery-charging-70: 
    battery-charging-80: 
    battery-charging-90: 
    battery-charging-high: 
    battery-charging-low: 
    battery-charging-medium: 
    battery-charging-outline: 
    battery-charging-wireless: 
    battery-charging-wireless-10: 
    battery-charging-wireless-20: 
    battery-charging-wireless-30: 
    battery-charging-wireless-40: 
    battery-charging-wireless-50: 
    battery-charging-wireless-60: 
    battery-charging-wireless-70: 
    battery-charging-wireless-80: 
    battery-charging-wireless-90: 
    battery-charging-wireless-alert: 
    battery-charging-wireless-outline: 
    battery-check: 
    battery-check-outline: 
    battery-clock: 理
    battery-clock-outline: 痢
    battery-heart: 
    battery-heart-outline: 
    battery-heart-variant: 
    battery-high: 
    battery-lock: 
    battery-lock-open: 
    battery-low: 
    battery-medium: 
    battery-minus: 
    battery-minus-outline: 
    battery-minus-variant: 
    battery-negative: 
    battery-off: 
    battery-off-outline: 
    battery-outline: 
    battery-plus: 
    battery-plus-outline: 
    battery-plus-variant: 
    battery-positive: 
    battery-remove: 
    battery-remove-outline: 
    battery-sync: 
    battery-sync-outline: 
    battery-unknown: 
    battery-unknown-bluetooth: 
    beach: 
    beaker: 
    beaker-alert: 
    beaker-alert-outline: 
    beaker-check: 
    beaker-check-outline: 
    beaker-minus: 
    beaker-minus-outline: 
    beaker-outline: 
    beaker-plus: 
    beaker-plus-outline: 
    beaker-question: 
    beaker-question-outline: 
    beaker-remove: 
    beaker-remove-outline: 
    bed: 
    bed-double: 
    bed-double-outline: 
    bed-empty: 
    bed-king: 
    bed-king-outline: 
    bed-outline: 
    bed-queen: 
    bed-queen-outline: 
    bed-single: 
    bed-single-outline: 
    bee: 
    bee-flower: 
    beehive-off-outline: 
    beehive-outline: 
    beekeeper: 
    beer: 
    beer-outline: 
    bell: 
    bell-alert: 
    bell-alert-outline: 
    bell-badge: 
    bell-badge-outline: 
    bell-cancel: 
    bell-cancel-outline: 
    bell-check: 
    bell-check-outline: 
    bell-circle: 
    bell-circle-outline: 
    bell-cog: 﨨
    bell-cog-outline: 﨩
    bell-minus: 
    bell-minus-outline: 
    bell-off: 
    bell-off-outline: 
    bell-outline: 
    bell-plus: 
    bell-plus-outline: 
    bell-remove: 
    bell-remove-outline: 
    bell-ring: 
    bell-ring-outline: 
    bell-sleep: 
    bell-sleep-outline: 
    beta: 
    betamax: 
    biathlon: 
    bicycle: 
    bicycle-basket: 
    bicycle-cargo: 
    bicycle-electric: 
    bicycle-penny-farthing: 
    bike: 
    bike-fast: 
    billboard: 
    billiards: 
    billiards-rack: 
    binoculars: 
    bio: 
    biohazard: 
    bird: 
    bitbucket: 
    bitcoin: 
    black-mesa: 
    blender: 
    blender-outline: 
    blender-software: 
    blinds: 
    blinds-horizontal: 飯
    blinds-horizontal-closed: 飼
    blinds-open: 
    blinds-vertical: 館
    blinds-vertical-closed: 鶴
    block-helper: 
    blood-bag: 
    bluetooth: 
    bluetooth-audio: 
    bluetooth-connect: 
    bluetooth-off: 
    bluetooth-settings: 
    bluetooth-transfer: 
    blur: 
    blur-linear: 
    blur-off: 
    blur-radial: 
    bolt: 
    bomb: 
    bomb-off: 
    bone: 
    bone-off: 履
    book: 
    book-account: 
    book-account-outline: 
    book-alert: 
    book-alert-outline: 
    book-alphabet: 
    book-arrow-down: 
    book-arrow-down-outline: 
    book-arrow-left: 
    book-arrow-left-outline: 
    book-arrow-right: 
    book-arrow-right-outline: 
    book-arrow-up: 
    book-arrow-up-outline: 
    book-cancel: 
    book-cancel-outline: 
    book-check: 
    book-check-outline: 
    book-clock: 
    book-clock-outline: 
    book-cog: 
    book-cog-outline: 
    book-cross: 
    book-edit: 
    book-edit-outline: 
    book-education: 
    book-education-outline: 
    book-heart: 靖
    book-heart-outline: 精
    book-information-variant: 
    book-lock: 
    book-lock-open: 
    book-lock-open-outline: 
    book-lock-outline: 
    book-marker: 
    book-marker-outline: 
    book-minus: 
    book-minus-multiple: 
    book-minus-multiple-outline: 
    book-minus-outline: 
    book-multiple: 
    book-multiple-outline: 
    book-music: 
    book-music-outline: 
    book-off: 
    book-off-outline: 
    book-open: 
    book-open-blank-variant: 
    book-open-outline: 
    book-open-page-variant: 
    book-open-page-variant-outline: 
    book-open-variant: 
    book-outline: 
    book-play: 
    book-play-outline: 
    book-plus: 
    book-plus-multiple: 
    book-plus-multiple-outline: 
    book-plus-outline: 
    book-refresh: 
    book-refresh-outline: 
    book-remove: 
    book-remove-multiple: 
    book-remove-multiple-outline: 
    book-remove-outline: 
    book-search: 
    book-search-outline: 
    book-settings: 
    book-settings-outline: 
    book-sync: 
    book-sync-outline: 
    book-variant: 
    book-variant-multiple: 
    bookmark: 
    bookmark-box-multiple: 參
    bookmark-box-multiple-outline: 塞
    bookmark-check: 
    bookmark-check-outline: 
    bookmark-minus: 
    bookmark-minus-outline: 
    bookmark-multiple: 
    bookmark-multiple-outline: 
    bookmark-music: 
    bookmark-music-outline: 
    bookmark-off: 
    bookmark-off-outline: 
    bookmark-outline: 
    bookmark-plus: 
    bookmark-plus-outline: 
    bookmark-remove: 
    bookmark-remove-outline: 
    bookshelf: 
    boom-gate: 
    boom-gate-alert: 
    boom-gate-alert-outline: 
    boom-gate-arrow-down: 
    boom-gate-arrow-down-outline: 
    boom-gate-arrow-up: 
    boom-gate-arrow-up-outline: 
    boom-gate-outline: 
    boom-gate-up: 
    boom-gate-up-outline: 
    boombox: 
    boomerang: 
    bootstrap: 
    border-all: 
    border-all-variant: 
    border-bottom: 
    border-bottom-variant: 
    border-color: 
    border-horizontal: 
    border-inside: 
    border-left: 
    border-left-variant: 
    border-none: 
    border-none-variant: 
    border-outside: 
    border-right: 
    border-right-variant: 
    border-style: 
    border-top: 
    border-top-variant: 
    border-vertical: 
    bottle-soda: 
    bottle-soda-classic: 
    bottle-soda-classic-outline: 
    bottle-soda-outline: 
    bottle-tonic: 
    bottle-tonic-outline: 
    bottle-tonic-plus: 
    bottle-tonic-plus-outline: 
    bottle-tonic-skull: 
    bottle-tonic-skull-outline: 
    bottle-wine: 
    bottle-wine-outline: 
    bow-arrow: 
    bow-tie: 
    bowl: 
    bowl-mix: 
    bowl-mix-outline: 
    bowl-outline: 
    bowling: 
    box: 
    box-cutter: 
    box-cutter-off: 
    box-shadow: 
    boxing-glove: 
    braille: 
    brain: 
    bread-slice: 
    bread-slice-outline: 
    bridge: 
    briefcase: 
    briefcase-account: 
    briefcase-account-outline: 
    briefcase-arrow-left-right: 戴
    briefcase-arrow-left-right-outline: 揄
    briefcase-arrow-up-down: 搜
    briefcase-arrow-up-down-outline: 摒
    briefcase-check: 
    briefcase-check-outline: 
    briefcase-clock: 
    briefcase-clock-outline: 
    briefcase-download: 
    briefcase-download-outline: 
    briefcase-edit: 
    briefcase-edit-outline: 
    briefcase-eye: 
    briefcase-eye-outline: 
    briefcase-minus: 
    briefcase-minus-outline: 
    briefcase-off: 
    briefcase-off-outline: 
    briefcase-outline: 
    briefcase-plus: 
    briefcase-plus-outline: 
    briefcase-remove: 
    briefcase-remove-outline: 
    briefcase-search: 
    briefcase-search-outline: 
    briefcase-upload: 
    briefcase-upload-outline: 
    briefcase-variant: 
    briefcase-variant-off: 
    briefcase-variant-off-outline: 
    briefcase-variant-outline: 
    brightness-1: 
    brightness-2: 
    brightness-3: 
    brightness-4: 
    brightness-5: 
    brightness-6: 
    brightness-7: 
    brightness-auto: 
    brightness-percent: 
    broadcast: 
    broadcast-off: 
    broom: 
    brush: 
    brush-off: 
    brush-outline: 兀
    brush-variant: 
    bucket: 
    bucket-outline: 
    buffet: 
    bug: 
    bug-check: 
    bug-check-outline: 
    bug-outline: 
    bugle: 
    bulkhead-light: 郞
    bulldozer: 
    bullet: 
    bulletin-board: 
    bullhorn: 
    bullhorn-outline: 
    bullhorn-variant: 省
    bullhorn-variant-outline: 葉
    bullseye: 
    bullseye-arrow: 
    bulma: 
    bunk-bed: 
    bunk-bed-outline: 
    bus: 
    bus-alert: 
    bus-articulated-end: 
    bus-articulated-front: 
    bus-clock: 
    bus-double-decker: 
    bus-electric: 卵
    bus-marker: 
    bus-multiple: 
    bus-school: 
    bus-side: 
    bus-stop: 
    bus-stop-covered: 
    bus-stop-uncovered: 
    butterfly: 
    butterfly-outline: 
    cabin-a-frame: 
    cable-data: 
    cached: 
    cactus: 
    cake: 
    cake-layered: 
    cake-variant: 
    cake-variant-outline: 
    calculator: 
    calculator-variant: 
    calculator-variant-outline: 
    calendar: 
    calendar-account: 
    calendar-account-outline: 
    calendar-alert: 
    calendar-arrow-left: 
    calendar-arrow-right: 
    calendar-blank: 
    calendar-blank-multiple: 
    calendar-blank-outline: 
    calendar-check: 
    calendar-check-outline: 
    calendar-clock: 
    calendar-clock-outline: 
    calendar-collapse-horizontal: 
    calendar-cursor: 
    calendar-edit: 
    calendar-end: 
    calendar-expand-horizontal: 
    calendar-export: 
    calendar-heart: 
    calendar-import: 
    calendar-lock: 
    calendar-lock-outline: 
    calendar-minus: 
    calendar-month: 
    calendar-month-outline: 
    calendar-multiple: 
    calendar-multiple-check: 
    calendar-multiselect: 
    calendar-outline: 
    calendar-plus: 
    calendar-question: 
    calendar-range: 
    calendar-range-outline: 
    calendar-refresh: 
    calendar-refresh-outline: 
    calendar-remove: 
    calendar-remove-outline: 
    calendar-search: 
    calendar-star: 
    calendar-start: 
    calendar-sync: 
    calendar-sync-outline: 
    calendar-text: 
    calendar-text-outline: 
    calendar-today: 
    calendar-today-outline: 隷
    calendar-week: 
    calendar-week-begin: 
    calendar-week-begin-outline: 侮
    calendar-week-end: 僧
    calendar-week-end-outline: 免
    calendar-week-outline: 勉
    calendar-weekend: 
    calendar-weekend-outline: 
    call-made: 
    call-merge: 
    call-missed: 
    call-received: 
    call-split: 
    camcorder: 
    camcorder-off: 
    camera: 
    camera-account: 
    camera-burst: 
    camera-control: 
    camera-document: 
    camera-document-off: 
    camera-enhance: 
    camera-enhance-outline: 
    camera-flip: 
    camera-flip-outline: 
    camera-front: 
    camera-front-variant: 
    camera-gopro: 
    camera-image: 
    camera-iris: 
    camera-lock: 﨓
    camera-lock-outline: 﨔
    camera-marker: 簾
    camera-marker-outline: 獵
    camera-metering-center: 
    camera-metering-matrix: 
    camera-metering-partial: 
    camera-metering-spot: 
    camera-off: 
    camera-off-outline: 料
    camera-outline: 
    camera-party-mode: 
    camera-plus: 
    camera-plus-outline: 
    camera-rear: 
    camera-rear-variant: 
    camera-retake: 
    camera-retake-outline: 
    camera-switch: 
    camera-switch-outline: 
    camera-timer: 
    camera-wireless: 
    camera-wireless-outline: 
    campfire: 
    cancel: 
    candelabra: 
    candelabra-fire: 
    candle: 
    candy: 說
    candy-off: 殺
    candy-off-outline: 辰
    candy-outline: 沈
    candycane: 
    cannabis: 
    cannabis-off: 
    caps-lock: 
    car: 
    car-2-plus: 
    car-3-plus: 
    car-arrow-left: 
    car-arrow-right: 
    car-back: 
    car-battery: 
    car-brake-abs: 
    car-brake-alert: 
    car-brake-fluid-level: 龜
    car-brake-hold: 
    car-brake-low-pressure: 契
    car-brake-parking: 
    car-brake-retarder: 
    car-brake-temperature: 金
    car-brake-worn-linings: 喇
    car-child-seat: 
    car-clock: 拾
    car-clutch: 
    car-cog: 
    car-connected: 
    car-convertible: 
    car-coolant-level: 
    car-cruise-control: 
    car-defrost-front: 
    car-defrost-rear: 
    car-door: 
    car-door-lock: 
    car-electric: 
    car-electric-outline: 
    car-emergency: 
    car-esp: 
    car-estate: 
    car-hatchback: 
    car-info: 
    car-key: 
    car-lifted-pickup: 
    car-light-alert: 奈
    car-light-dimmed: 
    car-light-fog: 
    car-light-high: 
    car-limousine: 
    car-multiple: 
    car-off: 
    car-outline: 
    car-parking-lights: 
    car-pickup: 
    car-seat: 
    car-seat-cooler: 
    car-seat-heater: 
    car-select: 
    car-settings: 
    car-shift-pattern: 
    car-side: 
    car-speed-limiter: 懶
    car-sports: 
    car-tire-alert: 
    car-traction-control: 
    car-turbocharger: 
    car-wash: 
    car-windshield: 
    car-windshield-outline: 
    car-wireless: 
    car-wrench: 
    carabiner: 
    caravan: 
    card: 
    card-account-details: 
    card-account-details-outline: 
    card-account-details-star: 
    card-account-details-star-outline: 
    card-account-mail: 
    card-account-mail-outline: 
    card-account-phone: 
    card-account-phone-outline: 
    card-bulleted: 
    card-bulleted-off: 
    card-bulleted-off-outline: 
    card-bulleted-outline: 
    card-bulleted-settings: 
    card-bulleted-settings-outline: 
    card-minus: 
    card-minus-outline: 
    card-multiple: 
    card-multiple-outline: 
    card-off: 
    card-off-outline: 
    card-outline: 
    card-plus: 
    card-plus-outline: 
    card-remove: 
    card-remove-outline: 
    card-search: 
    card-search-outline: 
    card-text: 
    card-text-outline: 
    cards: 
    cards-club: 
    cards-club-outline: 
    cards-diamond: 
    cards-diamond-outline: 
    cards-heart: 
    cards-heart-outline: 
    cards-outline: 
    cards-playing: 
    cards-playing-club: 
    cards-playing-club-multiple: 
    cards-playing-club-multiple-outline: 
    cards-playing-club-outline: 
    cards-playing-diamond: 
    cards-playing-diamond-multiple: 
    cards-playing-diamond-multiple-outline: 
    cards-playing-diamond-outline: 
    cards-playing-heart: 
    cards-playing-heart-multiple: 
    cards-playing-heart-multiple-outline: 
    cards-playing-heart-outline: 
    cards-playing-outline: 
    cards-playing-spade: 
    cards-playing-spade-multiple: 
    cards-playing-spade-multiple-outline: 
    cards-playing-spade-outline: 
    cards-spade: 
    cards-spade-outline: 
    cards-variant: 
    carrot: 
    cart: 
    cart-arrow-down: 
    cart-arrow-right: 
    cart-arrow-up: 
    cart-check: 
    cart-heart: 
    cart-minus: 
    cart-off: 
    cart-outline: 
    cart-plus: 
    cart-remove: 
    cart-variant: 
    case-sensitive-alt: 
    cash: 
    cash-100: 
    cash-check: 
    cash-clock: 敖
    cash-fast: 
    cash-lock: 
    cash-lock-open: 
    cash-marker: 
    cash-minus: 
    cash-multiple: 
    cash-plus: 
    cash-refund: 
    cash-register: 
    cash-remove: 
    cash-sync: 晴
    cassette: 
    cast: 
    cast-audio: 
    cast-audio-variant: 
    cast-connected: 
    cast-education: 
    cast-off: 
    cast-variant: 
    castle: 
    cat: 
    cctv: 
    cctv-off: 
    ceiling-fan: 
    ceiling-fan-light: 
    ceiling-light: 
    ceiling-light-multiple: 
    ceiling-light-multiple-outline: 
    ceiling-light-outline: 
    cellphone: 
    cellphone-arrow-down: 
    cellphone-arrow-down-variant: 龍
    cellphone-basic: 
    cellphone-charging: 
    cellphone-check: 
    cellphone-cog: 
    cellphone-dock: 
    cellphone-information: 
    cellphone-key: 
    cellphone-link: 
    cellphone-link-off: 
    cellphone-lock: 
    cellphone-marker: 
    cellphone-message: 
    cellphone-message-off: 
    cellphone-nfc: 
    cellphone-nfc-off: 
    cellphone-off: 
    cellphone-play: 
    cellphone-remove: 
    cellphone-screenshot: 
    cellphone-settings: 
    cellphone-sound: 
    cellphone-text: 
    cellphone-wireless: 
    centos: 
    certificate: 
    certificate-outline: 
    chair-rolling: 
    chair-school: 
    chandelier: 
    charity: 
    chart-arc: 
    chart-areaspline: 
    chart-areaspline-variant: 
    chart-bar: 
    chart-bar-stacked: 
    chart-bell-curve: 
    chart-bell-curve-cumulative: 
    chart-box: 
    chart-box-outline: 
    chart-box-plus-outline: 
    chart-bubble: 
    chart-donut: 
    chart-donut-variant: 
    chart-gantt: 
    chart-histogram: 
    chart-line: 
    chart-line-stacked: 
    chart-line-variant: 
    chart-multiline: 
    chart-multiple: 
    chart-pie: 
    chart-ppf: 
    chart-sankey: 
    chart-sankey-variant: 
    chart-scatter-plot: 
    chart-scatter-plot-hexbin: 
    chart-timeline: 
    chart-timeline-variant: 
    chart-timeline-variant-shimmer: 
    chart-tree: 
    chart-waterfall: 珞
    chat: 
    chat-alert: 
    chat-alert-outline: 
    chat-minus: 
    chat-minus-outline: 
    chat-outline: 
    chat-plus: 
    chat-plus-outline: 
    chat-processing: 
    chat-processing-outline: 
    chat-question: 
    chat-question-outline: 
    chat-remove: 
    chat-remove-outline: 
    chat-sleep: 
    chat-sleep-outline: 
    check: 
    check-all: 
    check-bold: 
    check-circle: 
    check-circle-outline: 
    check-decagram: 
    check-decagram-outline: 
    check-network: 
    check-network-outline: 
    check-outline: 
    check-underline: 
    check-underline-circle: 
    check-underline-circle-outline: 
    checkbook: 
    checkbox-blank: 
    checkbox-blank-badge: 
    checkbox-blank-badge-outline: 
    checkbox-blank-circle: 
    checkbox-blank-circle-outline: 
    checkbox-blank-off: 
    checkbox-blank-off-outline: 
    checkbox-blank-outline: 
    checkbox-intermediate: 
    checkbox-marked: 
    checkbox-marked-circle: 
    checkbox-marked-circle-outline: 
    checkbox-marked-circle-plus-outline: 臘
    checkbox-marked-outline: 
    checkbox-multiple-blank: 
    checkbox-multiple-blank-circle: 
    checkbox-multiple-blank-circle-outline: 
    checkbox-multiple-blank-outline: 
    checkbox-multiple-marked: 
    checkbox-multiple-marked-circle: 
    checkbox-multiple-marked-circle-outline: 
    checkbox-multiple-marked-outline: 
    checkbox-multiple-outline: 
    checkbox-outline: 
    checkerboard: 
    checkerboard-minus: 
    checkerboard-plus: 
    checkerboard-remove: 
    cheese: 
    cheese-off: 
    chef-hat: 
    chemical-weapon: 
    chess-bishop: 
    chess-king: 
    chess-knight: 
    chess-pawn: 
    chess-queen: 
    chess-rook: 
    chevron-double-down: 
    chevron-double-left: 
    chevron-double-right: 
    chevron-double-up: 
    chevron-down: 
    chevron-down-box: 
    chevron-down-box-outline: 
    chevron-down-circle: 
    chevron-down-circle-outline: 
    chevron-left: 
    chevron-left-box: 
    chevron-left-box-outline: 
    chevron-left-circle: 
    chevron-left-circle-outline: 
    chevron-right: 
    chevron-right-box: 
    chevron-right-box-outline: 
    chevron-right-circle: 
    chevron-right-circle-outline: 
    chevron-triple-down: 
    chevron-triple-left: 
    chevron-triple-right: 
    chevron-triple-up: 
    chevron-up: 
    chevron-up-box: 
    chevron-up-box-outline: 
    chevron-up-circle: 
    chevron-up-circle-outline: 
    chili-alert: 
    chili-alert-outline: 
    chili-hot: 
    chili-hot-outline: 
    chili-medium: 
    chili-medium-outline: 
    chili-mild: 
    chili-mild-outline: 
    chili-off: 
    chili-off-outline: 
    chip: 
    church: 
    cigar: 
    cigar-off: 
    circle: 
    circle-box: 
    circle-box-outline: 
    circle-double: 
    circle-edit-outline: 
    circle-expand: 
    circle-half: 
    circle-half-full: 
    circle-medium: 
    circle-multiple: 
    circle-multiple-outline: 
    circle-off-outline: 
    circle-opacity: 
    circle-outline: 
    circle-slice-1: 
    circle-slice-2: 
    circle-slice-3: 
    circle-slice-4: 
    circle-slice-5: 
    circle-slice-6: 
    circle-slice-7: 
    circle-slice-8: 
    circle-small: 
    circular-saw: 
    city: 
    city-variant: 
    city-variant-outline: 
    clipboard: 
    clipboard-account: 
    clipboard-account-outline: 
    clipboard-alert: 
    clipboard-alert-outline: 
    clipboard-arrow-down: 
    clipboard-arrow-down-outline: 
    clipboard-arrow-left: 
    clipboard-arrow-left-outline: 
    clipboard-arrow-right: 
    clipboard-arrow-right-outline: 
    clipboard-arrow-up: 
    clipboard-arrow-up-outline: 
    clipboard-check: 
    clipboard-check-multiple: 
    clipboard-check-multiple-outline: 
    clipboard-check-outline: 
    clipboard-clock: 
    clipboard-clock-outline: 
    clipboard-edit: 
    clipboard-edit-outline: 
    clipboard-file: 
    clipboard-file-outline: 
    clipboard-flow: 
    clipboard-flow-outline: 
    clipboard-list: 
    clipboard-list-outline: 
    clipboard-minus: 
    clipboard-minus-outline: 
    clipboard-multiple: 
    clipboard-multiple-outline: 
    clipboard-off: 
    clipboard-off-outline: 
    clipboard-outline: 
    clipboard-play: 
    clipboard-play-multiple: 
    clipboard-play-multiple-outline: 
    clipboard-play-outline: 
    clipboard-plus: 
    clipboard-plus-outline: 
    clipboard-pulse: 
    clipboard-pulse-outline: 
    clipboard-remove: 
    clipboard-remove-outline: 
    clipboard-search: 
    clipboard-search-outline: 
    clipboard-text: 
    clipboard-text-clock: 
    clipboard-text-clock-outline: 
    clipboard-text-multiple: 
    clipboard-text-multiple-outline: 
    clipboard-text-off: 
    clipboard-text-off-outline: 
    clipboard-text-outline: 
    clipboard-text-play: 
    clipboard-text-play-outline: 
    clipboard-text-search: 
    clipboard-text-search-outline: 
    clippy: 
    clock: 
    clock-alert: 
    clock-alert-outline: 
    clock-check: 
    clock-check-outline: 
    clock-digital: 
    clock-edit: 惡
    clock-edit-outline: 了
    clock-end: 
    clock-fast: 
    clock-in: 
    clock-minus: 
    clock-minus-outline: 
    clock-out: 
    clock-outline: 
    clock-plus: 
    clock-plus-outline: 
    clock-remove: 
    clock-remove-outline: 
    clock-start: 
    clock-time-eight: 
    clock-time-eight-outline: 
    clock-time-eleven: 
    clock-time-eleven-outline: 
    clock-time-five: 
    clock-time-five-outline: 
    clock-time-four: 
    clock-time-four-outline: 
    clock-time-nine: 
    clock-time-nine-outline: 
    clock-time-one: 
    clock-time-one-outline: 
    clock-time-seven: 
    clock-time-seven-outline: 
    clock-time-six: 
    clock-time-six-outline: 
    clock-time-ten: 
    clock-time-ten-outline: 
    clock-time-three: 
    clock-time-three-outline: 
    clock-time-twelve: 
    clock-time-twelve-outline: 
    clock-time-two: 
    clock-time-two-outline: 
    close: 
    close-box: 
    close-box-multiple: 
    close-box-multiple-outline: 
    close-box-outline: 
    close-circle: 
    close-circle-multiple: 
    close-circle-multiple-outline: 
    close-circle-outline: 
    close-network: 
    close-network-outline: 
    close-octagon: 
    close-octagon-outline: 
    close-outline: 
    close-thick: 
    closed-caption: 
    closed-caption-outline: 
    cloud: 
    cloud-alert: 
    cloud-braces: 
    cloud-check: 
    cloud-check-outline: 
    cloud-circle: 
    cloud-download: 
    cloud-download-outline: 
    cloud-lock: 
    cloud-lock-outline: 
    cloud-off-outline: 
    cloud-outline: 
    cloud-percent: 勤
    cloud-percent-outline: 卑
    cloud-print: 
    cloud-print-outline: 
    cloud-question: 
    cloud-refresh: 
    cloud-search: 
    cloud-search-outline: 
    cloud-sync: 
    cloud-sync-outline: 
    cloud-tags: 
    cloud-upload: 
    cloud-upload-outline: 
    clover: 
    coach-lamp: 
    coach-lamp-variant: 喝
    coat-rack: 
    code-array: 
    code-braces: 
    code-braces-box: 
    code-brackets: 
    code-equal: 
    code-greater-than: 
    code-greater-than-or-equal: 
    code-json: 
    code-less-than: 
    code-less-than-or-equal: 
    code-not-equal: 
    code-not-equal-variant: 
    code-parentheses: 
    code-parentheses-box: 
    code-string: 
    code-tags: 
    code-tags-check: 
    codepen: 
    coffee: 
    coffee-maker: 
    coffee-maker-check: 擄
    coffee-maker-check-outline: 櫓
    coffee-maker-outline: 
    coffee-off: 
    coffee-off-outline: 
    coffee-outline: 
    coffee-to-go: 
    coffee-to-go-outline: 
    coffin: 
    cog: 
    cog-box: 
    cog-clockwise: 
    cog-counterclockwise: 
    cog-off: 
    cog-off-outline: 
    cog-outline: 
    cog-pause: 爐
    cog-pause-outline: 盧
    cog-play: 老
    cog-play-outline: 蘆
    cog-refresh: 
    cog-refresh-outline: 
    cog-stop: 虜
    cog-stop-outline: 路
    cog-sync: 
    cog-sync-outline: 
    cog-transfer: 
    cog-transfer-outline: 
    cogs: 
    collage: 
    collapse-all: 
    collapse-all-outline: 
    color-helper: 
    comma: 
    comma-box: 
    comma-box-outline: 
    comma-circle: 
    comma-circle-outline: 
    comment: 
    comment-account: 
    comment-account-outline: 
    comment-alert: 
    comment-alert-outline: 
    comment-arrow-left: 
    comment-arrow-left-outline: 
    comment-arrow-right: 
    comment-arrow-right-outline: 
    comment-bookmark: 
    comment-bookmark-outline: 
    comment-check: 
    comment-check-outline: 
    comment-edit: 
    comment-edit-outline: 
    comment-eye: 
    comment-eye-outline: 
    comment-flash: 
    comment-flash-outline: 
    comment-minus: 
    comment-minus-outline: 
    comment-multiple: 
    comment-multiple-outline: 
    comment-off: 
    comment-off-outline: 
    comment-outline: 
    comment-plus: 
    comment-plus-outline: 
    comment-processing: 
    comment-processing-outline: 
    comment-question: 
    comment-question-outline: 
    comment-quote: 
    comment-quote-outline: 
    comment-remove: 
    comment-remove-outline: 
    comment-search: 
    comment-search-outline: 
    comment-text: 
    comment-text-multiple: 
    comment-text-multiple-outline: 
    comment-text-outline: 
    compare: 
    compare-horizontal: 
    compare-remove: 
    compare-vertical: 
    compass: 
    compass-off: 
    compass-off-outline: 
    compass-outline: 
    compass-rose: 
    compost: 嘆
    cone: 屢
    cone-off: 樓
    connection: 
    console: 
    console-line: 
    console-network: 
    console-network-outline: 
    consolidate: 
    contactless-payment: 
    contactless-payment-circle: 
    contactless-payment-circle-outline: 
    contacts: 
    contacts-outline: 
    contain: 
    contain-end: 
    contain-start: 
    content-copy: 
    content-cut: 
    content-duplicate: 
    content-paste: 
    content-save: 
    content-save-alert: 
    content-save-alert-outline: 
    content-save-all: 
    content-save-all-outline: 
    content-save-check: 
    content-save-check-outline: 
    content-save-cog: 
    content-save-cog-outline: 
    content-save-edit: 
    content-save-edit-outline: 
    content-save-move: 
    content-save-move-outline: 
    content-save-off: 
    content-save-off-outline: 
    content-save-outline: 
    content-save-settings: 
    content-save-settings-outline: 
    contrast: 
    contrast-box: 
    contrast-circle: 
    controller-classic: 
    controller-classic-outline: 
    cookie: 
    cookie-alert: 
    cookie-alert-outline: 
    cookie-check: 
    cookie-check-outline: 
    cookie-clock: 
    cookie-clock-outline: 
    cookie-cog: 
    cookie-cog-outline: 
    cookie-edit: 
    cookie-edit-outline: 
    cookie-lock: 
    cookie-lock-outline: 
    cookie-minus: 
    cookie-minus-outline: 
    cookie-off: 
    cookie-off-outline: 
    cookie-outline: 
    cookie-plus: 
    cookie-plus-outline: 
    cookie-refresh: 
    cookie-refresh-outline: 
    cookie-remove: 
    cookie-remove-outline: 
    cookie-settings: 
    cookie-settings-outline: 
    coolant-temperature: 
    copyleft: 露
    copyright: 
    cordova: 
    corn: 
    corn-off: 
    cosine-wave: 
    counter: 
    countertop: 
    countertop-outline: 
    cow: 
    cow-off: 
    cpu-32-bit: 
    cpu-64-bit: 
    cradle: 力
    cradle-outline: 戀
    crane: 
    creation: 
    creative-commons: 
    credit-card: 
    credit-card-check: 
    credit-card-check-outline: 
    credit-card-chip: 癩
    credit-card-chip-outline: 羅
    credit-card-clock: 
    credit-card-clock-outline: 
    credit-card-edit: 
    credit-card-edit-outline: 
    credit-card-fast: 蘿
    credit-card-fast-outline: 螺
    credit-card-lock: 
    credit-card-lock-outline: 
    credit-card-marker: 
    credit-card-marker-outline: 
    credit-card-minus: 
    credit-card-minus-outline: 
    credit-card-multiple: 
    credit-card-multiple-outline: 
    credit-card-off: 
    credit-card-off-outline: 
    credit-card-outline: 
    credit-card-plus: 
    credit-card-plus-outline: 
    credit-card-refresh: 
    credit-card-refresh-outline: 
    credit-card-refund: 
    credit-card-refund-outline: 
    credit-card-remove: 
    credit-card-remove-outline: 
    credit-card-scan: 
    credit-card-scan-outline: 
    credit-card-search: 
    credit-card-search-outline: 
    credit-card-settings: 
    credit-card-settings-outline: 
    credit-card-sync: 
    credit-card-sync-outline: 
    credit-card-wireless: 
    credit-card-wireless-off: 
    credit-card-wireless-off-outline: 
    credit-card-wireless-outline: 
    cricket: 
    crop: 
    crop-free: 
    crop-landscape: 
    crop-portrait: 
    crop-rotate: 
    crop-square: 
    cross: 
    cross-bolnisi: 
    cross-celtic: 
    cross-outline: 
    crosshairs: 
    crosshairs-gps: 
    crosshairs-off: 
    crosshairs-question: 
    crowd: 若
    crown: 
    crown-circle: 
    crown-circle-outline: 
    crown-outline: 
    cryengine: 
    crystal-ball: 
    cube: 
    cube-off: 
    cube-off-outline: 
    cube-outline: 
    cube-scan: 
    cube-send: 
    cube-unfolded: 
    cup: 
    cup-off: 
    cup-off-outline: 
    cup-outline: 
    cup-water: 
    cupboard: 
    cupboard-outline: 
    cupcake: 
    curling: 
    currency-bdt: 
    currency-brl: 
    currency-btc: 
    currency-cny: 
    currency-eth: 
    currency-eur: 
    currency-eur-off: 
    currency-fra: 器
    currency-gbp: 
    currency-ils: 
    currency-inr: 
    currency-jpy: 
    currency-krw: 
    currency-kzt: 
    currency-mnt: 
    currency-ngn: 
    currency-php: 
    currency-rial: 
    currency-rub: 
    currency-rupee: 掠
    currency-sign: 
    currency-try: 
    currency-twd: 
    currency-usd: 
    currency-usd-off: 
    current-ac: 
    current-dc: 
    cursor-default: 
    cursor-default-click: 
    cursor-default-click-outline: 
    cursor-default-gesture: 
    cursor-default-gesture-outline: 
    cursor-default-outline: 
    cursor-move: 
    cursor-pointer: 
    cursor-text: 
    curtains: 
    curtains-closed: 
    cylinder: 淚
    cylinder-off: 漏
    dance-ballroom: 
    dance-pole: 
    data-matrix: 
    data-matrix-edit: 
    data-matrix-minus: 
    data-matrix-plus: 
    data-matrix-remove: 
    data-matrix-scan: 
    database: 
    database-alert: 
    database-alert-outline: 
    database-arrow-down: 
    database-arrow-down-outline: 
    database-arrow-left: 
    database-arrow-left-outline: 
    database-arrow-right: 
    database-arrow-right-outline: 
    database-arrow-up: 
    database-arrow-up-outline: 
    database-check: 
    database-check-outline: 
    database-clock: 
    database-clock-outline: 
    database-cog: 
    database-cog-outline: 
    database-edit: 
    database-edit-outline: 
    database-export: 
    database-export-outline: 
    database-eye: 爛
    database-eye-off: 蘭
    database-eye-off-outline: 鸞
    database-eye-outline: 嵐
    database-import: 
    database-import-outline: 
    database-lock: 
    database-lock-outline: 
    database-marker: 
    database-marker-outline: 
    database-minus: 
    database-minus-outline: 
    database-off: 
    database-off-outline: 
    database-outline: 
    database-plus: 
    database-plus-outline: 
    database-refresh: 
    database-refresh-outline: 
    database-remove: 
    database-remove-outline: 
    database-search: 
    database-search-outline: 
    database-settings: 
    database-settings-outline: 
    database-sync: 
    database-sync-outline: 
    death-star: 
    death-star-variant: 
    deathly-hallows: 
    debian: 
    debug-step-into: 
    debug-step-out: 
    debug-step-over: 
    decagram: 
    decagram-outline: 
    decimal: 
    decimal-comma: 
    decimal-comma-decrease: 
    decimal-comma-increase: 
    decimal-decrease: 
    decimal-increase: 
    delete: 
    delete-alert: 
    delete-alert-outline: 
    delete-circle: 
    delete-circle-outline: 
    delete-clock: 
    delete-clock-outline: 
    delete-empty: 
    delete-empty-outline: 
    delete-forever: 
    delete-forever-outline: 
    delete-off: 
    delete-off-outline: 
    delete-outline: 
    delete-restore: 
    delete-sweep: 
    delete-sweep-outline: 
    delete-variant: 
    delta: 
    desk: 
    desk-lamp: 
    deskphone: 
    desktop-classic: 
    desktop-mac: 
    desktop-mac-dashboard: 
    desktop-tower: 
    desktop-tower-monitor: 
    details: 
    dev-to: 
    developer-board: 
    deviantart: 
    devices: 
    dharmachakra: 
    diabetes: 
    dialpad: 
    diameter: 
    diameter-outline: 
    diameter-variant: 
    diamond: 
    diamond-outline: 
    diamond-stone: 
    dice-1: 
    dice-1-outline: 
    dice-2: 
    dice-2-outline: 
    dice-3: 
    dice-3-outline: 
    dice-4: 
    dice-4-outline: 
    dice-5: 
    dice-5-outline: 
    dice-6: 
    dice-6-outline: 
    dice-d10: 
    dice-d10-outline: 
    dice-d12: 
    dice-d12-outline: 
    dice-d20: 
    dice-d20-outline: 
    dice-d4: 
    dice-d4-outline: 
    dice-d6: 
    dice-d6-outline: 
    dice-d8: 
    dice-d8-outline: 
    dice-multiple: 
    dice-multiple-outline: 
    digital-ocean: 
    dip-switch: 
    directions: 
    directions-fork: 
    disc: 
    disc-alert: 
    disc-player: 
    discord: 
    dishwasher: 
    dishwasher-alert: 
    dishwasher-off: 
    disqus: 
    distribute-horizontal-center: 
    distribute-horizontal-left: 
    distribute-horizontal-right: 
    distribute-vertical-bottom: 
    distribute-vertical-center: 
    distribute-vertical-top: 
    diversify: 
    diving: 略
    diving-flippers: 
    diving-helmet: 
    diving-scuba: 
    diving-scuba-flag: 
    diving-scuba-tank: 
    diving-scuba-tank-multiple: 
    diving-snorkel: 
    division: 
    division-box: 
    dlna: 
    dna: 
    dns: 
    dns-outline: 
    dock-bottom: 
    dock-left: 
    dock-right: 
    dock-top: 
    dock-window: 
    docker: 
    doctor: 
    dog: 
    dog-service: 
    dog-side: 
    dog-side-off: 
    dolby: 
    dolly: 
    dolphin: 
    domain: 
    domain-off: 
    domain-plus: 
    domain-remove: 
    dome-light: 
    domino-mask: 
    donkey: 
    door: 
    door-closed: 
    door-closed-lock: 
    door-open: 
    door-sliding: 
    door-sliding-lock: 
    door-sliding-open: 
    doorbell: 
    doorbell-video: 
    dot-net: 
    dots-circle: 亮
    dots-grid: 
    dots-hexagon: 
    dots-horizontal: 
    dots-horizontal-circle: 
    dots-horizontal-circle-outline: 
    dots-square: 
    dots-triangle: 
    dots-vertical: 
    dots-vertical-circle: 
    dots-vertical-circle-outline: 
    download: 
    download-box: 
    download-box-outline: 
    download-circle: 
    download-circle-outline: 
    download-lock: 
    download-lock-outline: 
    download-multiple: 
    download-network: 
    download-network-outline: 
    download-off: 
    download-off-outline: 
    download-outline: 
    drag: 
    drag-horizontal: 
    drag-horizontal-variant: 
    drag-variant: 
    drag-vertical: 
    drag-vertical-variant: 
    drama-masks: 
    draw: 
    draw-pen: 隸
    drawing: 
    drawing-box: 
    dresser: 
    dresser-outline: 
    drone: 
    dropbox: 
    drupal: 
    duck: 
    dumbbell: 
    dump-truck: 
    ear-hearing: 
    ear-hearing-loop: 﫭
    ear-hearing-off: 
    earbuds: 
    earbuds-off: 
    earbuds-off-outline: 
    earbuds-outline: 
    earth: 
    earth-arrow-right: 
    earth-box: 
    earth-box-minus: 
    earth-box-off: 
    earth-box-plus: 
    earth-box-remove: 
    earth-minus: 
    earth-off: 
    earth-plus: 
    earth-remove: 
    egg: 
    egg-easter: 
    egg-fried: 
    egg-off: 
    egg-off-outline: 
    egg-outline: 
    eiffel-tower: 
    eight-track: 
    eject: 
    eject-outline: 
    electric-switch: 
    electric-switch-closed: 
    electron-framework: 
    elephant: 
    elevation-decline: 
    elevation-rise: 
    elevator: 
    elevator-down: 
    elevator-passenger: 
    elevator-passenger-off: 兩
    elevator-passenger-off-outline: 凉
    elevator-passenger-outline: 梁
    elevator-up: 
    ellipse: 
    ellipse-outline: 
    email: 
    email-alert: 
    email-alert-outline: 
    email-box: 
    email-check: 
    email-check-outline: 
    email-edit: 
    email-edit-outline: 
    email-fast: 
    email-fast-outline: 
    email-lock: 
    email-mark-as-unread: 
    email-minus: 
    email-minus-outline: 
    email-multiple: 
    email-multiple-outline: 
    email-newsletter: 
    email-off: 
    email-off-outline: 
    email-open: 
    email-open-multiple: 
    email-open-multiple-outline: 
    email-open-outline: 
    email-outline: 
    email-plus: 
    email-plus-outline: 
    email-receive: 
    email-receive-outline: 
    email-remove: 
    email-remove-outline: 
    email-seal: 讀
    email-seal-outline: 拏
    email-search: 
    email-search-outline: 
    email-send: 
    email-send-outline: 
    email-sync: 
    email-sync-outline: 
    email-variant: 
    ember: 
    emby: 
    emoticon: 
    emoticon-angry: 
    emoticon-angry-outline: 
    emoticon-confused: 
    emoticon-confused-outline: 
    emoticon-cool: 
    emoticon-cool-outline: 
    emoticon-cry: 
    emoticon-cry-outline: 
    emoticon-dead: 
    emoticon-dead-outline: 
    emoticon-devil: 
    emoticon-devil-outline: 
    emoticon-excited: 
    emoticon-excited-outline: 
    emoticon-frown: 
    emoticon-frown-outline: 
    emoticon-happy: 
    emoticon-happy-outline: 
    emoticon-kiss: 
    emoticon-kiss-outline: 
    emoticon-lol: 
    emoticon-lol-outline: 
    emoticon-neutral: 
    emoticon-neutral-outline: 
    emoticon-outline: 
    emoticon-poop: 
    emoticon-poop-outline: 
    emoticon-sad: 
    emoticon-sad-outline: 
    emoticon-sick: 
    emoticon-sick-outline: 
    emoticon-tongue: 
    emoticon-tongue-outline: 
    emoticon-wink: 
    emoticon-wink-outline: 
    engine: 
    engine-off: 
    engine-off-outline: 
    engine-outline: 
    epsilon: 
    equal: 
    equal-box: 
    equalizer: 
    equalizer-outline: 
    eraser: 
    eraser-variant: 
    escalator: 
    escalator-box: 
    escalator-down: 
    escalator-up: 
    eslint: 
    et: 
    ethereum: 
    ethernet: 
    ethernet-cable: 
    ethernet-cable-off: 
    ev-plug-ccs1: 
    ev-plug-ccs2: 
    ev-plug-chademo: 
    ev-plug-tesla: 
    ev-plug-type1: 
    ev-plug-type2: 
    ev-station: 
    evernote: 
    excavator: 
    exclamation: 
    exclamation-thick: 
    exit-run: 
    exit-to-app: 
    expand-all: 
    expand-all-outline: 
    expansion-card: 
    expansion-card-variant: 
    exponent: 
    exponent-box: 
    export: 
    export-variant: 
    eye: 
    eye-arrow-left: 
    eye-arrow-left-outline: 
    eye-arrow-right: 
    eye-arrow-right-outline: 
    eye-check: 
    eye-check-outline: 
    eye-circle: 
    eye-circle-outline: 
    eye-minus: 
    eye-minus-outline: 
    eye-off: 
    eye-off-outline: 
    eye-outline: 
    eye-plus: 
    eye-plus-outline: 
    eye-refresh: 糧
    eye-refresh-outline: 良
    eye-remove: 
    eye-remove-outline: 
    eye-settings: 
    eye-settings-outline: 
    eyedropper: 
    eyedropper-minus: 
    eyedropper-off: 
    eyedropper-plus: 
    eyedropper-remove: 
    eyedropper-variant: 
    face-agent: 
    face-man: 
    face-man-outline: 
    face-man-profile: 
    face-man-shimmer: 
    face-man-shimmer-outline: 
    face-mask: 
    face-mask-outline: 
    face-recognition: 
    face-woman: 
    face-woman-outline: 
    face-woman-profile: 
    face-woman-shimmer: 
    face-woman-shimmer-outline: 
    facebook: 
    facebook-gaming: 
    facebook-messenger: 
    facebook-workplace: 
    factory: 
    family-tree: 
    fan: 
    fan-alert: 
    fan-auto: 
    fan-chevron-down: 
    fan-chevron-up: 
    fan-clock: 塀
    fan-minus: 
    fan-off: 
    fan-plus: 
    fan-remove: 
    fan-speed-1: 
    fan-speed-2: 
    fan-speed-3: 
    fast-forward: 
    fast-forward-10: 
    fast-forward-15: 魯
    fast-forward-30: 
    fast-forward-5: 
    fast-forward-60: 
    fast-forward-outline: 
    fax: 
    feather: 
    feature-search: 
    feature-search-outline: 
    fedora: 
    fence: 
    fence-electric: 
    fencing: 
    ferris-wheel: 
    ferry: 
    file: 
    file-account: 
    file-account-outline: 
    file-alert: 
    file-alert-outline: 
    file-arrow-left-right: 朗
    file-arrow-left-right-outline: 望
    file-arrow-up-down: 杖
    file-arrow-up-down-outline: 歹
    file-cabinet: 
    file-cad: 
    file-cad-box: 
    file-cancel: 
    file-cancel-outline: 
    file-certificate: 
    file-certificate-outline: 
    file-chart: 
    file-chart-check: 暈
    file-chart-check-outline: 阮
    file-chart-outline: 
    file-check: 
    file-check-outline: 
    file-clock: 
    file-clock-outline: 
    file-cloud: 
    file-cloud-outline: 
    file-code: 
    file-code-outline: 
    file-cog: 
    file-cog-outline: 
    file-compare: 
    file-delimited: 
    file-delimited-outline: 
    file-document: 
    file-document-alert: 殺
    file-document-alert-outline: 流
    file-document-check: 滛
    file-document-check-outline: 滋
    file-document-edit: 
    file-document-edit-outline: 
    file-document-minus: 漢
    file-document-minus-outline: 瀞
    file-document-multiple: 
    file-document-multiple-outline: 
    file-document-outline: 
    file-document-plus: 煮
    file-document-plus-outline: 瞧
    file-document-remove: 爵
    file-document-remove-outline: 犯
    file-download: 
    file-download-outline: 
    file-edit: 
    file-edit-outline: 
    file-excel: 
    file-excel-box: 
    file-excel-box-outline: 
    file-excel-outline: 
    file-export: 
    file-export-outline: 
    file-eye: 
    file-eye-outline: 
    file-find: 
    file-find-outline: 
    file-gif-box: 
    file-hidden: 
    file-image: 
    file-image-marker: 
    file-image-marker-outline: 
    file-image-minus: 鷺
    file-image-minus-outline: 碌
    file-image-outline: 
    file-image-plus: 祿
    file-image-plus-outline: 綠
    file-image-remove: 菉
    file-image-remove-outline: 錄
    file-import: 
    file-import-outline: 
    file-jpg-box: 
    file-key: 
    file-key-outline: 
    file-link: 
    file-link-outline: 
    file-lock: 
    file-lock-open: 劉
    file-lock-open-outline: 杻
    file-lock-outline: 
    file-marker: 
    file-marker-outline: 
    file-minus: 猪
    file-minus-outline: 瑱
    file-move: 
    file-move-outline: 
    file-multiple: 
    file-multiple-outline: 
    file-music: 
    file-music-outline: 
    file-outline: 
    file-pdf-box: 
    file-percent: 
    file-percent-outline: 
    file-phone: 
    file-phone-outline: 
    file-plus: 
    file-plus-outline: 
    file-png-box: 
    file-powerpoint: 
    file-powerpoint-box: 
    file-powerpoint-box-outline: 
    file-powerpoint-outline: 
    file-presentation-box: 
    file-question: 
    file-question-outline: 
    file-refresh: 
    file-refresh-outline: 
    file-remove: 
    file-remove-outline: 
    file-replace: 
    file-replace-outline: 
    file-restore: 
    file-restore-outline: 
    file-rotate-left: 墨
    file-rotate-left-outline: 層
    file-rotate-right: 屮
    file-rotate-right-outline: 悔
    file-search: 
    file-search-outline: 
    file-send: 
    file-send-outline: 
    file-settings: 
    file-settings-outline: 
    file-sign: 蓼
    file-star: 
    file-star-outline: 
    file-swap: 
    file-swap-outline: 
    file-sync: 
    file-sync-outline: 
    file-table: 
    file-table-box: 
    file-table-box-multiple: 
    file-table-box-multiple-outline: 
    file-table-box-outline: 
    file-table-outline: 
    file-tree: 
    file-tree-outline: 
    file-undo: 
    file-undo-outline: 
    file-upload: 
    file-upload-outline: 
    file-video: 
    file-video-outline: 
    file-word: 
    file-word-box: 
    file-word-box-outline: 
    file-word-outline: 
    film: 
    filmstrip: 
    filmstrip-box: 
    filmstrip-box-multiple: 
    filmstrip-off: 
    filter: 
    filter-check: 
    filter-check-outline: 
    filter-cog: 甆
    filter-cog-outline: 画
    filter-menu: 
    filter-menu-outline: 
    filter-minus: 
    filter-minus-outline: 
    filter-multiple: 慨
    filter-multiple-outline: 憎
    filter-off: 
    filter-off-outline: 
    filter-outline: 
    filter-plus: 
    filter-plus-outline: 
    filter-remove: 
    filter-remove-outline: 
    filter-settings: 瘝
    filter-settings-outline: 瘟
    filter-variant: 
    filter-variant-minus: 
    filter-variant-plus: 
    filter-variant-remove: 
    finance: 
    find-replace: 
    fingerprint: 
    fingerprint-off: 
    fire: 
    fire-alert: 
    fire-circle: 
    fire-extinguisher: 
    fire-hydrant: 
    fire-hydrant-alert: 
    fire-hydrant-off: 
    fire-off: 
    fire-truck: 
    firebase: 
    firefox: 
    fireplace: 
    fireplace-off: 
    firewire: 
    firework: 
    firework-off: 
    fish: 
    fish-off: 
    fishbowl: 
    fishbowl-outline: 
    fit-to-page: 
    fit-to-page-outline: 
    fit-to-screen: 
    fit-to-screen-outline: 
    flag: 
    flag-checkered: 
    flag-minus: 
    flag-minus-outline: 
    flag-off: 
    flag-off-outline: 
    flag-outline: 
    flag-plus: 
    flag-plus-outline: 
    flag-remove: 
    flag-remove-outline: 
    flag-triangle: 
    flag-variant: 
    flag-variant-outline: 
    flare: 
    flash: 
    flash-alert: 
    flash-alert-outline: 
    flash-auto: 
    flash-off: 
    flash-outline: 
    flash-red-eye: 
    flashlight: 
    flashlight-off: 
    flask: 
    flask-empty: 
    flask-empty-minus: 
    flask-empty-minus-outline: 
    flask-empty-off: 
    flask-empty-off-outline: 
    flask-empty-outline: 
    flask-empty-plus: 
    flask-empty-plus-outline: 
    flask-empty-remove: 
    flask-empty-remove-outline: 
    flask-minus: 
    flask-minus-outline: 
    flask-off: 
    flask-off-outline: 
    flask-outline: 
    flask-plus: 
    flask-plus-outline: 
    flask-remove: 
    flask-remove-outline: 
    flask-round-bottom: 
    flask-round-bottom-empty: 
    flask-round-bottom-empty-outline: 
    flask-round-bottom-outline: 
    fleur-de-lis: 
    flip-horizontal: 
    flip-to-back: 
    flip-to-front: 
    flip-vertical: 
    floor-lamp: 
    floor-lamp-dual: 
    floor-lamp-dual-outline: 
    floor-lamp-outline: 
    floor-lamp-torchiere: 
    floor-lamp-torchiere-outline: 
    floor-lamp-torchiere-variant: 
    floor-lamp-torchiere-variant-outline: 
    floor-plan: 
    floppy: 
    floppy-variant: 
    flower: 
    flower-outline: 
    flower-pollen: 
    flower-pollen-outline: 
    flower-poppy: 
    flower-tulip: 
    flower-tulip-outline: 
    focus-auto: 
    focus-field: 
    focus-field-horizontal: 
    focus-field-vertical: 
    folder: 
    folder-account: 
    folder-account-outline: 
    folder-alert: 
    folder-alert-outline: 
    folder-arrow-down: 裏
    folder-arrow-down-outline: 裡
    folder-arrow-left: 里
    folder-arrow-left-outline: 離
    folder-arrow-left-right: 匿
    folder-arrow-left-right-outline: 溺
    folder-arrow-right: 吝
    folder-arrow-right-outline: 燐
    folder-arrow-up: 璘
    folder-arrow-up-down: 藺
    folder-arrow-up-down-outline: 隣
    folder-arrow-up-outline: 鱗
    folder-cancel: 麟
    folder-cancel-outline: 林
    folder-check: 諒
    folder-check-outline: 量
    folder-clock: 
    folder-clock-outline: 
    folder-cog: 
    folder-cog-outline: 
    folder-download: 
    folder-download-outline: 
    folder-edit: 
    folder-edit-outline: 
    folder-eye: 
    folder-eye-outline: 
    folder-file: 淋
    folder-file-outline: 臨
    folder-google-drive: 
    folder-heart: 
    folder-heart-outline: 
    folder-hidden: 
    folder-home: 
    folder-home-outline: 
    folder-image: 
    folder-information: 
    folder-information-outline: 
    folder-key: 
    folder-key-network: 
    folder-key-network-outline: 
    folder-key-outline: 
    folder-lock: 
    folder-lock-open: 
    folder-lock-open-outline: 益
    folder-lock-outline: 盛
    folder-marker: 
    folder-marker-outline: 
    folder-move: 
    folder-move-outline: 
    folder-multiple: 
    folder-multiple-image: 
    folder-multiple-outline: 
    folder-multiple-plus: 
    folder-multiple-plus-outline: 
    folder-music: 
    folder-music-outline: 
    folder-network: 
    folder-network-outline: 
    folder-off: 立
    folder-off-outline: 笠
    folder-open: 
    folder-open-outline: 
    folder-outline: 
    folder-play: 粒
    folder-play-outline: 狀
    folder-plus: 
    folder-plus-outline: 
    folder-pound: 
    folder-pound-outline: 
    folder-question: 柳
    folder-question-outline: 流
    folder-refresh: 
    folder-refresh-outline: 
    folder-remove: 
    folder-remove-outline: 
    folder-search: 
    folder-search-outline: 
    folder-settings: 
    folder-settings-outline: 
    folder-star: 
    folder-star-multiple: 
    folder-star-multiple-outline: 
    folder-star-outline: 
    folder-swap: 
    folder-swap-outline: 
    folder-sync: 
    folder-sync-outline: 
    folder-table: 
    folder-table-outline: 
    folder-text: 
    folder-text-outline: 
    folder-upload: 
    folder-upload-outline: 
    folder-wrench: 炙
    folder-wrench-outline: 識
    folder-zip: 
    folder-zip-outline: 
    font-awesome: 
    food: 
    food-apple: 
    food-apple-outline: 
    food-croissant: 
    food-drumstick: 
    food-drumstick-off: 
    food-drumstick-off-outline: 
    food-drumstick-outline: 
    food-fork-drink: 
    food-halal: 
    food-hot-dog: 
    food-kosher: 
    food-off: 
    food-off-outline: 樂
    food-outline: 洛
    food-steak: 
    food-steak-off: 
    food-takeout-box: 
    food-takeout-box-outline: 
    food-turkey: 
    food-variant: 
    food-variant-off: 
    foot-print: 
    football: 
    football-australian: 
    football-helmet: 
    forest: 
    forklift: 
    form-dropdown: 
    form-select: 
    form-textarea: 
    form-textbox: 
    form-textbox-lock: 
    form-textbox-password: 
    format-align-bottom: 
    format-align-center: 
    format-align-justify: 
    format-align-left: 
    format-align-middle: 
    format-align-right: 
    format-align-top: 
    format-annotation-minus: 
    format-annotation-plus: 
    format-bold: 
    format-clear: 
    format-color-fill: 
    format-color-highlight: 
    format-color-marker-cancel: 
    format-color-text: 
    format-columns: 
    format-float-center: 
    format-float-left: 
    format-float-none: 
    format-float-right: 
    format-font: 
    format-font-size-decrease: 
    format-font-size-increase: 
    format-header-1: 
    format-header-2: 
    format-header-3: 
    format-header-4: 
    format-header-5: 
    format-header-6: 
    format-header-decrease: 
    format-header-equal: 
    format-header-increase: 
    format-header-pound: 
    format-horizontal-align-center: 
    format-horizontal-align-left: 
    format-horizontal-align-right: 
    format-indent-decrease: 
    format-indent-increase: 
    format-italic: 
    format-letter-case: 
    format-letter-case-lower: 
    format-letter-case-upper: 
    format-letter-ends-with: 
    format-letter-matches: 
    format-letter-spacing: 凌
    format-letter-starts-with: 
    format-line-spacing: 
    format-line-style: 
    format-line-weight: 
    format-list-bulleted: 
    format-list-bulleted-square: 
    format-list-bulleted-triangle: 
    format-list-bulleted-type: 
    format-list-checkbox: 
    format-list-checks: 
    format-list-group: 
    format-list-numbered: 
    format-list-numbered-rtl: 
    format-list-text: 
    format-overline: 
    format-page-break: 
    format-page-split: 烙
    format-paint: 
    format-paragraph: 
    format-pilcrow: 
    format-quote-close: 
    format-quote-close-outline: 
    format-quote-open: 
    format-quote-open-outline: 
    format-rotate-90: 
    format-section: 
    format-size: 
    format-strikethrough: 
    format-strikethrough-variant: 
    format-subscript: 
    format-superscript: 
    format-text: 
    format-text-rotation-angle-down: 
    format-text-rotation-angle-up: 
    format-text-rotation-down: 
    format-text-rotation-down-vertical: 
    format-text-rotation-none: 
    format-text-rotation-up: 
    format-text-rotation-vertical: 
    format-text-variant: 
    format-text-variant-outline: 
    format-text-wrapping-clip: 
    format-text-wrapping-overflow: 
    format-text-wrapping-wrap: 
    format-textbox: 
    format-textdirection-l-to-r: 
    format-textdirection-r-to-l: 
    format-title: 
    format-underline: 
    format-underline-wavy: 
    format-vertical-align-bottom: 
    format-vertical-align-center: 
    format-vertical-align-top: 
    format-wrap-inline: 
    format-wrap-square: 
    format-wrap-tight: 
    format-wrap-top-bottom: 
    forum: 
    forum-minus: 直
    forum-minus-outline: 睊
    forum-outline: 
    forum-plus: 着
    forum-plus-outline: 磌
    forum-remove: 窱
    forum-remove-outline: 節
    forward: 
    forwardburger: 
    fountain: 
    fountain-pen: 
    fountain-pen-tip: 
    fraction-one-half: 撚
    freebsd: 
    french-fries: 稜
    frequently-asked-questions: 
    fridge: 
    fridge-alert: 
    fridge-alert-outline: 
    fridge-bottom: 
    fridge-industrial: 
    fridge-industrial-alert: 
    fridge-industrial-alert-outline: 
    fridge-industrial-off: 
    fridge-industrial-off-outline: 
    fridge-industrial-outline: 
    fridge-off: 
    fridge-off-outline: 
    fridge-outline: 
    fridge-top: 
    fridge-variant: 
    fridge-variant-alert: 
    fridge-variant-alert-outline: 
    fridge-variant-off: 
    fridge-variant-off-outline: 
    fridge-variant-outline: 
    fruit-cherries: 
    fruit-cherries-off: 
    fruit-citrus: 
    fruit-citrus-off: 
    fruit-grapes: 
    fruit-grapes-outline: 
    fruit-pear: 嗀
    fruit-pineapple: 
    fruit-watermelon: 
    fuel: 
    fuel-cell: 
    fullscreen: 
    fullscreen-exit: 
    function: 
    function-variant: 
    furigana-horizontal: 
    furigana-vertical: 
    fuse: 
    fuse-alert: 
    fuse-blade: 
    fuse-off: 
    gamepad: 
    gamepad-circle: 
    gamepad-circle-down: 
    gamepad-circle-left: 
    gamepad-circle-outline: 
    gamepad-circle-right: 
    gamepad-circle-up: 
    gamepad-down: 
    gamepad-left: 
    gamepad-outline: 落
    gamepad-right: 
    gamepad-round: 
    gamepad-round-down: 
    gamepad-round-left: 
    gamepad-round-outline: 
    gamepad-round-right: 
    gamepad-round-up: 
    gamepad-square: 
    gamepad-square-outline: 
    gamepad-up: 
    gamepad-variant: 
    gamepad-variant-outline: 
    gamma: 
    gantry-crane: 
    garage: 
    garage-alert: 
    garage-alert-variant: 
    garage-lock: 
    garage-open: 
    garage-open-variant: 
    garage-variant: 
    garage-variant-lock: 
    gas-burner: 祥
    gas-cylinder: 
    gas-station: 
    gas-station-off: 
    gas-station-off-outline: 
    gas-station-outline: 
    gate: 
    gate-alert: 
    gate-and: 
    gate-arrow-left: 
    gate-arrow-right: 
    gate-nand: 
    gate-nor: 
    gate-not: 
    gate-open: 
    gate-or: 
    gate-xnor: 
    gate-xor: 
    gatsby: 
    gauge: 
    gauge-empty: 
    gauge-full: 
    gauge-low: 
    gavel: 
    gender-female: 
    gender-male: 
    gender-male-female: 
    gender-male-female-variant: 
    gender-non-binary: 
    gender-transgender: 
    gentoo: 
    gesture: 
    gesture-double-tap: 
    gesture-pinch: 
    gesture-spread: 
    gesture-swipe: 
    gesture-swipe-down: 
    gesture-swipe-horizontal: 
    gesture-swipe-left: 
    gesture-swipe-right: 
    gesture-swipe-up: 
    gesture-swipe-vertical: 
    gesture-tap: 
    gesture-tap-box: 
    gesture-tap-button: 
    gesture-tap-hold: 
    gesture-two-double-tap: 
    gesture-two-tap: 
    ghost: 
    ghost-off: 
    ghost-off-outline: 
    ghost-outline: 
    gift: 
    gift-off: 
    gift-off-outline: 
    gift-open: 
    gift-open-outline: 
    gift-outline: 
    git: 
    github: 
    gitlab: 
    glass-cocktail: 
    glass-cocktail-off: 
    glass-flute: 
    glass-fragile: 
    glass-mug: 
    glass-mug-off: 
    glass-mug-variant: 
    glass-mug-variant-off: 
    glass-pint-outline: 
    glass-stange: 
    glass-tulip: 
    glass-wine: 
    glasses: 
    globe-light: 
    globe-model: 
    gmail: 
    gnome: 
    go-kart: 
    go-kart-track: 
    gog: 
    gold: 
    golf: 
    golf-cart: 
    golf-tee: 
    gondola: 
    goodreads: 
    google: 
    google-ads: 
    google-analytics: 
    google-assistant: 
    google-cardboard: 
    google-chrome: 
    google-circles: 
    google-circles-communities: 
    google-circles-extended: 
    google-circles-group: 
    google-classroom: 
    google-cloud: 
    google-controller: 
    google-controller-off: 
    google-downasaur: 
    google-drive: 
    google-earth: 
    google-fit: 
    google-glass: 
    google-hangouts: 
    google-home: 
    google-keep: 
    google-lens: 
    google-maps: 
    google-my-business: 
    google-nearby: 
    google-play: 
    google-plus: 
    google-podcast: 
    google-spreadsheet: 
    google-street-view: 
    google-translate: 
    gradient-horizontal: 
    gradient-vertical: 
    grain: 
    graph: 
    graph-outline: 
    graphql: 
    grass: 
    grave-stone: 
    grease-pencil: 
    greater-than: 
    greater-than-or-equal: 
    greenhouse: 
    grid: 
    grid-large: 
    grid-off: 
    grill: 
    grill-outline: 
    group: 
    guitar-acoustic: 
    guitar-electric: 
    guitar-pick: 
    guitar-pick-outline: 
    guy-fawkes-mask: 
    gymnastics: 懲
    hail: 
    hair-dryer: 
    hair-dryer-outline: 
    halloween: 
    hamburger: 
    hamburger-check: 
    hamburger-minus: 
    hamburger-off: 
    hamburger-plus: 
    hamburger-remove: 
    hammer: 
    hammer-screwdriver: 
    hammer-sickle: 
    hammer-wrench: 
    hand-back-left: 
    hand-back-left-off: 
    hand-back-left-off-outline: 
    hand-back-left-outline: 
    hand-back-right: 
    hand-back-right-off: 
    hand-back-right-off-outline: 
    hand-back-right-outline: 
    hand-clap: 壘
    hand-clap-off: 敏
    hand-coin: 
    hand-coin-outline: 
    hand-extended: 
    hand-extended-outline: 
    hand-front-left: 
    hand-front-left-outline: 
    hand-front-right: 
    hand-front-right-outline: 
    hand-heart: 
    hand-heart-outline: 
    hand-okay: 
    hand-peace: 
    hand-peace-variant: 
    hand-pointing-down: 
    hand-pointing-left: 
    hand-pointing-right: 
    hand-pointing-up: 
    hand-saw: 
    hand-wash: 
    hand-wash-outline: 
    hand-water: 
    hand-wave: 
    hand-wave-outline: 
    handball: 
    handcuffs: 
    hands-pray: 
    handshake: 
    handshake-outline: 
    hanger: 
    hard-hat: 
    harddisk: 
    harddisk-plus: 
    harddisk-remove: 
    hat-fedora: 
    hazard-lights: 
    hdr: 
    hdr-off: 
    head: 
    head-alert: 
    head-alert-outline: 
    head-check: 
    head-check-outline: 
    head-cog: 
    head-cog-outline: 
    head-dots-horizontal: 
    head-dots-horizontal-outline: 
    head-flash: 
    head-flash-outline: 
    head-heart: 
    head-heart-outline: 
    head-lightbulb: 
    head-lightbulb-outline: 
    head-minus: 
    head-minus-outline: 
    head-outline: 
    head-plus: 
    head-plus-outline: 
    head-question: 
    head-question-outline: 
    head-remove: 
    head-remove-outline: 
    head-snowflake: 
    head-snowflake-outline: 
    head-sync: 
    head-sync-outline: 
    headphones: 
    headphones-bluetooth: 
    headphones-box: 
    headphones-off: 
    headphones-settings: 
    headset: 
    headset-dock: 
    headset-off: 
    heart: 
    heart-box: 
    heart-box-outline: 
    heart-broken: 
    heart-broken-outline: 
    heart-circle: 
    heart-circle-outline: 
    heart-cog: 
    heart-cog-outline: 
    heart-flash: 
    heart-half: 
    heart-half-full: 
    heart-half-outline: 
    heart-minus: 
    heart-minus-outline: 
    heart-multiple: 
    heart-multiple-outline: 
    heart-off: 
    heart-off-outline: 
    heart-outline: 
    heart-plus: 
    heart-plus-outline: 
    heart-pulse: 
    heart-remove: 
    heart-remove-outline: 
    heart-settings: 
    heart-settings-outline: 
    heat-pump: 既
    heat-pump-outline: 暑
    heat-wave: 梅
    heating-coil: 类
    helicopter: 
    help: 
    help-box: 
    help-circle: 
    help-circle-outline: 
    help-network: 
    help-network-outline: 
    help-rhombus: 
    help-rhombus-outline: 
    hexadecimal: 
    hexagon: 
    hexagon-multiple: 
    hexagon-multiple-outline: 
    hexagon-outline: 
    hexagon-slice-1: 
    hexagon-slice-2: 
    hexagon-slice-3: 
    hexagon-slice-4: 
    hexagon-slice-5: 
    hexagon-slice-6: 
    hexagram: 
    hexagram-outline: 
    high-definition: 
    high-definition-box: 
    highway: 
    hiking: 
    history: 
    hockey-puck: 
    hockey-sticks: 
    hololens: 
    home: 
    home-account: 
    home-alert: 
    home-alert-outline: 
    home-analytics: 
    home-assistant: 
    home-automation: 
    home-battery: 豈
    home-battery-outline: 更
    home-circle: 
    home-circle-outline: 
    home-city: 
    home-city-outline: 
    home-clock: 﨑
    home-clock-outline: 晴
    home-edit: 
    home-edit-outline: 
    home-export-outline: 
    home-flood: 
    home-floor-0: 
    home-floor-1: 
    home-floor-2: 
    home-floor-3: 
    home-floor-a: 
    home-floor-b: 
    home-floor-g: 
    home-floor-l: 
    home-floor-negative-1: 
    home-group: 
    home-group-minus: 燎
    home-group-plus: 樂
    home-group-remove: 療
    home-heart: 
    home-import-outline: 
    home-lightbulb: 
    home-lightbulb-outline: 
    home-lightning-bolt: 車
    home-lightning-bolt-outline: 賈
    home-lock: 
    home-lock-open: 
    home-map-marker: 
    home-minus: 
    home-minus-outline: 
    home-modern: 
    home-off: 海
    home-off-outline: 渚
    home-outline: 
    home-plus: 
    home-plus-outline: 
    home-remove: 
    home-remove-outline: 
    home-roof: 
    home-search: 
    home-search-outline: 
    home-switch: 
    home-switch-outline: 
    home-thermometer: 
    home-thermometer-outline: 
    home-variant: 
    home-variant-outline: 
    hook: 
    hook-off: 
    hoop-house: 
    hops: 
    horizontal-rotate-clockwise: 
    horizontal-rotate-counterclockwise: 
    horse: 
    horse-human: 
    horse-variant: 
    horse-variant-fast: 
    horseshoe: 
    hospital: 
    hospital-box: 
    hospital-box-outline: 
    hospital-building: 
    hospital-marker: 
    hot-tub: 
    hours-24: 
    hubspot: 
    hulu: 
    human: 
    human-baby-changing-table: 
    human-cane: 
    human-capacity-decrease: 
    human-capacity-increase: 
    human-child: 
    human-dolly: 勵
    human-edit: 
    human-female: 
    human-female-boy: 
    human-female-dance: 
    human-female-female: 
    human-female-girl: 
    human-greeting: 
    human-greeting-proximity: 
    human-greeting-variant: 
    human-handsdown: 
    human-handsup: 
    human-male: 
    human-male-board: 
    human-male-board-poll: 
    human-male-boy: 
    human-male-child: 
    human-male-female: 
    human-male-female-child: 
    human-male-girl: 
    human-male-height: 
    human-male-height-variant: 
    human-male-male: 
    human-non-binary: 
    human-pregnant: 
    human-queue: 
    human-scooter: 
    human-wheelchair: 
    human-white-cane: 呂
    humble-bundle: 
    hvac: 
    hvac-off: 
    hydraulic-oil-level: 
    hydraulic-oil-temperature: 
    hydro-power: 
    hydrogen-station: 
    ice-cream: 
    ice-cream-off: 
    ice-pop: 
    id-card: 
    identifier: 
    ideogram-cjk: 
    ideogram-cjk-variant: 
    image: 
    image-album: 
    image-area: 
    image-area-close: 
    image-auto-adjust: 
    image-broken: 
    image-broken-variant: 
    image-edit: 
    image-edit-outline: 
    image-filter-black-white: 
    image-filter-center-focus: 
    image-filter-center-focus-strong: 
    image-filter-center-focus-strong-outline: 
    image-filter-center-focus-weak: 
    image-filter-drama: 
    image-filter-frames: 
    image-filter-hdr: 
    image-filter-none: 
    image-filter-tilt-shift: 
    image-filter-vintage: 
    image-frame: 
    image-lock: 絛
    image-lock-outline: 練
    image-marker: 
    image-marker-outline: 
    image-minus: 
    image-move: 
    image-multiple: 
    image-multiple-outline: 
    image-off: 
    image-off-outline: 
    image-outline: 
    image-plus: 
    image-refresh: 什
    image-refresh-outline: 茶
    image-remove: 
    image-search: 
    image-search-outline: 
    image-size-select-actual: 
    image-size-select-large: 
    image-size-select-small: 
    image-sync: 刺
    image-sync-outline: 切
    image-text: 
    import: 
    inbox: 
    inbox-arrow-down: 
    inbox-arrow-down-outline: 
    inbox-arrow-up: 
    inbox-arrow-up-outline: 
    inbox-full: 
    inbox-full-outline: 
    inbox-multiple: 
    inbox-multiple-outline: 
    inbox-outline: 
    inbox-remove: 
    inbox-remove-outline: 
    incognito: 
    incognito-circle: 
    incognito-circle-off: 
    incognito-off: 
    induction: 
    infinity: 
    information: 
    information-off: 
    information-off-outline: 
    information-outline: 
    information-variant: 
    instagram: 
    instrument-triangle: 
    integrated-circuit-chip: 裸
    invert-colors: 
    invert-colors-off: 
    iobroker: 
    ip: 
    ip-network: 
    ip-network-outline: 
    ip-outline: 女
    ipod: 
    iron: 
    iron-board: 
    iron-outline: 
    island: 
    iv-bag: 
    jabber: 
    jeepney: 
    jellyfish: 
    jellyfish-outline: 
    jira: 
    jquery: 
    jsfiddle: 
    jump-rope: 
    kabaddi: 
    kangaroo: 
    karate: 
    kayaking: 
    keg: 
    kettle: 
    kettle-alert: 
    kettle-alert-outline: 
    kettle-off: 
    kettle-off-outline: 
    kettle-outline: 
    kettle-pour-over: 
    kettle-steam: 
    kettle-steam-outline: 
    kettlebell: 
    key: 
    key-alert: 廬
    key-alert-outline: 旅
    key-arrow-right: 
    key-chain: 
    key-chain-variant: 
    key-change: 
    key-link: 
    key-minus: 
    key-outline: 
    key-plus: 
    key-remove: 
    key-star: 
    key-variant: 
    key-wireless: 
    keyboard: 
    keyboard-backspace: 
    keyboard-caps: 
    keyboard-close: 
    keyboard-esc: 
    keyboard-f1: 
    keyboard-f10: 
    keyboard-f11: 
    keyboard-f12: 
    keyboard-f2: 
    keyboard-f3: 
    keyboard-f4: 
    keyboard-f5: 
    keyboard-f6: 
    keyboard-f7: 
    keyboard-f8: 
    keyboard-f9: 
    keyboard-off: 
    keyboard-off-outline: 
    keyboard-outline: 
    keyboard-return: 
    keyboard-settings: 
    keyboard-settings-outline: 
    keyboard-space: 
    keyboard-tab: 
    keyboard-tab-reverse: 
    keyboard-variant: 
    khanda: 
    kickstarter: 
    kite: 濾
    kite-outline: 礪
    kitesurfing: 
    klingon: 
    knife: 
    knife-military: 
    koala: 
    kodi: 
    kubernetes: 
    label: 
    label-multiple: 
    label-multiple-outline: 
    label-off: 
    label-off-outline: 
    label-outline: 
    label-percent: 
    label-percent-outline: 
    label-variant: 
    label-variant-outline: 
    ladder: 
    ladybug: 
    lambda: 
    lamp: 
    lamp-outline: 
    lamps: 
    lamps-outline: 
    lan: 
    lan-check: 
    lan-connect: 
    lan-disconnect: 
    lan-pending: 
    land-fields: 缾
    land-plots: 者
    land-plots-circle: 荒
    land-plots-circle-variant: 華
    land-rows-horizontal: 蝹
    land-rows-vertical: 襁
    landslide: 漢
    landslide-outline: 煮
    language-c: 
    language-cpp: 
    language-csharp: 
    language-css3: 
    language-fortran: 
    language-go: 
    language-haskell: 
    language-html5: 
    language-java: 
    language-javascript: 
    language-kotlin: 
    language-lua: 
    language-markdown: 
    language-markdown-outline: 
    language-php: 
    language-python: 
    language-r: 
    language-ruby: 
    language-ruby-on-rails: 
    language-rust: 
    language-swift: 
    language-typescript: 
    language-xaml: 
    laptop: 
    laptop-account: 爫
    laptop-off: 
    laravel: 
    laser-pointer: 
    lasso: 
    lastpass: 
    latitude: 
    launch: 
    lava-lamp: 
    layers: 
    layers-edit: 
    layers-minus: 
    layers-off: 
    layers-off-outline: 
    layers-outline: 
    layers-plus: 
    layers-remove: 
    layers-search: 
    layers-search-outline: 
    layers-triple: 
    layers-triple-outline: 
    lead-pencil: 
    leaf: 
    leaf-circle: 滑
    leaf-circle-outline: 串
    leaf-maple: 
    leaf-maple-off: 
    leaf-off: 
    leak: 
    leak-off: 
    lecturn: 﫯
    led-off: 
    led-on: 
    led-outline: 
    led-strip: 
    led-strip-variant: 
    led-strip-variant-off: 琢
    led-variant-off: 
    led-variant-on: 
    led-variant-outline: 
    leek: 
    less-than: 
    less-than-or-equal: 
    library: 
    library-outline: 﨡
    library-shelves: 
    license: 
    lifebuoy: 
    light-flood-down: 閭
    light-flood-up: 驪
    light-recessed: 
    light-switch: 
    light-switch-off: 﨣
    lightbulb: 
    lightbulb-alert: 易
    lightbulb-alert-outline: 李
    lightbulb-auto: 
    lightbulb-auto-outline: 
    lightbulb-cfl: 
    lightbulb-cfl-off: 
    lightbulb-cfl-spiral: 
    lightbulb-cfl-spiral-off: 
    lightbulb-fluorescent-tube: 
    lightbulb-fluorescent-tube-outline: 
    lightbulb-group: 
    lightbulb-group-off: 
    lightbulb-group-off-outline: 
    lightbulb-group-outline: 
    lightbulb-multiple: 
    lightbulb-multiple-off: 
    lightbulb-multiple-off-outline: 
    lightbulb-multiple-outline: 
    lightbulb-night: 碑
    lightbulb-night-outline: 社
    lightbulb-off: 
    lightbulb-off-outline: 
    lightbulb-on: 
    lightbulb-on-10: 祉
    lightbulb-on-20: 祈
    lightbulb-on-30: 祐
    lightbulb-on-40: 祖
    lightbulb-on-50: 祝
    lightbulb-on-60: 禍
    lightbulb-on-70: 禎
    lightbulb-on-80: 穀
    lightbulb-on-90: 突
    lightbulb-on-outline: 
    lightbulb-outline: 
    lightbulb-question: 梨
    lightbulb-question-outline: 泥
    lightbulb-spot: 
    lightbulb-spot-off: 
    lightbulb-variant: 
    lightbulb-variant-outline: 
    lighthouse: 
    lighthouse-on: 
    lightning-bolt: 
    lightning-bolt-circle: 
    lightning-bolt-outline: 
    line-scan: 
    lingerie: 
    link: 
    link-box: 
    link-box-outline: 
    link-box-variant: 
    link-box-variant-outline: 
    link-lock: 
    link-off: 
    link-plus: 
    link-variant: 
    link-variant-minus: 
    link-variant-off: 
    link-variant-plus: 
    link-variant-remove: 
    linkedin: 
    linux: 
    linux-mint: 
    lipstick: 
    liquid-spot: 
    liquor: 欄
    list-status: 
    litecoin: 
    loading: 
    location-enter: 
    location-exit: 
    lock: 
    lock-alert: 
    lock-alert-outline: 
    lock-check: 
    lock-check-outline: 
    lock-clock: 
    lock-minus: 
    lock-minus-outline: 
    lock-off: 
    lock-off-outline: 
    lock-open: 
    lock-open-alert: 
    lock-open-alert-outline: 
    lock-open-check: 
    lock-open-check-outline: 
    lock-open-minus: 
    lock-open-minus-outline: 
    lock-open-outline: 
    lock-open-plus: 
    lock-open-plus-outline: 
    lock-open-remove: 
    lock-open-remove-outline: 
    lock-open-variant: 
    lock-open-variant-outline: 
    lock-outline: 
    lock-pattern: 
    lock-plus: 
    lock-plus-outline: 
    lock-question: 
    lock-remove: 
    lock-remove-outline: 
    lock-reset: 
    lock-smart: 
    locker: 
    locker-multiple: 
    login: 
    login-variant: 
    logout: 
    logout-variant: 
    longitude: 
    looks: 
    lotion: 
    lotion-outline: 
    lotion-plus: 
    lotion-plus-outline: 
    loupe: 
    lumx: 
    lungs: 
    mace: 
    magazine-pistol: 
    magazine-rifle: 
    magic-staff: 
    magnet: 
    magnet-on: 
    magnify: 
    magnify-close: 
    magnify-expand: 
    magnify-minus: 
    magnify-minus-cursor: 
    magnify-minus-outline: 
    magnify-plus: 
    magnify-plus-cursor: 
    magnify-plus-outline: 
    magnify-remove-cursor: 
    magnify-remove-outline: 
    magnify-scan: 
    mail: 
    mailbox: 
    mailbox-open: 
    mailbox-open-outline: 
    mailbox-open-up: 
    mailbox-open-up-outline: 
    mailbox-outline: 
    mailbox-up: 
    mailbox-up-outline: 
    manjaro: 
    map: 
    map-check: 
    map-check-outline: 
    map-clock: 
    map-clock-outline: 
    map-legend: 
    map-marker: 
    map-marker-account: 
    map-marker-account-outline: 
    map-marker-alert: 
    map-marker-alert-outline: 
    map-marker-check: 
    map-marker-check-outline: 
    map-marker-circle: 
    map-marker-distance: 
    map-marker-down: 
    map-marker-left: 
    map-marker-left-outline: 
    map-marker-minus: 
    map-marker-minus-outline: 
    map-marker-multiple: 
    map-marker-multiple-outline: 
    map-marker-off: 
    map-marker-off-outline: 
    map-marker-outline: 
    map-marker-path: 
    map-marker-plus: 
    map-marker-plus-outline: 
    map-marker-question: 
    map-marker-question-outline: 
    map-marker-radius: 
    map-marker-radius-outline: 
    map-marker-remove: 
    map-marker-remove-outline: 
    map-marker-remove-variant: 
    map-marker-right: 
    map-marker-right-outline: 
    map-marker-star: 
    map-marker-star-outline: 
    map-marker-up: 
    map-minus: 
    map-outline: 
    map-plus: 
    map-search: 
    map-search-outline: 
    mapbox: 
    margin: 
    marker: 
    marker-cancel: 
    marker-check: 
    mastodon: 
    material-design: 
    material-ui: 
    math-compass: 
    math-cos: 
    math-integral: 
    math-integral-box: 
    math-log: 
    math-norm: 
    math-norm-box: 
    math-sin: 
    math-tan: 
    matrix: 
    medal: 
    medal-outline: 
    medical-bag: 
    medical-cotton-swab: 覆
    meditation: 
    memory: 
    menorah: 
    menorah-fire: 
    menu: 
    menu-down: 
    menu-down-outline: 
    menu-left: 
    menu-left-outline: 
    menu-open: 
    menu-right: 
    menu-right-outline: 
    menu-swap: 
    menu-swap-outline: 
    menu-up: 
    menu-up-outline: 
    merge: 
    message: 
    message-alert: 
    message-alert-outline: 
    message-arrow-left: 
    message-arrow-left-outline: 
    message-arrow-right: 
    message-arrow-right-outline: 
    message-badge: 鹿
    message-badge-outline: 論
    message-bookmark: 
    message-bookmark-outline: 
    message-bulleted: 
    message-bulleted-off: 
    message-cog: 
    message-cog-outline: 
    message-draw: 
    message-fast: 溜
    message-fast-outline: 琉
    message-flash: 
    message-flash-outline: 
    message-image: 
    message-image-outline: 
    message-lock: 
    message-lock-outline: 
    message-minus: 
    message-minus-outline: 
    message-off: 
    message-off-outline: 
    message-outline: 
    message-plus: 
    message-plus-outline: 
    message-processing: 
    message-processing-outline: 
    message-question: 
    message-question-outline: 
    message-reply: 
    message-reply-outline: 
    message-reply-text: 
    message-reply-text-outline: 
    message-settings: 
    message-settings-outline: 
    message-star: 
    message-star-outline: 
    message-text: 
    message-text-clock: 
    message-text-clock-outline: 
    message-text-fast: 留
    message-text-fast-outline: 硫
    message-text-lock: 
    message-text-lock-outline: 
    message-text-outline: 
    message-video: 
    meteor: 
    meter-electric: 節
    meter-electric-outline: 練
    meter-gas: 縉
    meter-gas-outline: 繁
    metronome: 
    metronome-tick: 
    micro-sd: 
    microphone: 
    microphone-minus: 
    microphone-off: 
    microphone-outline: 
    microphone-plus: 
    microphone-question: 麗
    microphone-question-outline: 黎
    microphone-settings: 
    microphone-variant: 
    microphone-variant-off: 
    microscope: 
    microsoft: 
    microsoft-access: 
    microsoft-azure: 
    microsoft-azure-devops: 
    microsoft-bing: 
    microsoft-dynamics-365: 
    microsoft-edge: 
    microsoft-excel: 
    microsoft-internet-explorer: 
    microsoft-office: 
    microsoft-onedrive: 
    microsoft-onenote: 
    microsoft-outlook: 
    microsoft-powerpoint: 
    microsoft-sharepoint: 
    microsoft-teams: 
    microsoft-visual-studio: 
    microsoft-visual-studio-code: 
    microsoft-windows: 
    microsoft-windows-classic: 
    microsoft-word: 
    microsoft-xbox: 
    microsoft-xbox-controller: 
    microsoft-xbox-controller-battery-alert: 
    microsoft-xbox-controller-battery-charging: 
    microsoft-xbox-controller-battery-empty: 
    microsoft-xbox-controller-battery-full: 
    microsoft-xbox-controller-battery-low: 
    microsoft-xbox-controller-battery-medium: 
    microsoft-xbox-controller-battery-unknown: 
    microsoft-xbox-controller-menu: 
    microsoft-xbox-controller-off: 
    microsoft-xbox-controller-view: 
    microwave: 
    microwave-off: 
    middleware: 
    middleware-outline: 
    midi: 
    midi-port: 
    mine: 
    minecraft: 
    mini-sd: 
    minidisc: 
    minus: 
    minus-box: 
    minus-box-multiple: 
    minus-box-multiple-outline: 
    minus-box-outline: 
    minus-circle: 
    minus-circle-multiple: 
    minus-circle-multiple-outline: 
    minus-circle-off: 
    minus-circle-off-outline: 
    minus-circle-outline: 
    minus-network: 
    minus-network-outline: 
    minus-thick: 
    mirror: 
    mirror-rectangle: 
    mirror-variant: 
    mixed-martial-arts: 
    mixed-reality: 
    molecule: 
    molecule-co: 
    molecule-co2: 
    monitor: 
    monitor-account: 署
    monitor-arrow-down: 紐
    monitor-arrow-down-variant: 類
    monitor-cellphone: 
    monitor-cellphone-star: 
    monitor-dashboard: 
    monitor-edit: 
    monitor-eye: 
    monitor-lock: 
    monitor-multiple: 
    monitor-off: 
    monitor-screenshot: 
    monitor-share: 
    monitor-shimmer: 
    monitor-small: 
    monitor-speaker: 
    monitor-speaker-off: 
    monitor-star: 
    moon-first-quarter: 
    moon-full: 
    moon-last-quarter: 
    moon-new: 
    moon-waning-crescent: 
    moon-waning-gibbous: 
    moon-waxing-crescent: 
    moon-waxing-gibbous: 
    moped: 
    moped-electric: 
    moped-electric-outline: 
    moped-outline: 
    more: 
    mortar-pestle: 
    mortar-pestle-plus: 
    mosque: 
    mother-heart: 
    mother-nurse: 
    motion: 
    motion-outline: 
    motion-pause: 
    motion-pause-outline: 
    motion-play: 
    motion-play-outline: 
    motion-sensor: 
    motion-sensor-off: 
    motorbike: 
    motorbike-electric: 
    mouse: 
    mouse-bluetooth: 
    mouse-move-down: 
    mouse-move-up: 
    mouse-move-vertical: 
    mouse-off: 
    mouse-variant: 
    mouse-variant-off: 
    move-resize: 
    move-resize-variant: 
    movie: 
    movie-check: 
    movie-check-outline: 
    movie-cog: 
    movie-cog-outline: 
    movie-edit: 
    movie-edit-outline: 
    movie-filter: 
    movie-filter-outline: 
    movie-minus: 
    movie-minus-outline: 
    movie-off: 
    movie-off-outline: 
    movie-open: 
    movie-open-check: 
    movie-open-check-outline: 
    movie-open-cog: 
    movie-open-cog-outline: 
    movie-open-edit: 
    movie-open-edit-outline: 
    movie-open-minus: 
    movie-open-minus-outline: 
    movie-open-off: 
    movie-open-off-outline: 
    movie-open-outline: 
    movie-open-play: 
    movie-open-play-outline: 
    movie-open-plus: 
    movie-open-plus-outline: 
    movie-open-remove: 
    movie-open-remove-outline: 
    movie-open-settings: 
    movie-open-settings-outline: 
    movie-open-star: 
    movie-open-star-outline: 
    movie-outline: 
    movie-play: 
    movie-play-outline: 
    movie-plus: 
    movie-plus-outline: 
    movie-remove: 
    movie-remove-outline: 
    movie-roll: 
    movie-search: 
    movie-search-outline: 
    movie-settings: 
    movie-settings-outline: 
    movie-star: 
    movie-star-outline: 
    mower: 
    mower-bag: 
    muffin: 
    multicast: 
    multiplication: 
    multiplication-box: 
    mushroom: 
    mushroom-off: 
    mushroom-off-outline: 
    mushroom-outline: 
    music: 
    music-accidental-double-flat: 
    music-accidental-double-sharp: 
    music-accidental-flat: 
    music-accidental-natural: 
    music-accidental-sharp: 
    music-box: 
    music-box-multiple: 
    music-box-multiple-outline: 
    music-box-outline: 
    music-circle: 
    music-circle-outline: 
    music-clef-alto: 
    music-clef-bass: 
    music-clef-treble: 
    music-note: 
    music-note-bluetooth: 
    music-note-bluetooth-off: 
    music-note-eighth: 
    music-note-eighth-dotted: 
    music-note-half: 
    music-note-half-dotted: 
    music-note-off: 
    music-note-off-outline: 
    music-note-outline: 
    music-note-plus: 
    music-note-quarter: 
    music-note-quarter-dotted: 
    music-note-sixteenth: 
    music-note-sixteenth-dotted: 
    music-note-whole: 
    music-note-whole-dotted: 
    music-off: 
    music-rest-eighth: 
    music-rest-half: 
    music-rest-quarter: 
    music-rest-sixteenth: 
    music-rest-whole: 
    mustache: 
    nail: 
    nas: 
    nativescript: 
    nature: 
    nature-people: 
    navigation: 
    navigation-outline: 
    navigation-variant: 
    navigation-variant-outline: 
    near-me: 
    necklace: 
    needle: 
    needle-off: 六
    netflix: 
    network: 
    network-off: 
    network-off-outline: 
    network-outline: 
    network-pos: 響
    network-strength-1: 
    network-strength-1-alert: 
    network-strength-2: 
    network-strength-2-alert: 
    network-strength-3: 
    network-strength-3-alert: 
    network-strength-4: 
    network-strength-4-alert: 
    network-strength-4-cog: 酪
    network-strength-off: 
    network-strength-off-outline: 
    network-strength-outline: 
    new-box: 
    newspaper: 
    newspaper-check: 壟
    newspaper-minus: 
    newspaper-plus: 
    newspaper-remove: 弄
    newspaper-variant: 
    newspaper-variant-multiple: 
    newspaper-variant-multiple-outline: 
    newspaper-variant-outline: 
    nfc: 
    nfc-search-variant: 
    nfc-tap: 
    nfc-variant: 
    nfc-variant-off: 
    ninja: 
    nintendo-game-boy: 
    nintendo-switch: 
    nintendo-wii: 
    nintendo-wiiu: 
    nix: 
    nodejs: 
    noodles: 
    not-equal: 
    not-equal-variant: 
    note: 
    note-alert: 
    note-alert-outline: 
    note-check: 
    note-check-outline: 
    note-edit: 
    note-edit-outline: 
    note-minus: 
    note-minus-outline: 
    note-multiple: 
    note-multiple-outline: 
    note-off: 
    note-off-outline: 
    note-outline: 
    note-plus: 
    note-plus-outline: 
    note-remove: 
    note-remove-outline: 
    note-search: 
    note-search-outline: 
    note-text: 
    note-text-outline: 
    notebook: 
    notebook-check: 
    notebook-check-outline: 
    notebook-edit: 
    notebook-edit-outline: 
    notebook-heart: 見
    notebook-heart-outline: 廓
    notebook-minus: 
    notebook-minus-outline: 
    notebook-multiple: 
    notebook-outline: 
    notebook-plus: 
    notebook-plus-outline: 
    notebook-remove: 
    notebook-remove-outline: 
    notification-clear-all: 
    npm: 
    nuke: 
    null: 
    numeric: 
    numeric-0: 
    numeric-0-box: 
    numeric-0-box-multiple: 
    numeric-0-box-multiple-outline: 
    numeric-0-box-outline: 
    numeric-0-circle: 
    numeric-0-circle-outline: 
    numeric-1: 
    numeric-1-box: 
    numeric-1-box-multiple: 
    numeric-1-box-multiple-outline: 
    numeric-1-box-outline: 
    numeric-1-circle: 
    numeric-1-circle-outline: 
    numeric-10: 
    numeric-10-box: 
    numeric-10-box-multiple: 
    numeric-10-box-multiple-outline: 
    numeric-10-box-outline: 
    numeric-10-circle: 
    numeric-10-circle-outline: 
    numeric-2: 
    numeric-2-box: 
    numeric-2-box-multiple: 
    numeric-2-box-multiple-outline: 
    numeric-2-box-outline: 
    numeric-2-circle: 
    numeric-2-circle-outline: 
    numeric-3: 
    numeric-3-box: 
    numeric-3-box-multiple: 
    numeric-3-box-multiple-outline: 
    numeric-3-box-outline: 
    numeric-3-circle: 
    numeric-3-circle-outline: 
    numeric-4: 
    numeric-4-box: 
    numeric-4-box-multiple: 
    numeric-4-box-multiple-outline: 
    numeric-4-box-outline: 
    numeric-4-circle: 
    numeric-4-circle-outline: 
    numeric-5: 
    numeric-5-box: 
    numeric-5-box-multiple: 
    numeric-5-box-multiple-outline: 
    numeric-5-box-outline: 
    numeric-5-circle: 
    numeric-5-circle-outline: 
    numeric-6: 
    numeric-6-box: 
    numeric-6-box-multiple: 
    numeric-6-box-multiple-outline: 
    numeric-6-box-outline: 
    numeric-6-circle: 
    numeric-6-circle-outline: 
    numeric-7: 
    numeric-7-box: 
    numeric-7-box-multiple: 
    numeric-7-box-multiple-outline: 
    numeric-7-box-outline: 
    numeric-7-circle: 
    numeric-7-circle-outline: 
    numeric-8: 
    numeric-8-box: 
    numeric-8-box-multiple: 
    numeric-8-box-multiple-outline: 
    numeric-8-box-outline: 
    numeric-8-circle: 
    numeric-8-circle-outline: 
    numeric-9: 
    numeric-9-box: 
    numeric-9-box-multiple: 
    numeric-9-box-multiple-outline: 
    numeric-9-box-outline: 
    numeric-9-circle: 
    numeric-9-circle-outline: 
    numeric-9-plus: 
    numeric-9-plus-box: 
    numeric-9-plus-box-multiple: 
    numeric-9-plus-box-multiple-outline: 
    numeric-9-plus-box-outline: 
    numeric-9-plus-circle: 
    numeric-9-plus-circle-outline: 
    numeric-negative-1: 
    numeric-off: 戮
    numeric-positive-1: 
    nut: 
    nutrition: 
    nuxt: 
    oar: 
    ocarina: 
    oci: 
    ocr: 
    octagon: 
    octagon-outline: 
    octagram: 
    octagram-outline: 
    octahedron: 累
    octahedron-off: 縷
    odnoklassniki: 
    offer: 
    office-building: 
    office-building-cog: 賂
    office-building-cog-outline: 雷
    office-building-marker: 
    office-building-marker-outline: 
    office-building-outline: 
    oil: 
    oil-lamp: 
    oil-level: 
    oil-temperature: 
    om: 
    omega: 
    one-up: 
    onepassword: 
    opacity: 
    open-in-app: 
    open-in-new: 
    open-source-initiative: 
    openid: 
    opera: 
    orbit: 
    orbit-variant: 
    order-alphabetical-ascending: 
    order-alphabetical-descending: 
    order-bool-ascending: 
    order-bool-ascending-variant: 
    order-bool-descending: 
    order-bool-descending-variant: 
    order-numeric-ascending: 
    order-numeric-descending: 
    origin: 
    ornament: 
    ornament-variant: 
    outdoor-lamp: 
    overscan: 
    owl: 
    pac-man: 
    package: 
    package-down: 
    package-up: 
    package-variant: 
    package-variant-closed: 
    package-variant-closed-minus: 陸
    package-variant-closed-plus: 倫
    package-variant-closed-remove: 崙
    package-variant-minus: 淪
    package-variant-plus: 輪
    package-variant-remove: 律
    page-first: 
    page-last: 
    page-layout-body: 
    page-layout-footer: 
    page-layout-header: 
    page-layout-header-footer: 
    page-layout-sidebar-left: 
    page-layout-sidebar-right: 
    page-next: 
    page-next-outline: 
    page-previous: 
    page-previous-outline: 
    pail: 
    pail-minus: 
    pail-minus-outline: 
    pail-off: 
    pail-off-outline: 
    pail-outline: 
    pail-plus: 
    pail-plus-outline: 
    pail-remove: 
    pail-remove-outline: 
    palette: 
    palette-advanced: 
    palette-outline: 
    palette-swatch: 
    palette-swatch-outline: 
    palette-swatch-variant: 陵
    palm-tree: 
    pan: 
    pan-bottom-left: 
    pan-bottom-right: 
    pan-down: 
    pan-horizontal: 
    pan-left: 
    pan-right: 
    pan-top-left: 
    pan-top-right: 
    pan-up: 
    pan-vertical: 
    panda: 
    pandora: 
    panorama: 
    panorama-fisheye: 
    panorama-horizontal: 蠟
    panorama-horizontal-outline: 
    panorama-outline: 曆
    panorama-sphere: 歷
    panorama-sphere-outline: 轢
    panorama-variant: 年
    panorama-variant-outline: 憐
    panorama-vertical: 廊
    panorama-vertical-outline: 
    panorama-wide-angle: 丹
    panorama-wide-angle-outline: 
    paper-cut-vertical: 
    paper-roll: 
    paper-roll-outline: 
    paperclip: 
    paperclip-check: 鉶
    paperclip-lock: 慄
    paperclip-minus: 陼
    paperclip-off: 難
    paperclip-plus: 靖
    paperclip-remove: 韛
    parachute: 
    parachute-outline: 
    paragliding: 
    parking: 
    party-popper: 
    passport: 
    passport-biometric: 
    pasta: 
    patio-heater: 
    patreon: 
    pause: 
    pause-circle: 
    pause-circle-outline: 
    pause-octagon: 
    pause-octagon-outline: 
    paw: 
    paw-off: 
    paw-off-outline: 
    paw-outline: 
    peace: 
    peanut: 
    peanut-off: 
    peanut-off-outline: 
    peanut-outline: 
    pen: 
    pen-lock: 
    pen-minus: 
    pen-off: 
    pen-plus: 
    pen-remove: 
    pencil: 
    pencil-box: 
    pencil-box-multiple: 
    pencil-box-multiple-outline: 
    pencil-box-outline: 
    pencil-circle: 
    pencil-circle-outline: 
    pencil-lock: 
    pencil-lock-outline: 
    pencil-minus: 
    pencil-minus-outline: 
    pencil-off: 
    pencil-off-outline: 
    pencil-outline: 
    pencil-plus: 
    pencil-plus-outline: 
    pencil-remove: 
    pencil-remove-outline: 
    pencil-ruler: 
    penguin: 
    pentagon: 
    pentagon-outline: 
    pentagram: 
    percent: 
    percent-box: 度
    percent-box-outline: 拓
    percent-circle: 糖
    percent-circle-outline: 宅
    percent-outline: 
    periodic-table: 
    perspective-less: 
    perspective-more: 
    ph: 
    phone: 
    phone-alert: 
    phone-alert-outline: 
    phone-bluetooth: 
    phone-bluetooth-outline: 
    phone-cancel: 
    phone-cancel-outline: 
    phone-check: 
    phone-check-outline: 
    phone-classic: 
    phone-classic-off: 
    phone-clock: 栗
    phone-dial: 
    phone-dial-outline: 
    phone-forward: 
    phone-forward-outline: 
    phone-hangup: 
    phone-hangup-outline: 
    phone-in-talk: 
    phone-in-talk-outline: 
    phone-incoming: 
    phone-incoming-outline: 
    phone-lock: 
    phone-lock-outline: 
    phone-log: 
    phone-log-outline: 
    phone-message: 
    phone-message-outline: 
    phone-minus: 
    phone-minus-outline: 
    phone-missed: 
    phone-missed-outline: 
    phone-off: 
    phone-off-outline: 
    phone-outgoing: 
    phone-outgoing-outline: 
    phone-outline: 
    phone-paused: 
    phone-paused-outline: 
    phone-plus: 
    phone-plus-outline: 
    phone-refresh: 漣
    phone-refresh-outline: 煉
    phone-remove: 
    phone-remove-outline: 
    phone-return: 
    phone-return-outline: 
    phone-ring: 
    phone-ring-outline: 
    phone-rotate-landscape: 
    phone-rotate-portrait: 
    phone-settings: 
    phone-settings-outline: 
    phone-sync: 璉
    phone-sync-outline: 秊
    phone-voip: 
    pi: 
    pi-box: 
    pi-hole: 
    piano: 
    piano-off: 
    pickaxe: 
    picture-in-picture-bottom-right: 
    picture-in-picture-bottom-right-outline: 
    picture-in-picture-top-right: 
    picture-in-picture-top-right-outline: 
    pier: 
    pier-crane: 
    pig: 
    pig-variant: 
    pig-variant-outline: 
    piggy-bank: 
    piggy-bank-outline: 
    pill: 
    pill-off: 者
    pillar: 
    pin: 
    pin-off: 
    pin-off-outline: 
    pin-outline: 
    pine-tree: 
    pine-tree-box: 
    pine-tree-fire: 
    pinterest: 
    pinwheel: 
    pinwheel-outline: 
    pipe: 
    pipe-disconnected: 
    pipe-leak: 
    pipe-valve: 
    pipe-wrench: 
    pirate: 
    pistol: 
    piston: 
    pitchfork: 
    pizza: 
    play: 
    play-box: 
    play-box-lock: 凞
    play-box-lock-open: 猪
    play-box-lock-open-outline: 益
    play-box-lock-outline: 礼
    play-box-multiple: 
    play-box-multiple-outline: 
    play-box-outline: 
    play-circle: 
    play-circle-outline: 
    play-network: 
    play-network-outline: 
    play-outline: 
    play-pause: 
    play-protected-content: 
    play-speed: 
    playlist-check: 
    playlist-edit: 
    playlist-minus: 
    playlist-music: 
    playlist-music-outline: 
    playlist-play: 
    playlist-plus: 
    playlist-remove: 
    playlist-star: 
    plex: 
    pliers: 念
    plus: 
    plus-box: 
    plus-box-multiple: 
    plus-box-multiple-outline: 
    plus-box-outline: 
    plus-circle: 
    plus-circle-multiple: 
    plus-circle-multiple-outline: 
    plus-circle-outline: 
    plus-lock: 臭
    plus-lock-open: 艹
    plus-minus: 
    plus-minus-box: 
    plus-minus-variant: 
    plus-network: 
    plus-network-outline: 
    plus-outline: 
    plus-thick: 
    podcast: 
    podium: 
    podium-bronze: 
    podium-gold: 
    podium-silver: 
    point-of-sale: 
    pokeball: 
    pokemon-go: 
    poker-chip: 
    polaroid: 
    police-badge: 
    police-badge-outline: 
    police-station: 
    poll: 
    polo: 
    polymer: 
    pool: 
    pool-thermometer: 艹
    popcorn: 
    post: 
    post-lamp: 著
    post-outline: 
    postage-stamp: 
    pot: 
    pot-mix: 
    pot-mix-outline: 
    pot-outline: 
    pot-steam: 
    pot-steam-outline: 
    pound: 
    pound-box: 
    pound-box-outline: 
    power: 
    power-cycle: 
    power-off: 
    power-on: 
    power-plug: 
    power-plug-off: 
    power-plug-off-outline: 
    power-plug-outline: 
    power-settings: 
    power-sleep: 
    power-socket: 
    power-socket-au: 
    power-socket-ch: 
    power-socket-de: 
    power-socket-eu: 
    power-socket-fr: 
    power-socket-it: 
    power-socket-jp: 
    power-socket-uk: 
    power-socket-us: 
    power-standby: 
    powershell: 
    prescription: 
    presentation: 
    presentation-play: 
    pretzel: 
    printer: 
    printer-3d: 
    printer-3d-nozzle: 
    printer-3d-nozzle-alert: 
    printer-3d-nozzle-alert-outline: 
    printer-3d-nozzle-heat: 
    printer-3d-nozzle-heat-outline: 
    printer-3d-nozzle-outline: 
    printer-alert: 
    printer-check: 
    printer-eye: 
    printer-off: 
    printer-off-outline: 
    printer-outline: 
    printer-pos: 
    printer-search: 
    printer-settings: 
    printer-wireless: 
    priority-high: 
    priority-low: 
    professional-hexagon: 
    progress-alert: 
    progress-check: 
    progress-clock: 
    progress-close: 
    progress-download: 
    progress-pencil: 
    progress-question: 
    progress-star: 
    progress-upload: 
    progress-wrench: 
    projector: 
    projector-off: 諸
    projector-screen: 
    projector-screen-off: 
    projector-screen-off-outline: 
    projector-screen-outline: 
    projector-screen-variant: 
    projector-screen-variant-off: 
    projector-screen-variant-off-outline: 
    projector-screen-variant-outline: 
    propane-tank: 
    propane-tank-outline: 
    protocol: 
    publish: 
    publish-off: 籠
    pulse: 
    pump: 
    pumpkin: 
    purse: 
    purse-outline: 
    puzzle: 
    puzzle-check: 
    puzzle-check-outline: 
    puzzle-edit: 
    puzzle-edit-outline: 
    puzzle-heart: 
    puzzle-heart-outline: 
    puzzle-minus: 
    puzzle-minus-outline: 
    puzzle-outline: 
    puzzle-plus: 
    puzzle-plus-outline: 
    puzzle-remove: 
    puzzle-remove-outline: 
    puzzle-star: 
    puzzle-star-outline: 
    pyramid: 陋
    pyramid-off: 勒
    qi: 
    qqchat: 
    qrcode: 
    qrcode-edit: 
    qrcode-minus: 
    qrcode-plus: 
    qrcode-remove: 
    qrcode-scan: 
    quadcopter: 
    quality-high: 
    quality-low: 
    quality-medium: 
    quora: 
    rabbit: 
    rabbit-variant: 褐
    rabbit-variant-outline: 視
    racing-helmet: 
    racquetball: 
    radar: 
    radiator: 
    radiator-disabled: 
    radiator-off: 
    radio: 
    radio-am: 
    radio-fm: 
    radio-handheld: 
    radio-off: 
    radio-tower: 
    radioactive: 
    radioactive-circle: 
    radioactive-circle-outline: 
    radioactive-off: 
    radiobox-blank: 
    radiobox-marked: 
    radiology-box: 
    radiology-box-outline: 
    radius: 
    radius-outline: 
    railroad-light: 
    rake: 
    raspberry-pi: 
    raw: 﨎
    raw-off: 﨏
    ray-end: 
    ray-end-arrow: 
    ray-start: 
    ray-start-arrow: 
    ray-start-end: 
    ray-start-vertex-end: 
    ray-vertex: 
    razor-double-edge: 練
    razor-single-edge: 聯
    react: 
    read: 
    receipt: 
    receipt-outline: 率
    receipt-text-check: 謁
    receipt-text-check-outline: 謹
    receipt-text-minus: 賓
    receipt-text-minus-outline: 贈
    receipt-text-plus: 辶
    receipt-text-plus-outline: 逸
    receipt-text-remove: 難
    receipt-text-remove-outline: 響
    record: 
    record-circle: 
    record-circle-outline: 
    record-player: 
    record-rec: 
    rectangle: 
    rectangle-outline: 
    recycle: 
    recycle-variant: 
    reddit: 
    redhat: 
    redo: 
    redo-variant: 
    reflect-horizontal: 
    reflect-vertical: 
    refresh: 
    refresh-auto: 
    refresh-circle: 
    regex: 
    registered-trademark: 
    reiterate: 
    relation-many-to-many: 
    relation-many-to-one: 
    relation-many-to-one-or-many: 
    relation-many-to-only-one: 
    relation-many-to-zero-or-many: 
    relation-many-to-zero-or-one: 
    relation-one-or-many-to-many: 
    relation-one-or-many-to-one: 
    relation-one-or-many-to-one-or-many: 
    relation-one-or-many-to-only-one: 
    relation-one-or-many-to-zero-or-many: 
    relation-one-or-many-to-zero-or-one: 
    relation-one-to-many: 
    relation-one-to-one: 
    relation-one-to-one-or-many: 
    relation-one-to-only-one: 
    relation-one-to-zero-or-many: 
    relation-one-to-zero-or-one: 
    relation-only-one-to-many: 
    relation-only-one-to-one: 
    relation-only-one-to-one-or-many: 
    relation-only-one-to-only-one: 
    relation-only-one-to-zero-or-many: 
    relation-only-one-to-zero-or-one: 
    relation-zero-or-many-to-many: 
    relation-zero-or-many-to-one: 
    relation-zero-or-many-to-one-or-many: 
    relation-zero-or-many-to-only-one: 
    relation-zero-or-many-to-zero-or-many: 
    relation-zero-or-many-to-zero-or-one: 
    relation-zero-or-one-to-many: 
    relation-zero-or-one-to-one: 
    relation-zero-or-one-to-one-or-many: 
    relation-zero-or-one-to-only-one: 
    relation-zero-or-one-to-zero-or-many: 
    relation-zero-or-one-to-zero-or-one: 
    relative-scale: 
    reload: 
    reload-alert: 
    reminder: 
    remote: 
    remote-desktop: 
    remote-off: 
    remote-tv: 
    remote-tv-off: 
    rename-box: 
    reorder-horizontal: 
    reorder-vertical: 
    repeat: 
    repeat-off: 
    repeat-once: 
    repeat-variant: 
    replay: 
    reply: 
    reply-all: 
    reply-all-outline: 
    reply-circle: 
    reply-outline: 
    reproduction: 
    resistor: 
    resistor-nodes: 
    resize: 
    resize-bottom-right: 
    responsive: 
    restart: 
    restart-alert: 
    restart-off: 
    restore: 
    restore-alert: 
    rewind: 
    rewind-10: 
    rewind-15: 聾
    rewind-30: 
    rewind-5: 
    rewind-60: 
    rewind-outline: 
    rhombus: 
    rhombus-medium: 
    rhombus-medium-outline: 
    rhombus-outline: 
    rhombus-split: 
    rhombus-split-outline: 
    ribbon: 
    rice: 
    rickshaw: 
    rickshaw-electric: 
    ring: 
    rivet: 
    road: 
    road-variant: 
    robber: 
    robot: 
    robot-angry: 
    robot-angry-outline: 
    robot-confused: 
    robot-confused-outline: 
    robot-dead: 
    robot-dead-outline: 
    robot-excited: 
    robot-excited-outline: 
    robot-happy: 
    robot-happy-outline: 
    robot-industrial: 
    robot-industrial-outline: 神
    robot-love: 
    robot-love-outline: 
    robot-mower: 
    robot-mower-outline: 
    robot-off: 
    robot-off-outline: 
    robot-outline: 
    robot-vacuum: 
    robot-vacuum-variant: 
    rocket: 
    rocket-launch: 
    rocket-launch-outline: 
    rocket-outline: 
    rodent: 
    roller-shade: 頻
    roller-shade-closed: 恵
    roller-skate: 
    roller-skate-off: 
    rollerblade: 
    rollerblade-off: 
    rollupjs: 
    rolodex: 視
    rolodex-outline: 調
    roman-numeral-1: 
    roman-numeral-10: 
    roman-numeral-2: 
    roman-numeral-3: 
    roman-numeral-4: 
    roman-numeral-5: 
    roman-numeral-6: 
    roman-numeral-7: 
    roman-numeral-8: 
    roman-numeral-9: 
    room-service: 
    room-service-outline: 
    rotate-360: 輦
    rotate-3d: 
    rotate-3d-variant: 
    rotate-left: 
    rotate-left-variant: 
    rotate-orbit: 
    rotate-right: 
    rotate-right-variant: 
    rounded-corner: 
    router: 
    router-network: 
    router-wireless: 
    router-wireless-off: 
    router-wireless-settings: 
    routes: 
    routes-clock: 
    rowing: 
    rss: 
    rss-box: 
    rss-off: 
    rug: 
    rugby: 
    ruler: 
    ruler-square: 
    ruler-square-compass: 
    run: 
    run-fast: 
    rv-truck: 
    sack: 
    sack-percent: 
    safe: 
    safe-square: 
    safe-square-outline: 
    safety-goggles: 
    sail-boat: 
    sail-boat-sink: 﫮
    sale: 
    sale-outline: 洞
    salesforce: 
    sass: 
    satellite: 
    satellite-uplink: 
    satellite-variant: 
    sausage: 
    sausage-off: 
    saw-blade: 
    sawtooth-wave: 
    saxophone: 
    scale: 
    scale-balance: 
    scale-bathroom: 
    scale-off: 
    scale-unbalanced: 醴
    scan-helper: 
    scanner: 
    scanner-off: 
    scatter-plot: 
    scatter-plot-outline: 
    scent: 綾
    scent-off: 菱
    school: 
    school-outline: 
    scissors-cutting: 
    scooter: 
    scooter-electric: 
    scoreboard: 
    scoreboard-outline: 
    screen-rotation: 
    screen-rotation-lock: 
    screw-flat-top: 
    screw-lag: 
    screw-machine-flat-top: 
    screw-machine-round-top: 
    screw-round-top: 
    screwdriver: 
    script: 
    script-outline: 
    script-text: 
    script-text-key: 
    script-text-key-outline: 
    script-text-outline: 
    script-text-play: 
    script-text-play-outline: 
    sd: 
    seal: 
    seal-variant: 
    search-web: 
    seat: 
    seat-flat: 
    seat-flat-angled: 
    seat-individual-suite: 
    seat-legroom-extra: 
    seat-legroom-normal: 
    seat-legroom-reduced: 
    seat-outline: 
    seat-passenger: 
    seat-recline-extra: 
    seat-recline-normal: 
    seatbelt: 
    security: 
    security-network: 
    seed: 
    seed-off: 
    seed-off-outline: 
    seed-outline: 
    seed-plus: 𤋮
    seed-plus-outline: 舘
    seesaw: 
    segment: 
    select: 
    select-all: 
    select-color: 
    select-compare: 
    select-drag: 
    select-group: 
    select-inverse: 
    select-marker: 
    select-multiple: 
    select-multiple-marker: 
    select-off: 
    select-place: 
    select-remove: 
    select-search: 
    selection: 
    selection-drag: 
    selection-ellipse: 
    selection-ellipse-arrow-inside: 
    selection-ellipse-remove: 
    selection-marker: 
    selection-multiple: 
    selection-multiple-marker: 
    selection-off: 
    selection-remove: 
    selection-search: 
    semantic-web: 
    send: 
    send-check: 
    send-check-outline: 
    send-circle: 
    send-circle-outline: 
    send-clock: 
    send-clock-outline: 
    send-lock: 
    send-lock-outline: 
    send-outline: 
    serial-port: 
    server: 
    server-minus: 
    server-network: 
    server-network-off: 
    server-off: 
    server-plus: 
    server-remove: 
    server-security: 
    set-all: 
    set-center: 
    set-center-right: 
    set-left: 
    set-left-center: 
    set-left-right: 
    set-merge: 
    set-none: 
    set-right: 
    set-split: 
    set-square: 
    set-top-box: 
    settings-helper: 
    shaker: 
    shaker-outline: 
    shape: 
    shape-circle-plus: 
    shape-outline: 
    shape-oval-plus: 
    shape-plus: 
    shape-polygon-plus: 
    shape-rectangle-plus: 
    shape-square-plus: 
    shape-square-rounded-plus: 
    share: 
    share-all: 
    share-all-outline: 
    share-circle: 
    share-off: 
    share-off-outline: 
    share-outline: 
    share-variant: 
    share-variant-outline: 
    shark: 
    shark-fin: 
    shark-fin-outline: 
    shark-off: 
    sheep: 
    shield: 
    shield-account: 
    shield-account-outline: 
    shield-account-variant: 
    shield-account-variant-outline: 
    shield-airplane: 
    shield-airplane-outline: 
    shield-alert: 
    shield-alert-outline: 
    shield-bug: 
    shield-bug-outline: 
    shield-car: 
    shield-check: 
    shield-check-outline: 
    shield-cross: 
    shield-cross-outline: 
    shield-crown: 
    shield-crown-outline: 
    shield-edit: 
    shield-edit-outline: 
    shield-half: 
    shield-half-full: 
    shield-home: 
    shield-home-outline: 
    shield-key: 
    shield-key-outline: 
    shield-link-variant: 
    shield-link-variant-outline: 
    shield-lock: 
    shield-lock-open: 蓮
    shield-lock-open-outline: 連
    shield-lock-outline: 
    shield-moon: 
    shield-moon-outline: 
    shield-off: 
    shield-off-outline: 
    shield-outline: 
    shield-plus: 
    shield-plus-outline: 
    shield-refresh: 
    shield-refresh-outline: 
    shield-remove: 
    shield-remove-outline: 
    shield-search: 
    shield-star: 
    shield-star-outline: 
    shield-sun: 
    shield-sun-outline: 
    shield-sword: 
    shield-sword-outline: 
    shield-sync: 
    shield-sync-outline: 
    shimmer: 
    ship-wheel: 
    shipping-pallet: 
    shoe-ballet: 
    shoe-cleat: 
    shoe-formal: 
    shoe-heel: 
    shoe-print: 
    shoe-sneaker: 
    shopping: 
    shopping-music: 
    shopping-outline: 
    shopping-search: 
    shopping-search-outline: 﩮
    shore: 
    shovel: 
    shovel-off: 
    shower: 
    shower-head: 
    shredder: 
    shuffle: 
    shuffle-disabled: 
    shuffle-variant: 
    shuriken: 
    sickle: 
    sigma: 
    sigma-lower: 
    sign-caution: 
    sign-direction: 
    sign-direction-minus: 
    sign-direction-plus: 
    sign-direction-remove: 
    sign-pole: 
    sign-real-estate: 
    sign-text: 
    signal: 
    signal-2g: 
    signal-3g: 
    signal-4g: 
    signal-5g: 
    signal-cellular-1: 
    signal-cellular-2: 
    signal-cellular-3: 
    signal-cellular-outline: 
    signal-distance-variant: 
    signal-hspa: 
    signal-hspa-plus: 
    signal-off: 
    signal-variant: 
    signature: 
    signature-freehand: 
    signature-image: 
    signature-text: 
    silo: 
    silverware: 
    silverware-clean: 
    silverware-fork: 
    silverware-fork-knife: 
    silverware-spoon: 
    silverware-variant: 
    sim: 
    sim-alert: 
    sim-alert-outline: 
    sim-off: 
    sim-off-outline: 
    sim-outline: 
    simple-icons: 
    sina-weibo: 
    sine-wave: 
    sitemap: 
    sitemap-outline: 鍊
    size-l: 
    size-m: 
    size-s: 
    size-xl: 
    size-xs: 
    size-xxl: 
    size-xxs: 
    size-xxxl: 
    skate: 
    skate-off: 
    skateboard: 
    skateboarding: 
    skew-less: 
    skew-more: 
    ski: 
    ski-cross-country: 
    ski-water: 
    skip-backward: 
    skip-backward-outline: 
    skip-forward: 
    skip-forward-outline: 
    skip-next: 
    skip-next-circle: 
    skip-next-circle-outline: 
    skip-next-outline: 
    skip-previous: 
    skip-previous-circle: 
    skip-previous-circle-outline: 
    skip-previous-outline: 
    skull: 
    skull-crossbones: 
    skull-crossbones-outline: 
    skull-outline: 
    skull-scan: 
    skull-scan-outline: 
    skype: 
    skype-business: 
    slack: 
    slash-forward: 
    slash-forward-box: 
    sledding: 
    sleep: 
    sleep-off: 
    slide: 
    slope-downhill: 
    slope-uphill: 
    slot-machine: 
    slot-machine-outline: 
    smart-card: 
    smart-card-off: 
    smart-card-off-outline: 
    smart-card-outline: 
    smart-card-reader: 
    smart-card-reader-outline: 
    smog: 
    smoke: 
    smoke-detector: 
    smoke-detector-alert: 來
    smoke-detector-alert-outline: 冷
    smoke-detector-off: 
    smoke-detector-off-outline: 
    smoke-detector-outline: 
    smoke-detector-variant: 
    smoke-detector-variant-alert: 勞
    smoke-detector-variant-off: 
    smoking: 
    smoking-off: 
    smoking-pipe: 
    smoking-pipe-off: 
    snail: 
    snake: 
    snapchat: 
    snowboard: 
    snowflake: 
    snowflake-alert: 
    snowflake-check: 﩯
    snowflake-melt: 
    snowflake-off: 
    snowflake-thermometer: 並
    snowflake-variant: 
    snowman: 
    snowmobile: 
    snowshoeing: 况
    soccer: 
    soccer-field: 
    social-distance-2-meters: 
    social-distance-6-feet: 
    sofa: 
    sofa-outline: 
    sofa-single: 
    sofa-single-outline: 
    solar-panel: 
    solar-panel-large: 
    solar-power: 
    solar-power-variant: 全
    solar-power-variant-outline: 侀
    soldering-iron: 
    solid: 
    sony-playstation: 
    sort: 
    sort-alphabetical-ascending: 
    sort-alphabetical-ascending-variant: 
    sort-alphabetical-descending: 
    sort-alphabetical-descending-variant: 
    sort-alphabetical-variant: 
    sort-ascending: 
    sort-bool-ascending: 
    sort-bool-ascending-variant: 
    sort-bool-descending: 
    sort-bool-descending-variant: 
    sort-calendar-ascending: 
    sort-calendar-descending: 
    sort-clock-ascending: 
    sort-clock-ascending-outline: 
    sort-clock-descending: 
    sort-clock-descending-outline: 
    sort-descending: 
    sort-numeric-ascending: 
    sort-numeric-ascending-variant: 
    sort-numeric-descending: 
    sort-numeric-descending-variant: 
    sort-numeric-variant: 
    sort-reverse-variant: 
    sort-variant: 
    sort-variant-lock: 
    sort-variant-lock-open: 
    sort-variant-off: 諸
    sort-variant-remove: 
    soundbar: 
    soundcloud: 
    source-branch: 
    source-branch-check: 
    source-branch-minus: 
    source-branch-plus: 
    source-branch-refresh: 
    source-branch-remove: 
    source-branch-sync: 
    source-commit: 
    source-commit-end: 
    source-commit-end-local: 
    source-commit-local: 
    source-commit-next-local: 
    source-commit-start: 
    source-commit-start-next-local: 
    source-fork: 
    source-merge: 
    source-pull: 
    source-repository: 
    source-repository-multiple: 
    soy-sauce: 
    soy-sauce-off: 
    spa: 
    spa-outline: 
    space-invaders: 
    space-station: 
    spade: 
    speaker: 
    speaker-bluetooth: 
    speaker-multiple: 
    speaker-off: 
    speaker-wireless: 
    spear: 
    speedometer: 
    speedometer-medium: 
    speedometer-slow: 
    spellcheck: 
    sphere: 肋
    sphere-off: 凜
    spider: 
    spider-thread: 
    spider-web: 
    spirit-level: 
    spoon-sugar: 
    spotify: 
    spotlight: 
    spotlight-beam: 
    spray: 
    spray-bottle: 
    sprinkler: 
    sprinkler-fire: 列
    sprinkler-variant: 
    sprout: 
    sprout-outline: 
    square: 
    square-circle: 
    square-edit-outline: 
    square-medium: 
    square-medium-outline: 
    square-off: 
    square-off-outline: 
    square-opacity: 
    square-outline: 
    square-root: 
    square-root-box: 
    square-rounded: 
    square-rounded-badge: 暴
    square-rounded-badge-outline: 輻
    square-rounded-outline: 
    square-small: 
    square-wave: 
    squeegee: 
    ssh: 
    stack-exchange: 
    stack-overflow: 
    stackpath: 
    stadium: 
    stadium-variant: 
    stairs: 
    stairs-box: 
    stairs-down: 
    stairs-up: 
    stamper: 
    standard-definition: 
    star: 
    star-box: 
    star-box-multiple: 
    star-box-multiple-outline: 
    star-box-outline: 
    star-check: 
    star-check-outline: 
    star-circle: 
    star-circle-outline: 
    star-cog: 
    star-cog-outline: 
    star-crescent: 
    star-david: 
    star-face: 
    star-four-points: 
    star-four-points-outline: 
    star-half: 
    star-half-full: 
    star-minus: 
    star-minus-outline: 
    star-off: 
    star-off-outline: 
    star-outline: 
    star-plus: 
    star-plus-outline: 
    star-remove: 
    star-remove-outline: 
    star-settings: 
    star-settings-outline: 
    star-shooting: 
    star-shooting-outline: 
    star-three-points: 
    star-three-points-outline: 
    state-machine: 
    steam: 
    steering: 
    steering-off: 
    step-backward: 
    step-backward-2: 
    step-forward: 
    step-forward-2: 
    stethoscope: 
    sticker: 
    sticker-alert: 
    sticker-alert-outline: 
    sticker-check: 
    sticker-check-outline: 
    sticker-circle-outline: 
    sticker-emoji: 
    sticker-minus: 
    sticker-minus-outline: 
    sticker-outline: 
    sticker-plus: 
    sticker-plus-outline: 
    sticker-remove: 
    sticker-remove-outline: 
    sticker-text: 
    sticker-text-outline: 
    stocking: 
    stomach: 
    stool: 樂
    stool-outline: 諾
    stop: 
    stop-circle: 
    stop-circle-outline: 
    storage-tank: 充
    storage-tank-outline: 冀
    store: 
    store-24-hour: 
    store-alert: 
    store-alert-outline: 
    store-check: 
    store-check-outline: 
    store-clock: 
    store-clock-outline: 
    store-cog: 
    store-cog-outline: 
    store-edit: 
    store-edit-outline: 
    store-marker: 
    store-marker-outline: 
    store-minus: 
    store-minus-outline: 
    store-off: 
    store-off-outline: 
    store-outline: 
    store-plus: 
    store-plus-outline: 
    store-remove: 
    store-remove-outline: 
    store-search: 
    store-search-outline: 
    store-settings: 
    store-settings-outline: 
    storefront: 
    storefront-outline: 
    stove: 
    strategy: 
    stretch-to-page: 
    stretch-to-page-outline: 
    string-lights: 
    string-lights-off: 
    subdirectory-arrow-left: 
    subdirectory-arrow-right: 
    submarine: 
    subtitles: 
    subtitles-outline: 
    subway: 
    subway-alert-variant: 
    subway-variant: 
    summit: 
    sun-clock: 勇
    sun-clock-outline: 勺
    sun-compass: 捻
    sun-snowflake: 
    sun-snowflake-variant: 喝
    sun-thermometer: 
    sun-thermometer-outline: 
    sun-wireless: 
    sun-wireless-outline: 
    sunglasses: 
    surfing: 
    surround-sound: 
    surround-sound-2-0: 
    surround-sound-2-1: 
    surround-sound-3-1: 
    surround-sound-5-1: 
    surround-sound-5-1-2: 
    surround-sound-7-1: 
    svg: 
    swap-horizontal: 
    swap-horizontal-bold: 
    swap-horizontal-circle: 
    swap-horizontal-circle-outline: 
    swap-horizontal-variant: 
    swap-vertical: 
    swap-vertical-bold: 
    swap-vertical-circle: 
    swap-vertical-circle-outline: 
    swap-vertical-variant: 
    swim: 
    switch: 
    sword: 
    sword-cross: 
    syllabary-hangul: 
    syllabary-hiragana: 
    syllabary-katakana: 
    syllabary-katakana-halfwidth: 
    symbol: 
    symfony: 
    sync: 
    sync-alert: 
    sync-circle: 
    sync-off: 
    tab: 
    tab-minus: 
    tab-plus: 
    tab-remove: 
    tab-search: 劣
    tab-unselected: 
    table: 
    table-account: 
    table-alert: 
    table-arrow-down: 
    table-arrow-left: 
    table-arrow-right: 
    table-arrow-up: 
    table-border: 
    table-cancel: 
    table-chair: 
    table-check: 
    table-clock: 
    table-cog: 
    table-column: 
    table-column-plus-after: 
    table-column-plus-before: 
    table-column-remove: 
    table-column-width: 
    table-edit: 
    table-eye: 
    table-eye-off: 
    table-furniture: 
    table-headers-eye: 
    table-headers-eye-off: 
    table-heart: 
    table-key: 
    table-large: 
    table-large-plus: 
    table-large-remove: 
    table-lock: 
    table-merge-cells: 
    table-minus: 
    table-multiple: 
    table-network: 
    table-of-contents: 
    table-off: 
    table-picnic: 
    table-pivot: 
    table-plus: 
    table-refresh: 
    table-remove: 
    table-row: 
    table-row-height: 
    table-row-plus-after: 
    table-row-plus-before: 
    table-row-remove: 
    table-search: 
    table-settings: 
    table-split-cell: 
    table-star: 
    table-sync: 
    table-tennis: 
    tablet: 
    tablet-android: 
    tablet-cellphone: 
    tablet-dashboard: 
    taco: 
    tag: 
    tag-arrow-down: 
    tag-arrow-down-outline: 
    tag-arrow-left: 
    tag-arrow-left-outline: 
    tag-arrow-right: 
    tag-arrow-right-outline: 
    tag-arrow-up: 
    tag-arrow-up-outline: 
    tag-check: 啕
    tag-check-outline: 喙
    tag-faces: 
    tag-heart: 
    tag-heart-outline: 
    tag-minus: 
    tag-minus-outline: 
    tag-multiple: 
    tag-multiple-outline: 
    tag-off: 
    tag-off-outline: 
    tag-outline: 
    tag-plus: 
    tag-plus-outline: 
    tag-remove: 
    tag-remove-outline: 
    tag-search: 句
    tag-search-outline: 龜
    tag-text: 
    tag-text-outline: 
    tailwind: 
    tally-mark-1: 請
    tally-mark-2: 謁
    tally-mark-3: 諾
    tally-mark-4: 諭
    tally-mark-5: 謹
    tangram: 
    tank: 
    tanker-truck: 
    tape-drive: 
    tape-measure: 
    target: 
    target-account: 
    target-variant: 
    taxi: 
    tea: 
    tea-outline: 
    teamviewer: 
    teddy-bear: 
    telescope: 
    television: 
    television-ambient-light: 
    television-box: 
    television-classic: 
    television-classic-off: 
    television-guide: 
    television-off: 
    television-pause: 
    television-play: 
    television-shimmer: 
    television-stop: 
    temperature-celsius: 
    temperature-fahrenheit: 
    temperature-kelvin: 
    tennis: 
    tennis-ball: 
    tent: 
    terraform: 
    terrain: 
    test-tube: 
    test-tube-empty: 
    test-tube-off: 
    text: 
    text-account: 
    text-box: 
    text-box-check: 
    text-box-check-outline: 
    text-box-edit: 嗢
    text-box-edit-outline: 塚
    text-box-minus: 
    text-box-minus-outline: 
    text-box-multiple: 
    text-box-multiple-outline: 
    text-box-outline: 
    text-box-plus: 
    text-box-plus-outline: 
    text-box-remove: 
    text-box-remove-outline: 
    text-box-search: 
    text-box-search-outline: 
    text-long: 
    text-recognition: 
    text-search: 
    text-search-variant: 墳
    text-shadow: 
    text-short: 
    text-to-speech: 
    text-to-speech-off: 
    texture: 
    texture-box: 
    theater: 
    theme-light-dark: 
    thermometer: 
    thermometer-alert: 
    thermometer-bluetooth: 
    thermometer-check: 奄
    thermometer-chevron-down: 
    thermometer-chevron-up: 
    thermometer-high: 
    thermometer-lines: 
    thermometer-low: 
    thermometer-minus: 
    thermometer-off: 
    thermometer-plus: 
    thermometer-water: 奔
    thermostat: 
    thermostat-box: 
    thought-bubble: 
    thought-bubble-outline: 
    thumb-down: 
    thumb-down-outline: 
    thumb-up: 
    thumb-up-outline: 
    thumbs-up-down: 
    thumbs-up-down-outline: 邏
    ticket: 
    ticket-account: 
    ticket-confirmation: 
    ticket-confirmation-outline: 
    ticket-outline: 
    ticket-percent: 
    ticket-percent-outline: 
    tie: 
    tilde: 
    tilde-off: 
    timelapse: 
    timeline: 
    timeline-alert: 
    timeline-alert-outline: 
    timeline-check: 
    timeline-check-outline: 
    timeline-clock: 
    timeline-clock-outline: 
    timeline-help: 
    timeline-help-outline: 
    timeline-minus: 
    timeline-minus-outline: 
    timeline-outline: 
    timeline-plus: 
    timeline-plus-outline: 
    timeline-remove: 
    timeline-remove-outline: 
    timeline-text: 
    timeline-text-outline: 
    timer: 
    timer-10: 
    timer-3: 
    timer-alert: 頋
    timer-alert-outline: 頻
    timer-cancel: 鬒
    timer-cancel-outline: 龜
    timer-check: 𢡊
    timer-check-outline: 𢡄
    timer-cog: 襤
    timer-cog-outline: 拉
    timer-edit: 𣏕
    timer-edit-outline: 㮝
    timer-lock: 䀘
    timer-lock-open: 䀹
    timer-lock-open-outline: 𥉉
    timer-lock-outline: 𥳐
    timer-marker: 𧻓
    timer-marker-outline: 齃
    timer-minus: 龎
    timer-minus-outline: 﫚
    timer-music: 﫛
    timer-music-outline: 﫜
    timer-off: 
    timer-off-outline: 
    timer-outline: 
    timer-pause: 﫝
    timer-pause-outline: 﫞
    timer-play: 﫟
    timer-play-outline: 﫠
    timer-plus: 﫡
    timer-plus-outline: 﫢
    timer-refresh: 﫣
    timer-refresh-outline: 﫤
    timer-remove: 﫥
    timer-remove-outline: 﫦
    timer-sand: 
    timer-sand-complete: 咽
    timer-sand-empty: 
    timer-sand-full: 
    timer-sand-paused: 烈
    timer-settings: 濫
    timer-settings-outline: 藍
    timer-star: 﫧
    timer-star-outline: 﫨
    timer-stop: 﫩
    timer-stop-outline: 﫪
    timer-sync: 﫫
    timer-sync-outline: 﫬
    timetable: 
    tire: 
    toaster: 
    toaster-off: 
    toaster-oven: 
    toggle-switch: 
    toggle-switch-off: 
    toggle-switch-off-outline: 
    toggle-switch-outline: 
    toggle-switch-variant: 﨤
    toggle-switch-variant-off: 逸
    toilet: 
    toolbox: 
    toolbox-outline: 
    tools: 
    tooltip: 
    tooltip-account: 
    tooltip-cellphone: 
    tooltip-check: 
    tooltip-check-outline: 
    tooltip-edit: 
    tooltip-edit-outline: 
    tooltip-image: 
    tooltip-image-outline: 
    tooltip-minus: 
    tooltip-minus-outline: 
    tooltip-outline: 
    tooltip-plus: 
    tooltip-plus-outline: 
    tooltip-remove: 
    tooltip-remove-outline: 
    tooltip-text: 
    tooltip-text-outline: 
    tooth: 
    tooth-outline: 
    toothbrush: 
    toothbrush-electric: 
    toothbrush-paste: 
    torch: 
    tortoise: 
    toslink: 
    tournament: 
    tow-truck: 
    tower-beach: 
    tower-fire: 
    town-hall: 
    toy-brick: 
    toy-brick-marker: 
    toy-brick-marker-outline: 
    toy-brick-minus: 
    toy-brick-minus-outline: 
    toy-brick-outline: 
    toy-brick-plus: 
    toy-brick-plus-outline: 
    toy-brick-remove: 
    toy-brick-remove-outline: 
    toy-brick-search: 
    toy-brick-search-outline: 
    track-light: 
    trackpad: 
    trackpad-lock: 
    tractor: 
    tractor-variant: 
    trademark: 
    traffic-cone: 
    traffic-light: 
    traffic-light-outline: 
    train: 
    train-car: 
    train-car-passenger: 
    train-car-passenger-door: 
    train-car-passenger-door-open: 
    train-car-passenger-variant: 
    train-variant: 
    tram: 
    tram-side: 
    transcribe: 
    transcribe-close: 
    transfer: 
    transfer-down: 
    transfer-left: 
    transfer-right: 
    transfer-up: 
    transit-connection: 
    transit-connection-horizontal: 
    transit-connection-variant: 
    transit-detour: 
    transit-skip: 
    transit-transfer: 
    transition: 
    transition-masked: 
    translate: 
    translate-off: 
    transmission-tower: 
    transmission-tower-export: 狼
    transmission-tower-import: 郎
    transmission-tower-off: 隆
    trash-can: 
    trash-can-outline: 
    tray: 
    tray-alert: 
    tray-arrow-down: 
    tray-arrow-up: 
    tray-full: 
    tray-minus: 
    tray-plus: 
    tray-remove: 
    treasure-chest: 
    tree: 
    tree-outline: 
    trello: 
    trending-down: 
    trending-neutral: 
    trending-up: 
    triangle: 
    triangle-outline: 
    triangle-small-down: 行
    triangle-small-up: 降
    triangle-wave: 
    triforce: 
    trophy: 
    trophy-award: 
    trophy-broken: 
    trophy-outline: 
    trophy-variant: 
    trophy-variant-outline: 
    truck: 
    truck-alert: 利
    truck-alert-outline: 吏
    truck-cargo-container: 
    truck-check: 
    truck-check-outline: 
    truck-delivery: 
    truck-delivery-outline: 
    truck-fast: 
    truck-fast-outline: 
    truck-flatbed: 
    truck-minus: 玲
    truck-minus-outline: 寮
    truck-outline: 
    truck-plus: 怜
    truck-plus-outline: 僚
    truck-remove: 瑩
    truck-remove-outline: 尿
    truck-snowflake: 殮
    truck-trailer: 
    trumpet: 
    tshirt-crew: 
    tshirt-crew-outline: 
    tshirt-v: 
    tshirt-v-outline: 
    tsunami: 婢
    tumble-dryer: 
    tumble-dryer-alert: 
    tumble-dryer-off: 
    tune: 
    tune-variant: 
    tune-vertical: 
    tune-vertical-variant: 
    tunnel: 
    tunnel-outline: 
    turbine: 嬨
    turkey: 
    turnstile: 
    turnstile-outline: 
    turtle: 
    twitch: 
    twitter: 
    two-factor-authentication: 
    typewriter: 
    ubisoft: 
    ubuntu: 
    ufo: 
    ufo-outline: 
    ultra-high-definition: 
    umbraco: 
    umbrella: 
    umbrella-beach: 
    umbrella-beach-outline: 
    umbrella-closed: 
    umbrella-closed-outline: 
    umbrella-closed-variant: 
    umbrella-outline: 
    undo: 
    undo-variant: 
    unfold-less-horizontal: 
    unfold-less-vertical: 
    unfold-more-horizontal: 
    unfold-more-vertical: 
    ungroup: 
    unicode: 
    unicorn: 
    unicorn-variant: 
    unicycle: 
    unity: 
    unreal: 
    update: 
    upload: 
    upload-lock: 
    upload-lock-outline: 
    upload-multiple: 
    upload-network: 
    upload-network-outline: 
    upload-off: 
    upload-off-outline: 
    upload-outline: 
    usb: 
    usb-flash-drive: 
    usb-flash-drive-outline: 
    usb-port: 
    vacuum: 裂
    vacuum-outline: 說
    valve: 
    valve-closed: 
    valve-open: 
    van-passenger: 
    van-utility: 
    vanish: 
    vanish-quarter: 
    vanity-light: 
    variable: 
    variable-box: 
    vector-arrange-above: 
    vector-arrange-below: 
    vector-bezier: 
    vector-circle: 
    vector-circle-variant: 
    vector-combine: 
    vector-curve: 
    vector-difference: 
    vector-difference-ab: 
    vector-difference-ba: 
    vector-ellipse: 
    vector-intersection: 
    vector-line: 
    vector-link: 
    vector-point: 
    vector-polygon: 
    vector-polygon-variant: 
    vector-polyline: 
    vector-polyline-edit: 
    vector-polyline-minus: 
    vector-polyline-plus: 
    vector-polyline-remove: 
    vector-radius: 
    vector-rectangle: 
    vector-selection: 
    vector-square: 
    vector-square-close: 
    vector-square-edit: 
    vector-square-minus: 
    vector-square-open: 
    vector-square-plus: 
    vector-square-remove: 
    vector-triangle: 
    vector-union: 
    vhs: 
    vibrate: 
    vibrate-off: 
    video: 
    video-2d: 福
    video-3d: 
    video-3d-off: 
    video-3d-variant: 
    video-4k-box: 
    video-account: 
    video-box: 
    video-box-off: 
    video-check: 
    video-check-outline: 
    video-high-definition: 
    video-image: 
    video-input-antenna: 
    video-input-component: 
    video-input-hdmi: 
    video-input-scart: 
    video-input-svideo: 
    video-marker: 令
    video-marker-outline: 囹
    video-minus: 
    video-minus-outline: 
    video-off: 
    video-off-outline: 
    video-outline: 
    video-plus: 
    video-plus-outline: 
    video-stabilization: 
    video-switch: 
    video-switch-outline: 
    video-vintage: 
    video-wireless: 
    video-wireless-outline: 
    view-agenda: 
    view-agenda-outline: 
    view-array: 
    view-array-outline: 
    view-carousel: 
    view-carousel-outline: 
    view-column: 
    view-column-outline: 
    view-comfy: 
    view-comfy-outline: 
    view-compact: 
    view-compact-outline: 
    view-dashboard: 
    view-dashboard-edit: 牢
    view-dashboard-edit-outline: 磊
    view-dashboard-outline: 
    view-dashboard-variant: 
    view-dashboard-variant-outline: 
    view-day: 
    view-day-outline: 
    view-gallery: 
    view-gallery-outline: 
    view-grid: 
    view-grid-outline: 
    view-grid-plus: 
    view-grid-plus-outline: 
    view-headline: 
    view-list: 
    view-list-outline: 
    view-module: 
    view-module-outline: 
    view-parallel: 
    view-parallel-outline: 
    view-quilt: 
    view-quilt-outline: 
    view-sequential: 
    view-sequential-outline: 
    view-split-horizontal: 
    view-split-vertical: 
    view-stream: 
    view-stream-outline: 
    view-week: 
    view-week-outline: 
    vimeo: 
    violin: 
    virtual-reality: 
    virus: 
    virus-off: 
    virus-off-outline: 
    virus-outline: 
    vlc: 
    voicemail: 
    volcano: 廒
    volcano-outline: 廙
    volleyball: 
    volume-high: 
    volume-low: 
    volume-medium: 
    volume-minus: 
    volume-mute: 
    volume-off: 
    volume-plus: 
    volume-source: 
    volume-variant-off: 
    volume-vibrate: 
    vote: 
    vote-outline: 
    vpn: 
    vuejs: 
    vuetify: 
    walk: 
    wall: 
    wall-fire: 塚
    wall-sconce: 
    wall-sconce-flat: 
    wall-sconce-flat-outline: 
    wall-sconce-flat-variant: 
    wall-sconce-flat-variant-outline: 
    wall-sconce-outline: 
    wall-sconce-round: 
    wall-sconce-round-outline: 
    wall-sconce-round-variant: 
    wall-sconce-round-variant-outline: 
    wallet: 
    wallet-giftcard: 
    wallet-membership: 
    wallet-outline: 
    wallet-plus: 
    wallet-plus-outline: 
    wallet-travel: 
    wallpaper: 
    wan: 
    wardrobe: 
    wardrobe-outline: 
    warehouse: 
    washing-machine: 
    washing-machine-alert: 
    washing-machine-off: 
    watch: 
    watch-export: 
    watch-export-variant: 
    watch-import: 
    watch-import-variant: 
    watch-variant: 
    watch-vibrate: 
    watch-vibrate-off: 
    water: 
    water-alert: 
    water-alert-outline: 
    water-boiler: 
    water-boiler-alert: 
    water-boiler-off: 
    water-check: 
    water-check-outline: 
    water-circle: 
    water-minus: 
    water-minus-outline: 
    water-off: 
    water-off-outline: 
    water-opacity: 
    water-outline: 
    water-percent: 
    water-percent-alert: 
    water-plus: 
    water-plus-outline: 
    water-polo: 
    water-pump: 
    water-pump-off: 
    water-remove: 
    water-remove-outline: 
    water-sync: 
    water-thermometer: 彩
    water-thermometer-outline: 徭
    water-well: 
    water-well-outline: 
    waterfall: 
    watering-can: 
    watering-can-outline: 
    watermark: 
    wave: 
    waveform: 
    waves: 
    waves-arrow-left: 
    waves-arrow-right: 
    waves-arrow-up: 
    waze: 
    weather-cloudy: 
    weather-cloudy-alert: 
    weather-cloudy-arrow-right: 
    weather-cloudy-clock: 
    weather-fog: 
    weather-hail: 
    weather-hazy: 
    weather-hurricane: 
    weather-lightning: 
    weather-lightning-rainy: 
    weather-night: 
    weather-night-partly-cloudy: 
    weather-partly-cloudy: 
    weather-partly-lightning: 
    weather-partly-rainy: 
    weather-partly-snowy: 
    weather-partly-snowy-rainy: 
    weather-pouring: 
    weather-rainy: 
    weather-snowy: 
    weather-snowy-heavy: 
    weather-snowy-rainy: 
    weather-sunny: 
    weather-sunny-alert: 
    weather-sunny-off: 
    weather-sunset: 
    weather-sunset-down: 
    weather-sunset-up: 
    weather-tornado: 
    weather-windy: 
    weather-windy-variant: 
    web: 
    web-box: 
    web-cancel: 
    web-check: 
    web-clock: 
    web-minus: 
    web-off: 
    web-plus: 
    web-refresh: 
    web-remove: 
    web-sync: 
    webcam: 
    webcam-off: 
    webhook: 
    webpack: 
    webrtc: 
    wechat: 
    weight: 
    weight-gram: 
    weight-kilogram: 
    weight-lifter: 
    weight-pound: 
    whatsapp: 
    wheel-barrow: 
    wheelchair: 惘
    wheelchair-accessibility: 
    whistle: 
    whistle-outline: 
    white-balance-auto: 
    white-balance-incandescent: 
    white-balance-iridescent: 
    white-balance-sunny: 
    widgets: 
    widgets-outline: 
    wifi: 
    wifi-alert: 
    wifi-arrow-down: 
    wifi-arrow-left: 
    wifi-arrow-left-right: 
    wifi-arrow-right: 
    wifi-arrow-up: 
    wifi-arrow-up-down: 
    wifi-cancel: 
    wifi-check: 
    wifi-cog: 
    wifi-lock: 
    wifi-lock-open: 
    wifi-marker: 
    wifi-minus: 
    wifi-off: 
    wifi-plus: 
    wifi-refresh: 
    wifi-remove: 
    wifi-settings: 
    wifi-star: 
    wifi-strength-1: 
    wifi-strength-1-alert: 
    wifi-strength-1-lock: 
    wifi-strength-1-lock-open: 
    wifi-strength-2: 
    wifi-strength-2-alert: 
    wifi-strength-2-lock: 
    wifi-strength-2-lock-open: 
    wifi-strength-3: 
    wifi-strength-3-alert: 
    wifi-strength-3-lock: 
    wifi-strength-3-lock-open: 
    wifi-strength-4: 
    wifi-strength-4-alert: 
    wifi-strength-4-lock: 
    wifi-strength-4-lock-open: 
    wifi-strength-alert-outline: 
    wifi-strength-lock-open-outline: 
    wifi-strength-lock-outline: 
    wifi-strength-off: 
    wifi-strength-off-outline: 
    wifi-strength-outline: 
    wifi-sync: 
    wikipedia: 
    wind-power: 慎
    wind-power-outline: 愈
    wind-turbine: 
    wind-turbine-alert: 寧
    wind-turbine-check: 嶺
    window-close: 
    window-closed: 
    window-closed-variant: 
    window-maximize: 
    window-minimize: 
    window-open: 
    window-open-variant: 
    window-restore: 
    window-shutter: 
    window-shutter-alert: 
    window-shutter-cog: 憎
    window-shutter-open: 
    window-shutter-settings: 慠
    windsock: 
    wiper: 
    wiper-wash: 
    wiper-wash-alert: 
    wizard-hat: 
    wordpress: 
    wrap: 
    wrap-disabled: 
    wrench: 
    wrench-clock: 廉
    wrench-outline: 
    xamarin: 
    xml: 
    xmpp: 
    yahoo: 
    yeast: 
    yin-yang: 
    yoga: 
    youtube: 
    youtube-gaming: 
    youtube-studio: 
    youtube-subscription: 
    youtube-tv: 
    yurt: 
    z-wave: 
    zend: 
    zigbee: 
    zip-box: 
    zip-box-outline: 
    zip-disk: 
    zodiac-aquarius: 
    zodiac-aries: 
    zodiac-cancer: 
    zodiac-capricorn: 
    zodiac-gemini: 
    zodiac-leo: 
    zodiac-libra: 
    zodiac-pisces: 
    zodiac-sagittarius: 
    zodiac-scorpio: 
    zodiac-taurus: 
    zodiac-virgo: 
  nextion:
    color:
      blue:
      - 1055
      grey_dark:
      - 10597
      grey_light:
      - 33808
      grey_super_light:
      - 52857
      grey_white:
      - 59164
      red:
      - 63488
      white:
      - 65535
      yellow:
      - 65472
      green:
      - 19818
      orange:
      - 64704
      cyan:
      - 1530
      deep-orange:
      - 64164
      amber:
      - 65024
      'on':
      - 65535
      'off':
      - 35921
      disabled:
      - 48631
      unknown:
      - 6339
      unavailable:
      - 6339
    command:
      alarm_settings: esphome.{{ nspanel_name }}_alarm_settings
      global_settings: esphome.{{ nspanel_name }}_global_settings
      hide: esphome.{{ nspanel_name }}_send_command_hide
      media_player: esphome.{{ nspanel_name }}_media_player
      notification_clear: esphome.{{ nspanel_name }}_notification_clear
      open_entity_settings_page: esphome.{{ nspanel_name }}_open_entity_settings_page
      page_home: esphome.{{ nspanel_name }}_page_home
      page_settings: esphome.{{ nspanel_name }}_page_settings
      printf: esphome.{{ nspanel_name }}_send_command_printf
      qrcode: esphome.{{ nspanel_name }}_qrcode
      set_button: esphome.{{ nspanel_name }}_set_button
      set_climate: esphome.{{ nspanel_name }}_set_climate
      set_component_color: esphome.{{ nspanel_name }}_set_component_color
      set_entity: esphome.{{ nspanel_name }}_set_entity
      show: esphome.{{ nspanel_name }}_send_command_show
      show_all: esphome.{{ nspanel_name }}_send_command_show_all
      text_printf: esphome.{{ nspanel_name }}_send_command_text_printf
      tft_upload: esphome.{{ nspanel_name }}_upload_tft
      value: esphome.{{ nspanel_name }}_send_command_value
      wake_up: esphome.{{ nspanel_name }}_wake_up
    icon:
      domain:
        automation: 
        binary_sensor: 
        button: 
        climate: 
        cover: 
        fan: 
        input_boolean: 
        input_button: 
        light: 
        media_player: 
        person: 
        scene: 
        script: 
        switch: 
        unknown: '{{ all_icons.unknown }}'
      weather:
        lightning: 
        protect: 
        rain: 
        sun: 
        wind: 
        gauge: 
      unknown: '{{ all_icons.unknown }}'
    pic:
      button:
        'off': '35'
        'on': '36'
      weather:
        sunny: '{{ "2" if sun_is_up else "15"}}'
        cloudy: '3'
        rainy: '4'
        pouring: '5'
        snowy: '6'
        hail: '7'
        snowy_rainy: '7'
        fog: '8'
        windy: '9'
        windy_variant: '9'
        windy-variant: '9'
        lightning: '10'
        partlycloudy: '{{ "11" if sun_is_up else "12"}}'
        lightning_rainy: '{{ "13" if sun_is_up else "14"}}'
        lightning-rainy: '{{ "13" if sun_is_up else "14"}}'
        execptional: '{{ "13" if sun_is_up else "14"}}'
        clear_night: '15'
        clear-night: '15'
        unknown: ''
        unavailable: ''
  page:
    current: '{{ states(currentpage) }}'
    home: home
    weatherpages:
    - weather01
    - weather02
    - weather03
    - weather04
    - weather05
    climate: climate
    settings: settings
    boot: boot
    screensaver: screensaver
    light: light
    cover: cover
    fan: fan
    buttonpages:
    - buttonpage01
    - buttonpage02
    - buttonpage03
    - buttonpage04
    notification: notification
    qrcode: qrcode
    entitypages:
    - entitypage01
    - entitypage02
    - entitypage03
    - entitypage04
    alarm: alarm
    keyb_num: keyb_num
    media_player: media_player
    confirm: confirm
  language_tmp: !input language
  language: '{{ language_tmp if language_tmp is string and language_tmp in ["bg",
    "hr", "cs", "da", "nl", "et", "fi", "fr", "de", "el", "he", "hu", "id", "it",
    "lv", "lt", "nb", "pl", "pt", "ro", "ru", "sk", "sl", "es", "sv", "tr", "uk"]
    else "en" }}'
  mui:
    bg:
      weekdays:
        mon: Понеделник
        tue: Вторник
        wed: Сряда
        thu: Четвъртък
        fri: Петък
        sat: Събота
        sun: Неделя
      weekdays_short:
        mon: Mon
        tue: Tue
        wed: Wed
        thu: Thu
        fri: Fri
        sat: Sat
        sun: Sun
      months:
        jan: January
        feb: February
        mar: March
        apr: April
        may: May
        jun: June
        jul: July
        aug: August
        sep: September
        oct: October
        nov: November
        dec: December
      months_short:
        jan: Jan
        feb: Feb
        mar: Mar
        apr: Apr
        may: May
        jun: Jun
        jul: Jul
        aug: Aug
        sep: Sep
        oct: Oct
        nov: Nov
        dec: Dec
      relative_day:
        today: Днес
        tomorrow: Утре
        in_2_days: След 2 дни
        in_3_days: След 3 дни
        in_4_days: След 4 дни
      climate:
        states:
          'on': Включен
          'off': Изключен
        heat: Отопление
      please_confirm: Моля, потвърдете
      unavailable: Недостъпен
      no_name: Няма име
      alarm:
        home: home
        away: away
        night: night
        vacation: vacation
        bypass: bypass
        disarm: disarm
      settings:
        reboot: Reboot
        sleep: Sleep
        brightness: Brightness
        bright: Bright
        dimming: Dimming
        dim: Dim
    cs:
      weekdays:
        mon: Pondělí
        tue: Úterý
        wed: Středa
        thu: Čtvrtek
        fri: Pátek
        sat: Sobota
        sun: Neděle
      weekdays_short:
        mon: Mon
        tue: Tue
        wed: Wed
        thu: Thu
        fri: Fri
        sat: Sat
        sun: Sun
      months:
        jan: January
        feb: February
        mar: March
        apr: April
        may: May
        jun: June
        jul: July
        aug: August
        sep: September
        oct: October
        nov: November
        dec: December
      months_short:
        jan: Jan
        feb: Feb
        mar: Mar
        apr: Apr
        may: May
        jun: Jun
        jul: Jul
        aug: Aug
        sep: Sep
        oct: Oct
        nov: Nov
        dec: Dec
      relative_day:
        today: Dnes
        tomorrow: Zítra
        in_2_days: za 2 dny
        in_3_days: za 3 dny
        in_4_days: za 4 dny
      climate:
        states:
          'on': zapnuto
          'off': vypnuto
        heat: topení
      please_confirm: Potvrďte prosím
      unavailable: Unavailable
      no_name: No name
      alarm:
        home: home
        away: away
        night: night
        vacation: vacation
        bypass: bypass
        disarm: disarm
      settings:
        reboot: Reboot
        sleep: Sleep
        brightness: Brightness
        bright: Bright
        dimming: Dimming
        dim: Dim
    da:
      weekdays:
        mon: Mandag
        tue: Tirsdag
        wed: Onsdag
        thu: Torsdag
        fri: Fredag
        sat: Lørdag
        sun: Søndag
      weekdays_short:
        mon: Mon
        tue: Tue
        wed: Wed
        thu: Thu
        fri: Fri
        sat: Sat
        sun: Sun
      months:
        jan: January
        feb: February
        mar: March
        apr: April
        may: May
        jun: June
        jul: July
        aug: August
        sep: September
        oct: October
        nov: November
        dec: December
      months_short:
        jan: Jan
        feb: Feb
        mar: Mar
        apr: Apr
        may: May
        jun: Jun
        jul: Jul
        aug: Aug
        sep: Sep
        oct: Oct
        nov: Nov
        dec: Dec
      relative_day:
        today: I dag
        tomorrow: I morgen
        in_2_days: om 2 dage
        in_3_days: om 3 dage
        in_4_days: om 4 dage
      climate:
        states:
          'on': på
          'off': false
        heat: varme
      please_confirm: Bekræft venligst
      unavailable: Unavailable
      no_name: No name
      alarm:
        home: home
        away: away
        night: night
        vacation: vacation
        bypass: bypass
        disarm: disarm
      settings:
        reboot: Reboot
        sleep: Sleep
        brightness: Brightness
        bright: Bright
        dimming: Dimming
        dim: Dim
    de:
      weekdays:
        mon: Montag
        tue: Dienstag
        wed: Mittwoch
        thu: Donnerstag
        fri: Freitag
        sat: Samstag
        sun: Sonntag
      weekdays_short:
        mon: Mo.
        tue: Di.
        wed: Mi.
        thu: Do.
        fri: Fr.
        sat: Sa.
        sun: So.
      months:
        jan: Januar
        feb: Februar
        mar: März
        apr: April
        may: Mai
        jun: Juni
        jul: Juli
        aug: August
        sep: September
        oct: Oktober
        nov: November
        dec: Dezember
      months_short:
        jan: Jan.
        feb: Feb.
        mar: März
        apr: Apr.
        may: Mai
        jun: Jun.
        jul: Jul.
        aug: Aug.
        sep: Sept.
        oct: Okt.
        nov: Nov.
        dec: Dez.
      relative_day:
        today: Heute
        tomorrow: Morgen
        in_2_days: in 2 Tagen
        in_3_days: in 3 Tagen
        in_4_days: in 4 Tagen
      climate:
        states:
          'on': ein
          'off': aus
        heat: heizen
      please_confirm: Bitte bestätigen
      unavailable: Unavailable
      no_name: No name
      alarm:
        home: Zuhause
        away: Abwesend
        night: Nacht
        vacation: Urlaub
        bypass: Bypass
        disarm: Deaktiviert
      settings:
        reboot: Reboot
        sleep: Sleep
        brightness: Brightness
        bright: Bright
        dimming: Dimming
        dim: Dim
    el:
      weekdays:
        mon: Δευτέρα
        tue: Τρίτη
        wed: Τετάρτη
        thu: Πέμπτη
        fri: Παρασκευή
        sat: Σάββατο
        sun: Κυριακή
      weekdays_short:
        mon: Δευ
        tue: Τρι
        wed: Τετ
        thu: Πεμ
        fri: Παρ
        sat: Σαβ
        sun: Κυρ
      months:
        jan: Ιανουάριος
        feb: Φεβρουάριος
        mar: Μάρτιος
        apr: Απρίλος
        may: Μάιος
        jun: Ιούνιος
        jul: Ιούλιος
        aug: Αύγουστος
        sep: Σεπτέμβριος
        oct: Οκτώβριος
        nov: Νοέμβριος
        dec: Δεκέμβριος
      months_short:
        jan: Ιαν
        feb: Φεβ
        mar: Μαρ
        apr: Απρ
        may: Μαι
        jun: Ιουν
        jul: Ιουλ
        aug: Αυγ
        sep: Σεπ
        oct: Οκτ
        nov: Νοε
        dec: Δεκ
      relative_day:
        today: Σήμερα
        tomorrow: Αύριο
        in_2_days: σε 2 ημέρες
        in_3_days: σε 3 ημέρες
        in_4_days: σε 4 ημέρες
      climate:
        states:
          'on': Ενεργό
          'off': Ανενεργό
        heat: Θέρμανση
      please_confirm: Παρακαλώ επιβεβαιώστε
      unavailable: Μη διαθέσιμο
      no_name: Χωρίς όνομα
      alarm:
        home: home
        away: away
        night: night
        vacation: vacation
        bypass: bypass
        disarm: disarm
      settings:
        reboot: Reboot
        sleep: Sleep
        brightness: Brightness
        bright: Bright
        dimming: Dimming
        dim: Dim
    en:
      weekdays:
        mon: Monday
        tue: Tuesday
        wed: Wednesday
        thu: Thursday
        fri: Friday
        sat: Saturday
        sun: Sunday
      weekdays_short:
        mon: Mon
        tue: Tue
        wed: Wed
        thu: Thu
        fri: Fri
        sat: Sat
        sun: Sun
      months:
        jan: January
        feb: February
        mar: March
        apr: April
        may: May
        jun: June
        jul: July
        aug: August
        sep: September
        oct: October
        nov: November
        dec: December
      months_short:
        jan: Jan
        feb: Feb
        mar: Mar
        apr: Apr
        may: May
        jun: Jun
        jul: Jul
        aug: Aug
        sep: Sep
        oct: Oct
        nov: Nov
        dec: Dec
      relative_day:
        today: Today
        tomorrow: Tomorrow
        in_2_days: In 2 days
        in_3_days: In 3 days
        in_4_days: In 4 days
      climate:
        states:
          'on': true
          'off': false
        heat: heat
      please_confirm: Please confirm
      unavailable: Unavailable
      no_name: No name
      alarm:
        home: Home
        away: Away
        night: Night
        vacation: Holiday
        bypass: Custom bypass
        disarm: Disarm
      settings:
        reboot: Reboot
        sleep: Sleep mode
        brightness: Brightness
        bright: Bright
        dimming: Dimming
        dim: Dim
    es:
      weekdays:
        mon: Lunes
        tue: Martes
        wed: Miércoles
        thu: Jueves
        fri: Viernes
        sat: Sábado
        sun: Domingo
      weekdays_short:
        mon: Lun
        tue: Mar
        wed: Mie
        thu: Jue
        fri: Vie
        sat: Sab
        sun: Dom
      months:
        jan: Enero
        feb: Febrero
        mar: Marzo
        apr: Abril
        may: Mayo
        jun: Junio
        jul: Julio
        aug: Agosto
        sep: Septiembre
        oct: Octubre
        nov: Noviembre
        dec: Diciembre
      months_short:
        jan: Ene
        feb: Feb
        mar: Mar
        apr: Abr
        may: May
        jun: Jun
        jul: Jul
        aug: Ago
        sep: Sep
        oct: Oct
        nov: Nov
        dec: Dic
      relative_day:
        today: Hoy
        tomorrow: Mañana
        in_2_days: En 2 días
        in_3_days: En 3 días
        in_4_days: En 4 días
      climate:
        states:
          'on': Encendido
          'off': Apagado
        heat: Calentar
      please_confirm: Por favor, confirme
      unavailable: No disponible
      no_name: Sin nombre
      alarm:
        home: Casa
        away: Fuera
        night: Noche
        vacation: Vacaciones
        bypass: Bypass
        disarm: Desarmar
      settings:
        reboot: Reiniciar
        sleep: Dormir
        brightness: Brillo
        bright: Brillante
        dimming: Atenuación
        dim: Oscuro
    et:
      weekdays:
        mon: Esmaspäev
        tue: Teisipäev
        wed: Kolmapäev
        thu: Neljapäev
        fri: Reede
        sat: Laupäev
        sun: Pühapäev
      weekdays_short:
        mon: Mon
        tue: Tue
        wed: Wed
        thu: Thu
        fri: Fri
        sat: Sat
        sun: Sun
      months:
        jan: January
        feb: February
        mar: March
        apr: April
        may: May
        jun: June
        jul: July
        aug: August
        sep: September
        oct: October
        nov: November
        dec: December
      months_short:
        jan: Jan
        feb: Feb
        mar: Mar
        apr: Apr
        may: May
        jun: Jun
        jul: Jul
        aug: Aug
        sep: Sep
        oct: Oct
        nov: Nov
        dec: Dec
      relative_day:
        today: Täna
        tomorrow: Homme
        in_2_days: 2 päeva pärast
        in_3_days: 3 päeva pärast
        in_4_days: 4 päeva pärast
      climate:
        states:
          'on': aadressil
          'off': välja
        heat: soojus
      please_confirm: Palun kinnitage
      unavailable: Unavailable
      no_name: No name
      alarm:
        home: home
        away: away
        night: night
        vacation: vacation
        bypass: bypass
        disarm: disarm
      settings:
        reboot: Reboot
        sleep: Sleep
        brightness: Brightness
        bright: Bright
        dimming: Dimming
        dim: Dim
    fi:
      weekdays:
        mon: maanantai
        tue: tiistai
        wed: keskiviikko
        thu: torstai
        fri: perjantai
        sat: lauantai
        sun: sunnuntai
      weekdays_short:
        mon: ma
        tue: ti
        wed: ke
        thu: to
        fri: pe
        sat: la
        sun: su
      months:
        jan: tammikuu
        feb: helmikuu
        mar: maaliskuu
        apr: huhtikuu
        may: toukokuu
        jun: kesäkuu
        jul: heinäkuu
        aug: elokuu
        sep: syyskuu
        oct: lokakuu
        nov: marraskuu
        dec: joulukuu
      months_short:
        jan: tammi
        feb: helmi
        mar: maalis
        apr: huhti
        may: touko
        jun: kesä
        jul: heinä
        aug: elo
        sep: syys
        oct: loka
        nov: marras
        dec: joulu
      relative_day:
        today: Tänään
        tomorrow: Huomenna
        in_2_days: 2 päivän päästä
        in_3_days: 3 päivän päästä
        in_4_days: 4 päivän päästä
      climate:
        states:
          'on': 'On'
          'off': 'Off'
        heat: lämpö
      please_confirm: Vahvista
      unavailable: ei saatavilla
      no_name: nimetön
      alarm:
        home: Kotona
        away: Poissa
        night: Yö
        vacation: Loma
        bypass: Ohitus
        disarm: Pois
      settings:
        reboot: Uudelleenkäynnistys
        sleep: Lepotila
        brightness: Kirkkaus
        bright: Kirkas
        dimming: Himmennys
        dim: Himmeä
    fr:
      weekdays:
        mon: Lundi
        tue: Mardi
        wed: Mercredi
        thu: Jeudi
        fri: Vendredi
        sat: Samedi
        sun: Dimanche
      weekdays_short:
        mon: Lun
        tue: Mar
        wed: Mer
        thu: Jeu
        fri: Ven
        sat: Sam
        sun: Dim
      months:
        jan: Janvier
        feb: Février
        mar: Mars
        apr: Avril
        may: Mai
        jun: Juin
        jul: Juillet
        aug: Août
        sep: Septembre
        oct: Octobre
        nov: Novembre
        dec: Decembre
      months_short:
        jan: Jan
        feb: Feb
        mar: Mar
        apr: Apr
        may: Mai
        jun: Jun
        jul: Jul
        aug: Aoû
        sep: Sep
        oct: Oct
        nov: Nov
        dec: Dec
      relative_day:
        today: Aujourd hui
        tomorrow: Demain
        in_2_days: Dans 2 jours
        in_3_days: Dans 3 jours
        in_4_days: Dans 4 jours
      climate:
        states:
          'on': true
          'off': false
        heat: Chaleur
      please_confirm: Veuillez confirmer
      unavailable: Indisponible
      no_name: Sans nom
      alarm:
        home: Présence
        away: Absence
        night: Nuit
        vacation: Vacances
        bypass: Bypass
        disarm: Désarmée
      settings:
        reboot: Redémarrage
        sleep: Veille
        brightness: Luminosité
        bright: Clair
        dimming: Atténuation
        dim: Sombre
    he:
      weekdays:
        mon: ינש
        tue: ישילש
        wed: יעיבר
        thu: ישימח
        fri: ישיש
        sat: תבש
        sun: ןושאר
      weekdays_short:
        mon: ב
        tue: ג
        wed: ד
        thu: ה
        fri: ו
        sat: ש
        sun: א
      months:
        jan: ינואר
        feb: פברואר
        mar: מרץ
        apr: אפריל
        may: מאי
        jun: יוני
        jul: יולי
        aug: אוגוסט
        sep: ספטמבר
        oct: אוקטובר
        nov: נובמבר
        dec: דצמבר
      months_short:
        jan: ינו
        feb: פבר
        mar: מרץ
        apr: אפר
        may: מאי
        jun: יונ
        jul: יול
        aug: אוג
        sep: ספט
        oct: אוק
        nov: נוב
        dec: דצמ
      relative_day:
        today: םויה
        tomorrow: רחמ
        in_2_days: םיימוי דוע
        in_3_days: םימי 3 דוע
        in_4_days: םימי 4 דוע
      climate:
        states:
          'on': קולד
          'off': יובכ
        heat: םוח
      please_confirm: רשא השקבב
      unavailable: Unavailable
      no_name: No name
      alarm:
        home: home
        away: away
        night: night
        vacation: vacation
        bypass: bypass
        disarm: disarm
      settings:
        reboot: Reboot
        sleep: Sleep
        brightness: Brightness
        bright: Bright
        dimming: Dimming
        dim: Dim
    hr:
      weekdays:
        mon: Ponedjeljak
        tue: Utorak
        wed: Srijeda
        thu: Četvrtak
        fri: Petak
        sat: Subota
        sun: Nedjelja
      weekdays_short:
        mon: Pon
        tue: Uto
        wed: Sri
        thu: Čet
        fri: Pet
        sat: Sub
        sun: Ned
      months:
        jan: Siječanj
        feb: Veljača
        mar: Ožujak
        apr: Travanj
        may: Svibanj
        jun: Lipanj
        jul: Srpanj
        aug: Kolovoz
        sep: Rujan
        oct: Listopad
        nov: Studeni
        dec: Prosinac
      months_short:
        jan: Sij
        feb: Velj
        mar: Ožu
        apr: Tra
        may: Svi
        jun: Lip
        jul: Srp
        aug: Kol
        sep: Ruj
        oct: Lis
        nov: Stu
        dec: Pro
      relative_day:
        today: Danas
        tomorrow: Sutra
        in_2_days: Za 2 dana
        in_3_days: Za 3 dana
        in_4_days: Za 4 dana
      climate:
        states:
          'on': Uključeno
          'off': Isključeno
        heat: Toplina
      please_confirm: Molim potvrdite
      unavailable: Nedostupno
      no_name: Bez imena
      alarm:
        home: home
        away: away
        night: night
        vacation: vacation
        bypass: bypass
        disarm: disarm
      settings:
        reboot: Reboot
        sleep: Sleep
        brightness: Brightness
        bright: Bright
        dimming: Dimming
        dim: Dim
    hu:
      weekdays:
        mon: Hétfő
        tue: Kedd
        wed: Szerda
        thu: Csütörtök
        fri: Péntek
        sat: Szombat
        sun: Vasárnap
      weekdays_short:
        mon: Mon
        tue: Tue
        wed: Wed
        thu: Thu
        fri: Fri
        sat: Sat
        sun: Sun
      months:
        jan: January
        feb: February
        mar: March
        apr: April
        may: May
        jun: June
        jul: July
        aug: August
        sep: September
        oct: October
        nov: November
        dec: December
      months_short:
        jan: Jan
        feb: Feb
        mar: Mar
        apr: Apr
        may: May
        jun: Jun
        jul: Jul
        aug: Aug
        sep: Sep
        oct: Oct
        nov: Nov
        dec: Dec
      relative_day:
        today: Ma
        tomorrow: Holnap
        in_2_days: 2 nap múlva
        in_3_days: 3 nap múlva
        in_4_days: 4 nap múlva
      climate:
        states:
          'on': a oldalon
          'off': false
        heat: hő
      please_confirm: Kérjük, erősítse meg
      unavailable: Unavailable
      no_name: No name
      alarm:
        home: home
        away: away
        night: night
        vacation: vacation
        bypass: bypass
        disarm: disarm
      settings:
        reboot: Reboot
        sleep: Sleep
        brightness: Brightness
        bright: Bright
        dimming: Dimming
        dim: Dim
    id:
      weekdays:
        mon: Senin
        tue: Selasa
        wed: Rabu
        thu: Kamis
        fri: Jumat
        sat: Sabtu
        sun: Minggu
      weekdays_short:
        mon: Mon
        tue: Tue
        wed: Wed
        thu: Thu
        fri: Fri
        sat: Sat
        sun: Sun
      months:
        jan: January
        feb: February
        mar: March
        apr: April
        may: May
        jun: June
        jul: July
        aug: August
        sep: September
        oct: October
        nov: November
        dec: December
      months_short:
        jan: Jan
        feb: Feb
        mar: Mar
        apr: Apr
        may: May
        jun: Jun
        jul: Jul
        aug: Aug
        sep: Sep
        oct: Oct
        nov: Nov
        dec: Dec
      relative_day:
        today: Hari ini
        tomorrow: Besok
        in_2_days: dalam 2 Hari
        in_3_days: dalam 3 Hari
        in_4_days: dalam 4 Hari
      climate:
        states:
          'on': true
          'off': false
        heat: panas
      please_confirm: Mohon konfirmasi
      unavailable: Unavailable
      no_name: No name
      alarm:
        home: home
        away: away
        night: night
        vacation: vacation
        bypass: bypass
        disarm: disarm
      settings:
        reboot: Reboot
        sleep: Sleep
        brightness: Brightness
        bright: Bright
        dimming: Dimming
        dim: Dim
    it:
      weekdays:
        mon: Lunedì
        tue: Martedì
        wed: Mercoledì
        thu: Giovedì
        fri: Venerdì
        sat: Sabato
        sun: Domenica
      weekdays_short:
        mon: Lun
        tue: Mar
        wed: Mer
        thu: Gio
        fri: Ven
        sat: Sab
        sun: Dom
      months:
        jan: Gennaio
        feb: Febbraio
        mar: Marzo
        apr: Aprile
        may: Maggio
        jun: Giugno
        jul: Luglio
        aug: Agosto
        sep: Settembre
        oct: Ottobre
        nov: Novembre
        dec: Dicembre
      months_short:
        jan: Gen
        feb: Feb
        mar: Mar
        apr: Apr
        may: Mag
        jun: Giu
        jul: Lug
        aug: Ago
        sep: Set
        oct: Ott
        nov: Nov
        dec: Dic
      relative_day:
        today: Oggi
        tomorrow: Domani
        in_2_days: Dopodomani
        in_3_days: In 3 giorni
        in_4_days: In 4 giorni
      climate:
        states:
          'on': true
          'off': false
        heat: Riscaldamento
      please_confirm: Confermare
      unavailable: Unavailable
      no_name: No name
      alarm:
        home: Casa
        away: Fuori di Casa
        night: Notte
        vacation: Vacanza
        bypass: Bypass
        disarm: Disarmato
      settings:
        reboot: Riavvio
        sleep: Modalità ECO
        brightness: Luminosità
        bright: Modalità Luminosa
        dimming: Regolazione
        dim: Reg.
    lt:
      weekdays:
        mon: Pirmadienis
        tue: Antradienis
        wed: Trečiadienis
        thu: Ketvirtadienis
        fri: Penktadienis
        sat: Šeštadienis
        sun: Sekmadienis
      weekdays_short:
        mon: Mon
        tue: Tue
        wed: Wed
        thu: Thu
        fri: Fri
        sat: Sat
        sun: Sun
      months:
        jan: January
        feb: February
        mar: March
        apr: April
        may: May
        jun: June
        jul: July
        aug: August
        sep: September
        oct: October
        nov: November
        dec: December
      months_short:
        jan: Jan
        feb: Feb
        mar: Mar
        apr: Apr
        may: May
        jun: Jun
        jul: Jul
        aug: Aug
        sep: Sep
        oct: Oct
        nov: Nov
        dec: Dec
      relative_day:
        today: Šiandien
        tomorrow: Rytoj
        in_2_days: per 2 dienas
        in_3_days: per 3 dienas
        in_4_days: per 4 dienas
      climate:
        states:
          'on': svetainėje
          'off': išjungta
        heat: šiluma
      please_confirm: Prašome patvirtinti
      unavailable: Unavailable
      no_name: No name
      alarm:
        home: home
        away: away
        night: night
        vacation: vacation
        bypass: bypass
        disarm: disarm
      settings:
        reboot: Reboot
        sleep: Sleep
        brightness: Brightness
        bright: Bright
        dimming: Dimming
        dim: Dim
    lv:
      weekdays:
        mon: Pirmdiena
        tue: Otrdiena
        wed: Trešdiena
        thu: Ceturtdiena
        fri: Piektdiena
        sat: Sestdiena
        sun: Svētdiena
      weekdays_short:
        mon: Mon
        tue: Tue
        wed: Wed
        thu: Thu
        fri: Fri
        sat: Sat
        sun: Sun
      months:
        jan: January
        feb: February
        mar: March
        apr: April
        may: May
        jun: June
        jul: July
        aug: August
        sep: September
        oct: October
        nov: November
        dec: December
      months_short:
        jan: Jan
        feb: Feb
        mar: Mar
        apr: Apr
        may: May
        jun: Jun
        jul: Jul
        aug: Aug
        sep: Sep
        oct: Oct
        nov: Nov
        dec: Dec
      relative_day:
        today: Šodien
        tomorrow: Rīt
        in_2_days: pēc 2 dienām
        in_3_days: pēc 3 dienām
        in_4_days: pēc 4 dienām
      climate:
        states:
          'on': vietnē
          'off': izslēgts
        heat: siltums
      please_confirm: Lūdzu, apstipriniet
      unavailable: Unavailable
      no_name: No name
      alarm:
        home: home
        away: away
        night: night
        vacation: vacation
        bypass: bypass
        disarm: disarm
      settings:
        reboot: Reboot
        sleep: Sleep
        brightness: Brightness
        bright: Bright
        dimming: Dimming
        dim: Dim
    nb:
      weekdays:
        mon: Mandag
        tue: Tirsdag
        wed: Onsdag
        thu: Torsdag
        fri: Fredag
        sat: Lørdag
        sun: Søndag
      weekdays_short:
        mon: Man
        tue: Tir
        wed: Ons
        thu: Tor
        fri: Fre
        sat: Lør
        sun: Søn
      months:
        jan: Januar
        feb: Februar
        mar: Mars
        apr: April
        may: Mai
        jun: Juni
        jul: Juli
        aug: August
        sep: September
        oct: Oktober
        nov: November
        dec: Desember
      months_short:
        jan: Jan
        feb: Feb
        mar: Mar
        apr: Apr
        may: Mai
        jun: Jun
        jul: Jul
        aug: Aug
        sep: Sep
        oct: Okt
        nov: Nov
        dec: Des
      relative_day:
        today: I dag
        tomorrow: I morgen
        in_2_days: om 2 dager
        in_3_days: om 3 dager
        in_4_days: om 4 dager
      climate:
        states:
          'on': på
          'off': av
        heat: varme
      please_confirm: Vennligst bekreft
      unavailable: Unavailable
      no_name: No name
      alarm:
        home: home
        away: away
        night: night
        vacation: vacation
        bypass: bypass
        disarm: disarm
      settings:
        reboot: Reboot
        sleep: Sleep
        brightness: Brightness
        bright: Bright
        dimming: Dimming
        dim: Dim
    nl:
      weekdays:
        mon: Maandag
        tue: Dinsdag
        wed: Woensdag
        thu: Donderdag
        fri: Vrijdag
        sat: Zaterdag
        sun: Zondag
      weekdays_short:
        mon: Ma
        tue: Di
        wed: Wo
        thu: Do
        fri: Vr
        sat: Za
        sun: Zo
      months:
        jan: Januari
        feb: Februari
        mar: Maart
        apr: April
        may: Mei
        jun: Juni
        jul: Juli
        aug: Augustus
        sep: September
        oct: Oktober
        nov: November
        dec: December
      months_short:
        jan: Jan
        feb: Feb
        mar: Mar
        apr: Apr
        may: Mei
        jun: Jun
        jul: Jul
        aug: Aug
        sep: Sep
        oct: Okt
        nov: Nov
        dec: Dec
      relative_day:
        today: Vandaag
        tomorrow: Morgen
        in_2_days: Overmorgen
        in_3_days: Over 3 dagen
        in_4_days: Over 4 dagen
      climate:
        states:
          'on': aan
          'off': uit
        heat: verwarm
      please_confirm: Bevestig
      unavailable: Niet beschikbaar
      no_name: Geen naam
      alarm:
        home: Thuis
        away: Weg
        night: Nacht
        vacation: Vakantie
        bypass: Omzeil
        disarm: Ontgrendel
      settings:
        reboot: Herstarten
        sleep: Slaap mode
        brightness: Helderheid
        bright: Helder
        dimming: Dimmen
        dim: Gedimd
    pl:
      weekdays:
        mon: Poniedziałek
        tue: Wtorek
        wed: Środa
        thu: Czwartek
        fri: Piątek
        sat: Sobota
        sun: Niedziela
      weekdays_short:
        mon: pon.
        tue: wt.
        wed: śr.
        thu: czw.
        fri: pt.
        sat: sob.
        sun: niedz.
      months:
        jan: styczeń
        feb: luty
        mar: marzec
        apr: kwiecień
        may: maj
        jun: czerwiec
        jul: lipiec
        aug: sierpień
        sep: wrzesień
        oct: październik
        nov: listopad
        dec: grudzień
      months_short:
        jan: sty.
        feb: lut.
        mar: mar.
        apr: kwi.
        may: maj
        jun: cze.
        jul: lip.
        aug: sie.
        sep: wrz.
        oct: paź.
        nov: lis.
        dec: gru.
      relative_day:
        today: Dzisiaj
        tomorrow: Jutro
        in_2_days: za 2 dni
        in_3_days: za 3 dni
        in_4_days: za 4 dni
      climate:
        states:
          'on': wł
          'off': wył
        heat: ciepło
      please_confirm: Proszę o potwierdzenie
      unavailable: Niedostępny
      no_name: Bez nazwy
      alarm:
        home: Dom
        away: Poza domem
        night: Noc
        vacation: Wakacje
        bypass: Bypass
        disarm: Rozbojenie
      settings:
        reboot: Restartuj
        sleep: Usypianie
        brightness: Jasność
        bright: Jasny
        dimming: Ściemnianie
        dim: Ciemny
    pt:
      weekdays:
        mon: Segunda-feira
        tue: Terça-feira
        wed: Quarta-feira
        thu: Quinta-feira
        fri: Sexta-feira
        sat: Sábado
        sun: Domingo
      weekdays_short:
        mon: Seg
        tue: Ter
        wed: Qua
        thu: Qui
        fri: Sex
        sat: Sáb
        sun: Dom
      months:
        jan: Janeiro
        feb: Fevereiro
        mar: Março
        apr: Abril
        may: Maio
        jun: Junho
        jul: Julho
        aug: Agosto
        sep: Setembro
        oct: Outubro
        nov: Novembro
        dec: Dezembro
      months_short:
        jan: Jan
        feb: Fev
        mar: Mar
        apr: Abr
        may: Mai
        jun: Jun
        jul: Jul
        aug: Ago
        sep: Set
        oct: Out
        nov: Nov
        dec: Dez
      relative_day:
        today: Hoje
        tomorrow: Amanhã
        in_2_days: Em 2 dias
        in_3_days: Em 3 dias
        in_4_days: Em 4 dias
      climate:
        states:
          'on': Ligado
          'off': Desligado
        heat: Aquecimento
      please_confirm: Confirme, por favor
      unavailable: Indisponível
      no_name: Sem nome
      alarm:
        home: Em casa
        away: Ausente
        night: Noturno
        vacation: Férias
        bypass: Personalizado
        disarm: Desarmar
      settings:
        reboot: Reiniciar
        sleep: Dormir
        brightness: Brilho
        bright: Claro
        dimming: Escurecer
        dim: Escuro
    ro:
      weekdays:
        mon: Luni
        tue: Marți
        wed: Miercuri
        thu: Joi
        fri: Vineri
        sat: Sâmbătă
        sun: Duminică
      weekdays_short:
        mon: Mon
        tue: Tue
        wed: Wed
        thu: Thu
        fri: Fri
        sat: Sat
        sun: Sun
      months:
        jan: January
        feb: February
        mar: March
        apr: April
        may: May
        jun: June
        jul: July
        aug: August
        sep: September
        oct: October
        nov: November
        dec: December
      months_short:
        jan: Jan
        feb: Feb
        mar: Mar
        apr: Apr
        may: May
        jun: Jun
        jul: Jul
        aug: Aug
        sep: Sep
        oct: Oct
        nov: Nov
        dec: Dec
      relative_day:
        today: Astăzi
        tomorrow: Mâine
        in_2_days: în 2 zile
        in_3_days: în 3 zile
        in_4_days: în 4 zile
      climate:
        states:
          'on': pe
          'off': false
        heat: căldură
      please_confirm: Vă rugăm să confirmați
      unavailable: Unavailable
      no_name: No name
      alarm:
        home: home
        away: away
        night: night
        vacation: vacation
        bypass: bypass
        disarm: disarm
      settings:
        reboot: Reboot
        sleep: Sleep
        brightness: Brightness
        bright: Bright
        dimming: Dimming
        dim: Dim
    ru:
      weekdays:
        mon: Понедельник
        tue: Вторник
        wed: Среда
        thu: Четверг
        fri: Пятница
        sat: Суббота
        sun: Воскресение
      weekdays_short:
        mon: Mon
        tue: Tue
        wed: Wed
        thu: Thu
        fri: Fri
        sat: Sat
        sun: Sun
      months:
        jan: January
        feb: February
        mar: March
        apr: April
        may: May
        jun: June
        jul: July
        aug: August
        sep: September
        oct: October
        nov: November
        dec: December
      months_short:
        jan: Jan
        feb: Feb
        mar: Mar
        apr: Apr
        may: May
        jun: Jun
        jul: Jul
        aug: Aug
        sep: Sep
        oct: Oct
        nov: Nov
        dec: Dec
      relative_day:
        today: Сегодня
        tomorrow: Завтра
        in_2_days: на 2 дня
        in_3_days: на 3 дня
        in_4_days: на 4 дня
      climate:
        states:
          'on': включено
          'off': выключено
        heat: нагрев
      please_confirm: Пожалуйста, подтвердите
      unavailable: Unavailable
      no_name: No name
      alarm:
        home: home
        away: away
        night: night
        vacation: vacation
        bypass: bypass
        disarm: disarm
      settings:
        reboot: Reboot
        sleep: Sleep
        brightness: Brightness
        bright: Bright
        dimming: Dimming
        dim: Dim
    sk:
      weekdays:
        mon: Pondelok
        tue: Utorok
        wed: Streda
        thu: Štvrtok
        fri: Piatok
        sat: Sobota
        sun: Nedeľa
      weekdays_short:
        mon: Po
        tue: Ut
        wed: St
        thu: Št
        fri: Pi
        sat: So
        sun: Ne
      months:
        jan: Január
        feb: Február
        mar: Marec
        apr: Apríl
        may: Máj
        jun: Jún
        jul: Júl
        aug: August
        sep: September
        oct: Október
        nov: November
        dec: December
      months_short:
        jan: Jan
        feb: Feb
        mar: Mar
        apr: Apr
        may: Máj
        jun: Jún
        jul: Júl
        aug: Aug
        sep: Sep
        oct: Oct
        nov: Nov
        dec: Dec
      relative_day:
        today: Dnes
        tomorrow: Zajtra
        in_2_days: O 2 dni
        in_3_days: O 3 dni
        in_4_days: O 4 dni
      climate:
        states:
          'on': Zap.
          'off': Vyp.
        heat: Kúrenie
      please_confirm: Potvrďte, prosím
      unavailable: Nedostupné
      no_name: Bez názvu
      alarm:
        home: Doma
        away: Preč
        night: Noc
        vacation: Dovolenka
        bypass: Bypass
        disarm: Nechránené
      settings:
        reboot: Reštartovať
        sleep: Spánok
        brightness: Jas
        bright: Zosvetlenie
        dimming: Stmavenie
        dim: Stmavenie
    sl:
      weekdays:
        mon: Ponedeljek
        tue: Torek
        wed: Sreda
        thu: Četrtek
        fri: Petek
        sat: Sobota
        sun: Nedelja
      weekdays_short:
        mon: Pon
        tue: Tor
        wed: Sre
        thu: Čet
        fri: Pet
        sat: Sob
        sun: Ned
      months:
        jan: Januar
        feb: Februar
        mar: Marec
        apr: April
        may: Maj
        jun: Junij
        jul: Julij
        aug: Avgust
        sep: September
        oct: Oktober
        nov: November
        dec: December
      months_short:
        jan: Jan
        feb: Feb
        mar: Mar
        apr: Apr
        may: Maj
        jun: Jun
        jul: Jul
        aug: Avg
        sep: Sep
        oct: Okt
        nov: Nov
        dec: Dec
      relative_day:
        today: Danes
        tomorrow: Jutri
        in_2_days: v 2 dneh
        in_3_days: v 3 dneh
        in_4_days: v 4 dneh
      climate:
        states:
          'on': na
          'off': izklop
        heat: toplota
      please_confirm: Prosimo, potrdite
      unavailable: Unavailable
      no_name: No name
      alarm:
        home: Doma
        away: Odsoten
        night: Noč
        vacation: Dopust
        bypass: Območje izlopljeno
        disarm: Izklop
      settings:
        reboot: Ponovni zagon
        sleep: Spanje
        brightness: Osvetlitev
        bright: Svetlo
        dimming: Zatemnitev
        dim: Temno
    sv:
      weekdays:
        mon: Måndag
        tue: Tisdag
        wed: Onsdag
        thu: Torsdag
        fri: Fredag
        sat: Lördag
        sun: Söndag
      weekdays_short:
        mon: Mån
        tue: Tis
        wed: Ons
        thu: Tors
        fri: Fre
        sat: Lör
        sun: Sön
      months:
        jan: Januari
        feb: Februari
        mar: Mars
        apr: April
        may: Maj
        jun: Juni
        jul: Juli
        aug: Augusti
        sep: September
        oct: Oktober
        nov: November
        dec: December
      months_short:
        jan: Jan
        feb: Feb
        mar: Mar
        apr: Apr
        may: Maj
        jun: Jun
        jul: Jul
        aug: Aug
        sep: Sep
        oct: Okt
        nov: Nov
        dec: Dec
      relative_day:
        today: Idag
        tomorrow: Imorgon
        in_2_days: Om 2 dagar
        in_3_days: Om 3 dagar
        in_4_days: Om 4 dagar
      climate:
        states:
          'on': På
          'off': Av
        heat: värme
      please_confirm: Vänligen bekräfta
      unavailable: Otillgänglig
      no_name: Inget namn
      alarm:
        home: Hemma
        away: Borta
        night: Natt
        vacation: Semester
        bypass: Förbigå
        disarm: Avaktivera
      settings:
        reboot: Starta om
        sleep: Vila
        brightness: Ljusstyrka
        bright: Ljust
        dimming: Dimmning
        dim: Dimma
    tr:
      weekdays:
        mon: Pazartesi
        tue: Salı
        wed: Çarşamba
        thu: Perşembe
        fri: Cuma
        sat: Cumartesi
        sun: Pazar
      weekdays_short:
        mon: Mon
        tue: Tue
        wed: Wed
        thu: Thu
        fri: Fri
        sat: Sat
        sun: Sun
      months:
        jan: January
        feb: February
        mar: March
        apr: April
        may: May
        jun: June
        jul: July
        aug: August
        sep: September
        oct: October
        nov: November
        dec: December
      months_short:
        jan: Jan
        feb: Feb
        mar: Mar
        apr: Apr
        may: May
        jun: Jun
        jul: Jul
        aug: Aug
        sep: Sep
        oct: Oct
        nov: Nov
        dec: Dec
      relative_day:
        today: Bugün
        tomorrow: Yarın
        in_2_days: 2 Gün İçinde
        in_3_days: 3 Gün İçinde
        in_4_days: 4 Gün İçinde
      climate:
        states:
          'on': üzerinde
          'off': kapalı
        heat: ısı
      please_confirm: Lütfen onaylayın
      unavailable: Unavailable
      no_name: No name
      alarm:
        home: home
        away: away
        night: night
        vacation: vacation
        bypass: bypass
        disarm: disarm
      settings:
        reboot: Reboot
        sleep: Sleep
        brightness: Brightness
        bright: Bright
        dimming: Dimming
        dim: Dim
    uk:
      weekdays:
        mon: Понеділок
        tue: Вівторок
        wed: середа
        thu: четвер
        fri: п ятниця
        sat: Субота
        sun: Неділя
      weekdays_short:
        mon: Mon
        tue: Tue
        wed: Wed
        thu: Thu
        fri: Fri
        sat: Sat
        sun: Sun
      months:
        jan: January
        feb: February
        mar: March
        apr: April
        may: May
        jun: June
        jul: July
        aug: August
        sep: September
        oct: October
        nov: November
        dec: December
      months_short:
        jan: Jan
        feb: Feb
        mar: Mar
        apr: Apr
        may: May
        jun: Jun
        jul: Jul
        aug: Aug
        sep: Sep
        oct: Oct
        nov: Nov
        dec: Dec
      relative_day:
        today: Сьогодні
        tomorrow: Завтра
        in_2_days: через 2 дні
        in_3_days: через 3 дні
        in_4_days: через 2 дні
      climate:
        states:
          'on': увімк
          'off': вимк
        heat: нагрів
      please_confirm: Будь ласка, підтвердіть
      unavailable: Unavailable
      no_name: No name
      alarm:
        home: home
        away: away
        night: night
        vacation: vacation
        bypass: bypass
        disarm: disarm
      settings:
        reboot: Reboot
        sleep: Sleep
        brightness: Brightness
        bright: Bright
        dimming: Dimming
        dim: Dim
  weather_entity_tmp: !input weather_entity
  weather_entity: '{% if weather_entity_tmp is string and weather_entity_tmp | length
    > 0 %} {{ weather_entity_tmp }} {% elif states.weather | list | count > 0 %} {{
    states.weather | map(attribute="entity_id") | list | first }} {% endif %}

    '
  temperature_units: °
  page_climate:
    buttons:
      hvac_mode:
      - mode: auto
        icon: calendar-sync
        color: green
        component: button01
      - mode: heat_cool
        icon: autorenew
        color: amber
        component: button02
      - mode: heat
        icon: fire
        color: deep-orange
        component: button03
      - mode: cool
        icon: snowflake
        color: blue
        component: button04
      - mode: dry
        icon: water-percent
        color: orange
        component: button05
      - mode: fan_only
        icon: fan
        color: cyan
        component: button06
      - mode: 'off'
        icon: power
        color: 'off'
        component: button07
  delay_value: !input delay
  media_player_update_interval: !input media_player_update_interval
  media_player_update_delay: !input media_player_update_delay
  climate: !input climate
  embedded_climate: '{{ climate == thermostat_embedded }}'
  indoor_temperature_sensor: !input indoortemp
  embedded_indoor_temperature: '{{ indoor_temperature_sensor == nspaneltemp or not
    (indoor_temperature_sensor is string and indoor_temperature_sensor is match "sensor.")}}'
  alarm: !input alarm
  enum:
    color_mode:
      unknown: '[<ColorMode.UNKNOWN: ''unknown''>]'
      onoff: '[<ColorMode.ONOFF: ''onoff''>]'
      brightness: '[<ColorMode.BRIGHTNESS: ''brightness''>]'
      color_temp: '[<ColorMode.COLOR_TEMP: ''color_temp''>]'
      hs: '[<ColorMode.HS: ''hs''>]'
      xy: '[<ColorMode.XY: ''xy''>]'
      rgb: '[<ColorMode.RGB: ''rgb''>]'
      rgbw: '[<ColorMode.RGBW: ''rgbw''>]'
      rgbww: '[<ColorMode.RGBWW: ''rgbww''>]'
      white: '[<ColorMode.WHITE: ''''>]'
    states:
      'on':
      - 'on'
      - open
      - opening
      - 'true'
      - 'True'
      - true
      - true
      - playing
      - heat
      - cold
      - dry
      - armed_home
      - armed_away
      - armed_vacation
      - armed_custom_bypass
      'off':
      - 'off'
      - closed
      - closing
      - 'false'
      - 'False'
      - false
      - false
      - standby
      - paused
      - idle
      - disarmed
      unknown:
      - unknown
      - unavailable
      - None
      - none
      - ''
trigger:
- id: nspanel_event
  platform: event
  event_type: esphome.nspanel_ha_blueprint
  event_data:
    device_id: !input nspanel_name
- platform: template
  value_template: '{{ is_state(nextion_inited, "on") | default(false) if nextion_inited
    is string else false }}'
  for:
    seconds: 1
  id: nspanel_boot_init
- platform: event
  event_type: automation_reloaded
  id: automation_reloaded
- platform: homeassistant
  event: start
  id: ha_started
- platform: state
  entity_id: !input entity01
  id: current_state_entity01
- platform: state
  entity_id: !input entity02
  id: current_state_entity02
- platform: state
  entity_id: !input entity03
  id: current_state_entity03
- platform: state
  entity_id: !input entity04
  id: current_state_entity04
- platform: state
  entity_id: !input entity05
  id: current_state_entity05
- platform: state
  entity_id: !input entity06
  id: current_state_entity06
- platform: state
  entity_id: !input entity07
  id: current_state_entity07
- platform: state
  entity_id: !input entity08
  id: current_state_entity08
- platform: state
  entity_id: !input entity09
  id: current_state_entity09
- platform: state
  entity_id: !input entity10
  id: current_state_entity10
- platform: state
  entity_id: !input entity11
  id: current_state_entity11
- platform: state
  entity_id: !input entity12
  id: current_state_entity12
- platform: state
  entity_id: !input entity13
  id: current_state_entity13
- platform: state
  entity_id: !input entity14
  id: current_state_entity14
- platform: state
  entity_id: !input entity15
  id: current_state_entity15
- platform: state
  entity_id: !input entity16
  id: current_state_entity16
- platform: state
  entity_id: !input entity17
  id: current_state_entity17
- platform: state
  entity_id: !input entity18
  id: current_state_entity18
- platform: state
  entity_id: !input entity19
  id: current_state_entity19
- platform: state
  entity_id: !input entity20
  id: current_state_entity20
- platform: state
  entity_id: !input entity21
  id: current_state_entity21
- platform: state
  entity_id: !input entity22
  id: current_state_entity22
- platform: state
  entity_id: !input entity23
  id: current_state_entity23
- platform: state
  entity_id: !input entity24
  id: current_state_entity24
- platform: state
  entity_id: !input entity25
  id: current_state_entity25
- platform: state
  entity_id: !input entity26
  id: current_state_entity26
- platform: state
  entity_id: !input entity27
  id: current_state_entity27
- platform: state
  entity_id: !input entity28
  id: current_state_entity28
- platform: state
  entity_id: !input entity29
  id: current_state_entity29
- platform: state
  entity_id: !input entity30
  id: current_state_entity30
- platform: state
  entity_id: !input entity31
  id: current_state_entity31
- platform: state
  entity_id: !input entity32
  id: current_state_entity32
- alias: entities_entity01
  platform: state
  entity_id: !input entities_entity01
  id: trigger_entitypage01
- alias: entities_entity02
  platform: state
  entity_id: !input entities_entity02
  id: trigger_entitypage01
- alias: entities_entity03
  platform: state
  entity_id: !input entities_entity03
  id: trigger_entitypage01
- alias: entities_entity04
  platform: state
  entity_id: !input entities_entity04
  id: trigger_entitypage01
- alias: entities_entity05
  platform: state
  entity_id: !input entities_entity05
  id: trigger_entitypage01
- alias: entities_entity06
  platform: state
  entity_id: !input entities_entity06
  id: trigger_entitypage01
- alias: entities_entity07
  platform: state
  entity_id: !input entities_entity07
  id: trigger_entitypage01
- alias: entities_entity08
  platform: state
  entity_id: !input entities_entity08
  id: trigger_entitypage01
- alias: entities_entity09
  platform: state
  entity_id: !input entities_entity09
  id: trigger_entitypage02
- alias: entities_entity10
  platform: state
  entity_id: !input entities_entity10
  id: trigger_entitypage02
- alias: entities_entity11
  platform: state
  entity_id: !input entities_entity11
  id: trigger_entitypage02
- alias: entities_entity12
  platform: state
  entity_id: !input entities_entity12
  id: trigger_entitypage02
- alias: entities_entity13
  platform: state
  entity_id: !input entities_entity13
  id: trigger_entitypage02
- alias: entities_entity14
  platform: state
  entity_id: !input entities_entity14
  id: trigger_entitypage02
- alias: entities_entity15
  platform: state
  entity_id: !input entities_entity15
  id: trigger_entitypage02
- alias: entities_entity16
  platform: state
  entity_id: !input entities_entity16
  id: trigger_entitypage02
- alias: entities_entity17
  platform: state
  entity_id: !input entities_entity17
  id: trigger_entitypage03
- alias: entities_entity18
  platform: state
  entity_id: !input entities_entity18
  id: trigger_entitypage03
- alias: entities_entity19
  platform: state
  entity_id: !input entities_entity19
  id: trigger_entitypage03
- alias: entities_entity20
  platform: state
  entity_id: !input entities_entity20
  id: trigger_entitypage03
- alias: entities_entity21
  platform: state
  entity_id: !input entities_entity21
  id: trigger_entitypage03
- alias: entities_entity22
  platform: state
  entity_id: !input entities_entity22
  id: trigger_entitypage03
- alias: entities_entity23
  platform: state
  entity_id: !input entities_entity23
  id: trigger_entitypage03
- alias: entities_entity24
  platform: state
  entity_id: !input entities_entity24
  id: trigger_entitypage03
- alias: entities_entity25
  platform: state
  entity_id: !input entities_entity25
  id: trigger_entitypage04
- alias: entities_entity26
  platform: state
  entity_id: !input entities_entity26
  id: trigger_entitypage04
- alias: entities_entity27
  platform: state
  entity_id: !input entities_entity27
  id: trigger_entitypage04
- alias: entities_entity28
  platform: state
  entity_id: !input entities_entity28
  id: trigger_entitypage04
- alias: entities_entity29
  platform: state
  entity_id: !input entities_entity29
  id: trigger_entitypage04
- alias: entities_entity30
  platform: state
  entity_id: !input entities_entity30
  id: trigger_entitypage04
- alias: entities_entity31
  platform: state
  entity_id: !input entities_entity31
  id: trigger_entitypage04
- alias: entities_entity32
  platform: state
  entity_id: !input entities_entity32
  id: trigger_entitypage04
- platform: event
  event_type: state_changed
  event_data:
    entity_id: !input chip01
  id: chip01_state
- platform: event
  event_type: state_changed
  event_data:
    entity_id: !input chip02
  id: chip02_state
- platform: event
  event_type: state_changed
  event_data:
    entity_id: !input chip03
  id: chip03_state
- platform: event
  event_type: state_changed
  event_data:
    entity_id: !input chip04
  id: chip04_state
- platform: event
  event_type: state_changed
  event_data:
    entity_id: !input chip05
  id: chip05_state
- platform: event
  event_type: state_changed
  event_data:
    entity_id: !input chip06
  id: chip06_state
- platform: event
  event_type: state_changed
  event_data:
    entity_id: !input chip07
  id: chip07_state
- platform: state
  entity_id: !input home_value01
  not_to:
  - unknown
  - unavailable
  id: home_value01_state
- platform: state
  entity_id: !input home_value02
  not_to:
  - unknown
  - unavailable
  id: home_value02_state
- platform: state
  entity_id: !input home_value03
  not_to:
  - unknown
  - unavailable
  id: home_value03_state
- platform: event
  event_type: state_changed
  event_data:
    entity_id: !input home_custom_button01
  id: home_custom_buttons
- platform: event
  event_type: state_changed
  event_data:
    entity_id: !input home_custom_button02
  id: home_custom_buttons
- platform: event
  event_type: state_changed
  event_data:
    entity_id: !input home_custom_button03
  id: home_custom_buttons
- platform: event
  event_type: state_changed
  event_data:
    entity_id: '{{ relay01_entity }}'
  id: relay01_state
- platform: event
  event_type: state_changed
  event_data:
    entity_id: '{{ relay02_entity }}'
  id: relay02_state
- platform: event
  event_type: state_changed
  event_data:
    entity_id: !input alarm
  id: alarm_state
- platform: event
  event_type: state_changed
  event_data:
    entity_id: !input climate
  id: climate_state
- platform: state
  entity_id: !input climate_value01
  not_to:
  - unknown
  - unavailable
  id: climate_value01_state
- platform: state
  entity_id: !input climate_value02
  not_to:
  - unknown
  - unavailable
  id: climate_value02_state
- platform: state
  entity_id: !input climate_value03
  not_to:
  - unknown
  - unavailable
  id: climate_value03_state
- platform: state
  entity_id: !input climate_value04
  not_to:
  - unknown
  - unavailable
  id: climate_value04_state
- platform: state
  entity_id: !input climate_button08
  not_to:
  - unknown
  - unavailable
  id: climate_button08_state
- platform: state
  entity_id: !input climate_button09
  not_to:
  - unknown
  - unavailable
  id: climate_button09_state
- platform: state
  entity_id: !input left_button_entity
  not_to:
  - unavailable
  - unknown
  id: left_button_state
- platform: state
  entity_id: !input right_button_entity
  not_to:
  - unavailable
  - unknown
  id: right_button_state
- platform: time_pattern
  seconds: 0
  id: time_state
- platform: event
  event_type: state_changed
  event_data:
    entity_id: !input outdoortemp
  id: outdoortemp_state
- platform: event
  event_type: state_changed
  event_data:
    entity_id: !input indoortemp
  id: indoortemp_state
- platform: event
  event_type: state_changed
  event_data:
    entity_id: !input weather_entity
  id: weather_state_change
- platform: event
  event_type: folder_watcher
  event_data:
    event_type: modified
    path: !input tft_path
  id: tft_upload
- platform: event
  event_type: state_changed
  event_data:
    entity_id: '{{ switch_sleep_mode }}'
  id: sleep_mode_state
condition:
- '{{ is_state(nextion_inited, "on") | default(false) if nextion_inited is string
  else false }}'
- condition: or
  conditions:
  - condition: not
    conditions:
    - condition: trigger
      id:
      - home_value01_state
      - home_value02_state
      - home_value03_state
  - '{{ page.current == page.home }}'
- condition: or
  conditions:
  - condition: not
    conditions:
    - condition: trigger
      id:
      - trigger_entitypage01
      - trigger_entitypage02
      - trigger_entitypage03
      - trigger_entitypage04
  - '{{ page.current in page.entitypages }}'
- condition: or
  conditions:
  - condition: not
    conditions:
    - condition: trigger
      id:
      - climate_value01_state
      - climate_value02_state
      - climate_value03_state
      - climate_value04_state
      - climate_button08_state
      - climate_button09_state
  - '{{ page.current == page.climate }}'
- condition: or
  conditions:
  - condition: not
    conditions:
    - condition: trigger
      id: indoortemp_state
  - '{{ not embedded_indoor_temperature }}'
action:
- alias: Main choices
  choose:
  - alias: Date
    conditions:
    - condition: trigger
      id: time_state
    sequence:
    - &id002
      service: '{{ nextion.command.text_printf }}'
      data:
        component: home.date
        message: "{{\n  as_timestamp(now())\n  | timestamp_custom\n  (\n    date_format\n
          \   | replace(\"%A\", (dict.values(mui[language].weekdays) | list)[now().weekday()])\n
          \   | replace(\"%a\", (dict.values(mui[language].weekdays_short) | list)[now().weekday()])\n
          \   | replace(\"%B\", (dict.values(mui[language].months) | list)[now().month-1])\n
          \   | replace(\"%b\", (dict.values(mui[language].months_short) | list)[now().month-1])\n
          \ )\n}}\n"
      continue_on_error: true
  - alias: Boot init
    conditions:
    - condition: trigger
      id: nspanel_boot_init
    sequence:
    - &id003
      if: '{{ true }}'
      then:
      - &id004
        variables:
          hardware:
            buttons:
              left:
                entity: !input left_button_entity
                name: !input left_button_name
                color_rgb: !input left_button_color
                hold_select: !input left_button_hold_select
              right:
                entity: !input right_button_entity
                name: !input right_button_name
                color_rgb: !input right_button_color
                hold_select: !input right_button_hold_select
            relays:
              relay1:
                icon: !input relay01_icon
                icon_color_rgb: !input relay01_icon_color
                fallback: !input relay_1_local_fallback
              relay2:
                icon: !input relay02_icon
                icon_color_rgb: !input relay02_icon_color
                fallback: !input relay_2_local_fallback
      - variables:
          bt_notific:
            icon: !input home_button04_icon
            color_normal: !input home_button04_icon_color01
            color_unread: !input home_button04_icon_color02
          bt_entities:
            enabled: !input entitypages_enabled
            icon: !input home_button06_icon
            color_rgb: !input home_button06_icon_color
          bt_qrcode:
            enabled: !input qrcode_enabled
            icon: !input home_button05_icon
            color_rgb: !input home_button05_icon_color
            title: !input qrcode_label
            qrcode: !input qrcode_value
      - variables:
          display:
            date:
              format:
              color_rgb: !input date_label_color
            time:
              format: !input time_format
              color_rgb: !input time_label_color
      - service: '{{ nextion.command.page_home }}'
        data:
          notification_icon: "{{\n  all_icons[bt_notific.icon.split(\":\")[1]] | default(bt_notific.icon\n
            \ if bt_notific.icon is string\n  else all_icons[\"email\"])\n}}\n"
          notification_icon_color_normal: '{{ [ bt_notific.color_normal ] if is_number(bt_notific.color_normal)
            else bt_notific.color_normal }}'
          notification_icon_color_unread: '{{ [ bt_notific.color_unread ] if is_number(bt_notific.color_unread)
            else bt_notific.color_unread }}'
          qrcode: '{{ bt_qrcode.enabled }}'
          qrcode_icon: "{{\n  all_icons[bt_qrcode.icon.split(\":\")[1]] | default(bt_qrcode.icon\n
            \ if bt_qrcode.icon is string\n  else all_icons[\"format-list-bulleted-square\"])\n}}\n"
          qrcode_icon_color: '{{ [ bt_qrcode.color_rgb ] if is_number(bt_qrcode.color_rgb)
            else bt_qrcode.color_rgb }}'
          entities_pages: '{{ bt_entities.enabled }}'
          entities_pages_icon: "{{\n  all_icons[bt_entities.icon.split(\":\")[1]]
            | default(bt_entities.icon\n  if bt_entities.icon is string\n  else all_icons[\"format-list-bulleted-square\"])\n}}\n"
          entities_pages_icon_color: '{{ [ bt_entities.color_rgb ] if is_number(bt_entities.color_rgb)
            else bt_entities.color_rgb }}'
          alarm_state: "{{\n  states(alarm) | default(\"\")\n  if alarm is string
            and alarm | length > 0\n  else \"\"\n}}\n"
        continue_on_error: true
      - &id001
        delay:
          milliseconds: '{{ delay_value }}'
      - service: '{{ nextion.command.qrcode }}'
        data:
          title: '{{ bt_qrcode.title }}'
          qrcode: '{{ bt_qrcode.qrcode }}'
          show: false
        continue_on_error: true
      - *id001
      - service: '{{ nextion.command.page_settings}}'
        data:
          reboot: '{{ mui[language].settings.reboot }}'
          brightness: '{{ mui[language].settings.brightness }}'
          bright: '{{ mui[language].settings.bright }}'
          dim: '{{ mui[language].settings.dim }}'
        continue_on_error: true
      - *id001
      - service: '{{ nextion.command.global_settings }}'
        data:
          blueprint_version: '{{ blueprint_version }}'
          relay1_local_control: '{{ hardware.buttons.left.entity == relay01_entity
            }}'
          relay1_icon: "{{\n  all_icons[hardware.relays.relay1.icon.split(\":\")[1]]
            | default(\"\\uE3A5\")\n  if hardware.relays.relay1.icon.split(\":\")
            | count > 0\n  else\n    (\n      hardware.relays.relay1.icon\n      if
            hardware.relays.relay1.icon is string\n      else \"\\uE3A5\"\n    )\n}}\n"
          relay1_icon_color: "{{\n  hardware.relays.relay1.icon_color_rgb\n  if is_number(hardware.relays.relay1.icon_color_rgb)\n
            \ else ((hardware.relays.relay1.icon_color_rgb[0] //(2**3)) *(2**11))+((hardware.relays.relay1.icon_color_rgb[1]
            //(2**2)) *(2**5))+(hardware.relays.relay1.icon_color_rgb[2] //(2**3))\n}}\n"
          relay1_fallback: '{{ hardware.relays.relay1.fallback }}'
          relay2_local_control: '{{ hardware.buttons.right.entity == relay02_entity
            }}'
          relay2_icon: "{{\n  all_icons[hardware.relays.relay2.icon.split(\":\")[1]]
            | default(\"\\uE3A8\")\n  if hardware.relays.relay2.icon.split(\":\")
            | count > 0\n  else\n    (\n      hardware.relays.relay2.icon\n      if
            hardware.relays.relay2.icon is string\n      else \"\\uE3A8\"\n    )\n}}\n"
          relay2_icon_color: "{{\n  hardware.relays.relay2.icon_color_rgb\n  if is_number(hardware.relays.relay2.icon_color_rgb)\n
            \ else ((hardware.relays.relay2.icon_color_rgb[0] //(2**3)) *(2**11))+((hardware.relays.relay2.icon_color_rgb[1]
            //(2**2)) *(2**5))+(hardware.relays.relay2.icon_color_rgb[2] //(2**3))\n}}\n"
          relay2_fallback: '{{ hardware.relays.relay2.fallback }}'
          date_color: "{{\n  display.date.color_rgb\n  if is_number(display.date.color_rgb)\n
            \ else ((display.date.color_rgb[0] //(2**3)) *(2**11))+((display.date.color_rgb[1]
            //(2**2)) *(2**5))+(display.date.color_rgb[2] //(2**3))\n}}\n"
          time_format: '{{ display.time.format }}'
          time_color: "{{\n  display.time.color_rgb\n  if is_number(display.time.color_rgb)\n
            \ else ((display.time.color_rgb[0] //(2**3)) *(2**11))+((display.time.color_rgb[1]
            //(2**2)) *(2**5))+(display.time.color_rgb[2] //(2**3))\n}}\n"
          embedded_climate: '{{ embedded_climate }}'
          embedded_indoor_temperature: '{{ embedded_indoor_temperature }}'
          temperature_unit_is_fahrenheit: '{{ state_attr((nspaneltemp if embedded_indoor_temperature
            else indoor_temperature_sensor), "unit_of_measurement") | default("")
            in ["°F", "F"]}}'
          mui_please_confirm: '{{ mui[language].please_confirm }}'
        continue_on_error: true
      - *id001
      - *id002
  - alias: NSPanel event
    conditions:
    - condition: trigger
      id: nspanel_event
    sequence:
    - variables:
        nspanel_event: '{{ trigger.event.data }}'
    - choose:
      - alias: Boot init
        conditions:
        - '{{ nspanel_event.type == "boot"}}'
        - '{{ nspanel_event.step is defined and nspanel_event.step in ["nextion_init",
          "timeout"]}}'
        sequence:
        - *id003
      - alias: NSPanel service call
        conditions:
        - '{{ nspanel_event.type == "service_call"}}'
        - '{{ nspanel_event.service is defined and nspanel_event.service is string
          and nspanel_event.service | length > 0 }}'
        - '{{ nspanel_event.service.split(".") | count == 2 }}'
        - '{{ nspanel_event.service.split(".")[0] | length > 0 and nspanel_event.service.split(".")[0]
          not in ["null", None] }}'
        - '{{ nspanel_event.service.split(".")[1] | length > 0 and nspanel_event.service.split(".")[1]
          not in ["null", None] }}'
        - '{{ nspanel_event.service | length > (2+nspanel_event.service.index("."))
          }}'
        - '{{ nspanel_event.service is not match "alarm_control_panel." }}'
        - '{{ nspanel_event.entity is defined and nspanel_event.entity is string and
          nspanel_event.entity | length > 0 }}'
        sequence:
        - if: '{{ nspanel_event.key is defined and nspanel_event.key is string and
            nspanel_event.key | length > 0 }}'
          then:
          - service: '{{ nspanel_event.service }}'
            data:
              '{{ nspanel_event.key }}': '{{ nspanel_event.value }}'
            target:
              entity_id: '{{ nspanel_event.entity }}'
            continue_on_error: true
          else:
          - service: '{{ nspanel_event.service }}'
            target:
              entity_id: '{{ nspanel_event.entity }}'
            continue_on_error: true
        - delay:
            milliseconds: '{{ media_player_update_delay }}'
        - service: homeassistant.update_entity
          data:
            entity_id: '{{ nspanel_event.entity }}'
          continue_on_error: true
      - alias: Page changed
        conditions:
        - '{{ nspanel_event.type == "page_changed"}}'
        sequence:
        - choose:
          - alias: Home page
            conditions: '{{ nspanel_event.page == page.home }}'
            sequence: &id013
            - *id001
            - &id036
              service: '{{ nextion.command.printf }}'
              data:
                cmd: home.weather.pic={{ nextion.pic.weather[states(weather_entity)
                  | default("unavailable") if weather_entity is string and has_value(weather_entity)
                  else "unavailable"] | default(None) }}
              continue_on_error: true
            - &id034
              if: '{{ true }}'
              then:
              - variables:
                  outdoor_temp_entity: !input outdoortemp
                  outdoor_temp_state: "{{\n  states(outdoor_temp_entity, rounded=true)
                    | default(\"unavailable\")\n  if outdoor_temp_entity is string
                    and outdoor_temp_entity is match \"sensor.\" and has_value(outdoor_temp_entity)\n
                    \ else \"unavailable\"\n}}\n"
                  outdoor_temp: "{{\n  outdoor_temp_state if is_number(outdoor_temp_state)\n
                    \ else state_attr(weather_entity, \"temperature\") | default(\"unavailable\")\n
                    \ if weather_entity is string else \"unavailable\"\n}}\n"
              - if: '{{ is_number(outdoor_temp) }}'
                then:
                - variables:
                    outdoor_temp_color_rgb: !input home_outdoor_temp_label_color
                - *id001
                - service: '{{ nextion.command.set_component_color }}'
                  data:
                    component: home.outdoor_temp
                    foreground: '{{ [ outdoor_temp_color_rgb ] if is_number(outdoor_temp_color_rgb)
                      else outdoor_temp_color_rgb }}'
                    background: []
                  continue_on_error: true
                - *id001
                - service: '{{ nextion.command.text_printf }}'
                  data:
                    component: home.outdoor_temp
                    message: '{{ outdoor_temp | round(1) ~ temperature_units }}'
                  continue_on_error: true
            - &id035
              if: '{{ not embedded_indoor_temperature }}'
              then:
              - variables:
                  indoor_temp:
                    state: '{{ states(indoor_temperature_sensor, rounded=true) | default("unavailable")
                      if indoor_temperature_sensor is string and indoor_temperature_sensor
                      is match "sensor." else states(nspaneltemp, rounded=true) }}'
                    units: "{{\n  state_attr(indoor_temperature_sensor, \"unit_of_measurement\")
                      | default(temperature_units)\n  if\n    indoor_temperature_sensor
                      is string and\n    indoor_temperature_sensor is match \"sensor.\"
                      and\n    state_attr(indoor_temperature_sensor, \"unit_of_measurement\")
                      is string and\n    state_attr(indoor_temperature_sensor, \"unit_of_measurement\")
                      | length > 0\n  else\n    (\n      state_attr(nspaneltemp, \"unit_of_measurement\")
                      | default(temperature_units)\n      if\n        state_attr(nspaneltemp,
                      \"unit_of_measurement\") is string and\n        state_attr(nspaneltemp,
                      \"unit_of_measurement\") | length > 0\n      else temperature_units\n
                      \   )\n}}\n"
                    icon:
                      icon: !input home_indoor_temp_icon
                      color_rgb: !input home_indoor_temp_icon_color
                    label:
                      color_rgb: !input home_indoor_temp_label_color
              - if: '{{ is_number(indoor_temp.state) }}'
                then:
                - *id001
                - service: '{{ nextion.command.set_component_color }}'
                  data:
                    component: home.indoortempicon
                    foreground: '{{ [ indoor_temp.icon.color_rgb ] if is_number(indoor_temp.icon.color_rgb)
                      else indoor_temp.icon.color_rgb }}'
                    background: []
                  continue_on_error: true
                - *id001
                - service: '{{ nextion.command.text_printf }}'
                  data:
                    component: home.indoortempicon
                    message: "{{\n  all_icons[indoor_temp.icon.icon.split(\":\")[1]]
                      | default(all_icons.unknown)\n  if indoor_temp.icon.icon.split(\":\")
                      | count > 0\n  else\n    (\n      indoor_temp.icon.icon\n      if
                      indoor_temp.icon.icon is string\n      else all_icons.unknown\n
                      \   )\n}}\n"
                  continue_on_error: true
                - *id001
                - service: '{{ nextion.command.set_component_color }}'
                  data:
                    component: home.current_temp
                    foreground: '{{ [ indoor_temp.label.color_rgb ] if is_number(indoor_temp.label.color_rgb)
                      else indoor_temp.label.color_rgb }}'
                    background: []
                  continue_on_error: true
                - *id001
                - service: '{{ nextion.command.text_printf }}'
                  data:
                    component: home.current_temp
                    message: '{{ indoor_temp.state | round(1) ~ indoor_temp.units
                      }}'
                  continue_on_error: true
            - *id004
            - variables:
                left_button_state: '{{ states(hardware.buttons.left.entity) | default("unavailable")
                  if hardware.buttons.left.entity is string else "unavailable" }}'
                right_button_state: '{{ states(hardware.buttons.right.entity) | default("unavailable")
                  if hardware.buttons.right.entity is string else "unavailable" }}'
            - if: '{{ hardware.buttons.left.name | length > 0 }}'
              then:
              - *id001
              - service: '{{ nextion.command.set_component_color }}'
                data:
                  component: home.left_bt_text
                  foreground: '{{ [ hardware.buttons.left.color_rgb ] if is_number(hardware.buttons.left.color_rgb)
                    else hardware.buttons.left.color_rgb }}'
                  background: []
                continue_on_error: true
              - *id001
              - service: '{{ nextion.command.text_printf }}'
                data:
                  component: home.left_bt_text
                  message: '{{ hardware.buttons.left.name }}'
                continue_on_error: true
            - if: '{{ left_button_state not in ["unavailable", "unknown", "", None]
                }}'
              then:
              - *id001
              - service: '{{ nextion.command.printf }}'
                data:
                  cmd: home.left_bt_pic.val={{ 1 if left_button_state in ["on", "open",
                    "opened", "opening", "true", true, 1] else 0 }}
                continue_on_error: true
            - if: '{{ hardware.buttons.right.name | length > 0 }}'
              then:
              - *id001
              - service: '{{ nextion.command.set_component_color }}'
                data:
                  component: home.right_bt_text
                  foreground: '{{ [ hardware.buttons.right.color_rgb ] if is_number(hardware.buttons.right.color_rgb)
                    else hardware.buttons.right.color_rgb }}'
                  background: []
                continue_on_error: true
              - *id001
              - service: '{{ nextion.command.text_printf }}'
                data:
                  component: home.right_bt_text
                  message: '{{ hardware.buttons.right.name }}'
                continue_on_error: true
            - if: '{{ right_button_state not in ["unavailable", "unknown", "", None]
                }}'
              then:
              - *id001
              - service: '{{ nextion.command.printf }}'
                data:
                  cmd: home.right_bt_pic.val={{ 1 if right_button_state in ["on",
                    "open", "opened", "opening", "true", true, 1] else 0 }}
                continue_on_error: true
            - if: '{{ true }}'
              then:
              - &id012
                variables:
                  home_page_custom_buttons:
                  - entity: !input home_custom_button01
                    icon: !input home_custom_button01_icon
                    component: button01
                  - entity: !input home_custom_button02
                    icon: !input home_custom_button02_icon
                    component: button02
                  - entity: !input home_custom_button03
                    icon: !input home_custom_button03_icon
                    component: button03
              - repeat:
                  for_each: '{{ home_page_custom_buttons }}'
                  sequence:
                  - &id030
                    if: '{{ repeat.item.entity is defined and repeat.item.entity is
                      string and repeat.item.entity | length > 0 }}'
                    then:
                    - variables:
                        entity_domain: '{{ repeat.item.entity.split(".")[0] if repeat.item.entity
                          and repeat.item.entity.split(".") | count > 1 else "unknown"
                          }}'
                        entity_state: '{{ states(repeat.item.entity) }}'
                        rgb_color: '{{ state_attr(repeat.item.entity, "rgb_color")
                          | default(None) }}'
                        brightness: '{{ (state_attr(repeat.item.entity, "brightness")
                          | int(255))/255 }}'
                        icon_color: "{{\n  rgb_color | list\n  if rgb_color is sequence\n
                          \ else\n    (\n      nextion.color.on\n      if entity_state
                          in enum.states.on\n      else nextion.color.off\n    )\n}}\n"
                        icon_color_adjusted: "{{\n  [\n    min(255,icon_color[0] *
                          brightness) | round(0),\n    min(255,icon_color[1] * brightness)
                          | round(0),\n    min(255,icon_color[2] * brightness) | round(0)\n
                          \ ]\n  if icon_color is sequence and icon_color | count
                          == 3\n  else icon_color\n}}\n"
                    - service: '{{ nextion.command.set_component_color }}'
                      data:
                        component: home.{{ repeat.item.component }}
                        foreground: '{{ icon_color_adjusted }}'
                        background: []
                      continue_on_error: true
                    - *id001
                    - service: '{{ nextion.command.text_printf }}'
                      data:
                        component: home.{{ repeat.item.component }}
                        message: "{% if repeat.item.icon | length > 0 %}\n  {{\n    all_icons[repeat.item.icon.split(\":\")[1]]
                          | default(all_icons.unknown)\n    if repeat.item.icon.split(\":\")
                          | count > 0\n    else repeat.item.icon\n  }}\n{% elif repeat.item.entity
                          and repeat.item.entity.split(\".\") | count > 1 %}\n  {{
                          nextion.icon.domain[entity_domain] }}\n{% else %}{{ nextion.icon.domain.unknown
                          }} {% endif %}\n"
                      continue_on_error: true
                    - if: '{{ page.current == page.home }}'
                      then:
                      - *id001
                      - service: '{{ nextion.command.show }}'
                        data:
                          component: '{{ repeat.item.component }}'
                        continue_on_error: true
                    else:
                    - if: '{{ page.current == page.home }}'
                      then:
                      - service: '{{ nextion.command.hide }}'
                        data:
                          component: '{{ repeat.item.component }}'
                        continue_on_error: true
            - &id026
              if: '{{ (not embedded_climate) and climate is string and climate is
                match "climate." }}'
              then:
              - if: '{{ has_value(climate) }}'
                then:
                - variables:
                    climate_state: '{{ states(climate) | default("unavailable") if
                      climate is string else "unavailable" }}'
                    hvac_action: '{{ state_attr(climate, "hvac_action") | default("unavailable")
                      if climate is string else "unavailable" }}'
                    climate_action: '{{ hvac_action if hvac_action not in ["unavailable",
                      "unknown", "", None] else climate_state }}'
                - *id001
                - if: '{{ climate_action in ["off", "heating", "heat", "cooling",
                    "cool", "dry", "fan", "fan_only", "heat_cool", "auto", "idle"]
                    }}'
                  then:
                  - service: '{{ nextion.command.set_component_color }}'
                    data:
                      component: home.icon_top_03
                      foreground: '{% if "off" in climate_action %}{{ nextion.color["off"]
                        }} {% elif "heating" in climate_action or "heat" in climate_action
                        %}{{ nextion.color["deep-orange"]}} {% elif "cooling" in climate_action
                        or "cool" in climate_action %}{{ nextion.color["blue"] }}
                        {% elif "drying" in climate_action or "dry" in climate_action
                        %}{{ nextion.color["orange"] }} {% elif "fan" in climate_action
                        or "fan_only" in climate_action %}{{ nextion.color["cyan"]
                        }} {% elif "heat_cool" in climate_action %}{{ nextion.color["amber"]
                        }} {% elif "auto" in climate_action %}{{ nextion.color["green"]
                        }} {% elif "idle" in climate_action %}{{ nextion.color["off"]
                        }} {% else %}{{ nextion.color["off"] }} {% endif %}

                        '
                      background: []
                    continue_on_error: true
                  - *id001
                  - service: '{{ nextion.command.text_printf }}'
                    data:
                      component: home.icon_top_03
                      message: '{% if "off" in climate_action %}{{ all_icons.blank
                        }} {% elif "heating" in climate_action or "heat" in climate_action
                        %}{{ all_icons["thermometer-lines"] }} {% elif "cooling" in
                        climate_action or "cool" in climate_action %}{{ all_icons.snowflake
                        }} {% elif "drying" in climate_action or "dry" in climate_action
                        %}{{ all_icons["water-percent"] }} {% elif "fan" in climate_action
                        or "fan_only" in climate_action %}{{ all_icons.fan }} {% elif
                        "heat_cool" in climate_action %}{{ all_icons.autorenew }}
                        {% elif "auto" in climate_action %}{{ all_icons["calendar-sync"]
                        }} {% elif "idle" in climate_action %}{{ all_icons.thermometer
                        }} {% else %}{{ all_icons.blank }} {% endif %}

                        '
                    continue_on_error: true
                  else:
                  - &id005
                    service: '{{ nextion.command.text_printf }}'
                    data:
                      component: home.icon_top_03
                      message: '{{ all_icons.blank }}'
                    continue_on_error: true
                else:
                - *id005
            - &id032
              variables:
                home_page_status_bar:
                - entity: !input chip01
                  icon: !input chip01_icon
                  icon_color_rgb: !input chip01_icon_color
                  component: icon_top_04
                - entity: !input chip02
                  icon: !input chip02_icon
                  icon_color_rgb: !input chip02_icon_color
                  component: icon_top_05
                - entity: !input chip03
                  icon: !input chip03_icon
                  icon_color_rgb: !input chip03_icon_color
                  component: icon_top_06
                - entity: !input chip04
                  icon: !input chip04_icon
                  icon_color_rgb: !input chip04_icon_color
                  component: icon_top_07
                - entity: !input chip05
                  icon: !input chip05_icon
                  icon_color_rgb: !input chip05_icon_color
                  component: icon_top_08
                - entity: !input chip06
                  icon: !input chip06_icon
                  icon_color_rgb: !input chip06_icon_color
                  component: icon_top_09
                - entity: !input chip07
                  icon: !input chip07_icon
                  icon_color_rgb: !input chip07_icon_color
                  component: icon_top_10
            - repeat:
                for_each: '{{ home_page_status_bar }}'
                sequence:
                - &id033
                  if: '{{ repeat.item.entity is defined and repeat.item.entity is
                    string and repeat.item.entity | length > 0 }}'
                  then:
                  - variables:
                      repeat_item_state: '{{ states(repeat.item.entity) | default("unavailable")
                        }}'
                      repeat_item_state_is_on: "{{\n  (repeat_item_state is string
                        and repeat_item_state in [\"on\", \"open\", \"opening\", \"true\",
                        \"True\"]) or\n  (repeat_item_state is boolean and repeat_item_state)\n}}\n"
                      repeat_item_icon: "{% if repeat_item_state_is_on and repeat.item.icon
                        is string and repeat.item.icon | length > 0 %}\n  {{ all_icons[repeat.item.icon.split(\":\")[1]]
                        | default(repeat.item.icon) }}\n{% elif repeat_item_state_is_on
                        and state_attr(repeat.item.entity, \"icon\") | default(\"\")
                        not in [\"unavailable\", \"unknown\", \"\", None] %}\n  {{
                        all_icons[state_attr(repeat.item.entity, \"icon\").split(\":\")[1]]
                        | default(all_icons.blank) }}\n{% else %}\n  {{ all_icons.unknown
                        }}\n{% endif %}\n"
                  - *id001
                  - if: '{{ repeat_item_state_is_on }}'
                    then:
                    - service: '{{ nextion.command.set_component_color }}'
                      data:
                        component: home.{{ repeat.item.component }}
                        foreground: '{{ [ repeat.item.icon_color_rgb ] if is_number(repeat.item.icon_color_rgb)
                          else repeat.item.icon_color_rgb }}'
                        background: []
                      continue_on_error: true
                    - *id001
                    - service: '{{ nextion.command.text_printf }}'
                      data:
                        component: home.{{ repeat.item.component }}
                        message: '{{ repeat_item_icon }}'
                      continue_on_error: true
                    else:
                    - &id006
                      service: '{{ nextion.command.text_printf }}'
                      data:
                        component: home.{{ repeat.item.component }}
                        message: '{{ all_icons.blank }}'
                      continue_on_error: true
                  else:
                  - *id006
            - *id001
            - &id031
              variables:
                home_page_values:
                - entity: !input home_value01
                  icon: !input home_value01_icon
                  icon_color_rgb: !input home_value01_icon_color
                  label_color_rgb: !input home_value01_label_color
                  page: home
                  component: value01
                - entity: !input home_value02
                  icon: !input home_value02_icon
                  icon_color_rgb: !input home_value02_icon_color
                  label_color_rgb: !input home_value02_label_color
                  page: home
                  component: value02
                - entity: !input home_value03
                  icon: !input home_value03_icon
                  icon_color_rgb: !input home_value03_icon_color
                  label_color_rgb: !input home_value03_label_color
                  page: home
                  component: value03
            - repeat:
                for_each: '{{ home_page_values }}'
                sequence:
                - &id007
                  if: '{{ repeat.item.entity is string and repeat.item.entity is match
                    "sensor." and has_value(repeat.item.entity) }}'
                  then:
                  - if: '{{ repeat.item.icon | length > 0 }}'
                    then:
                    - *id001
                    - service: '{{ nextion.command.set_component_color }}'
                      data:
                        component: '{{ repeat.item.page }}.{{ repeat.item.component
                          }}_icon'
                        foreground: '{{ [ repeat.item.icon_color_rgb ] if is_number(repeat.item.icon_color_rgb)
                          else repeat.item.icon_color_rgb }}'
                        background: []
                      continue_on_error: true
                    - *id001
                    - service: '{{ nextion.command.text_printf }}'
                      data:
                        component: '{{ repeat.item.page }}.{{ repeat.item.component
                          }}_icon'
                        message: "{% if repeat.item.icon is string and repeat.item.icon
                          | length > 0 %}\n  {{\n    all_icons[repeat.item.icon.split(\":\")[1]]
                          | default(all_icons.unknown)\n    if repeat.item.icon.split(\":\")
                          | count > 0\n    else repeat.item.icon\n  }}\n{% elif state_attr(repeat.item.entity,
                          \"icon\") | default(\"\") not in [\"unavailable\", \"unknown\",
                          \"\", None] %}\n  {{ all_icons[state_attr(repeat.item.entity,
                          \"icon\").split(\":\")[1]] | default(all_icons.unknown)
                          }}\n{% else %}{{ all_icons.blank }} {% endif %}\n"
                      continue_on_error: true
                  - variables:
                      repeat_item_state: '{{ states(repeat.item.entity, rounded=true)
                        | default("unavailable") }}'
                      repeat_item_state_available: '{{ repeat_item_state not in ["unavailable",
                        "unknown", "", None] }}'
                  - condition: '{{ repeat_item_state_available }}'
                  - *id001
                  - service: '{{ nextion.command.set_component_color }}'
                    data:
                      component: '{{ repeat.item.page }}.{{ repeat.item.component
                        }}{{ "_state" if repeat.item.page == page.home }}'
                      foreground: '{{ [ repeat.item.label_color_rgb ] if is_number(repeat.item.label_color_rgb)
                        else repeat.item.label_color_rgb }}'
                      background: []
                    continue_on_error: true
                  - *id001
                  - service: '{{ nextion.command.text_printf }}'
                    data:
                      component: '{{ repeat.item.page }}.{{ repeat.item.component
                        }}{{ "_state" if repeat.item.page == page.home }}'
                      message: "{{\n  (repeat_item_state ~ (state_attr(repeat.item.entity,
                        \"unit_of_measurement\") | default(\"\") if state_attr(repeat.item.entity,
                        \"unit_of_measurement\") is string else \"\"))\n  if is_number(repeat_item_state)\n
                        \ else repeat_item_state\n}}\n"
                    continue_on_error: true
          - alias: Button pages
            conditions: '{{ nspanel_event.page in page.buttonpages }}'
            sequence: &id014
            - &id009
              variables:
                event_page: '{{ nspanel_event.page if nspanel_event is defined and
                  nspanel_event.page is defined else page.current }}'
                button_page_index: '{{ (event_page[-2:] | int(-1)) - 1 }}'
                first_button: '{{ button_page_index * 8 }}'
                last_button: '{{ first_button + 8 }}'
                button_pages_labels:
                - label: !input button_page01_label
                - label: !input button_page02_label
                - label: !input button_page03_label
                - label: !input button_page04_label
                button_pages_buttons:
                - entity: !input entity01
                  name: !input entity01_name
                  icon: !input entity01_icon
                  icon_color_rgb: !input entity01_icon_color
                  confirm: !input entity01_confirm
                  page: buttonpage01
                  component: button01
                - entity: !input entity02
                  name: !input entity02_name
                  icon: !input entity02_icon
                  icon_color_rgb: !input entity02_icon_color
                  confirm: !input entity02_confirm
                  page: buttonpage01
                  component: button02
                - entity: !input entity03
                  name: !input entity03_name
                  icon: !input entity03_icon
                  icon_color_rgb: !input entity03_icon_color
                  confirm: !input entity03_confirm
                  page: buttonpage01
                  component: button03
                - entity: !input entity04
                  name: !input entity04_name
                  icon: !input entity04_icon
                  icon_color_rgb: !input entity04_icon_color
                  confirm: !input entity04_confirm
                  page: buttonpage01
                  component: button04
                - entity: !input entity05
                  name: !input entity05_name
                  icon: !input entity05_icon
                  icon_color_rgb: !input entity05_icon_color
                  confirm: !input entity05_confirm
                  page: buttonpage01
                  component: button05
                - entity: !input entity06
                  name: !input entity06_name
                  icon: !input entity06_icon
                  icon_color_rgb: !input entity06_icon_color
                  confirm: !input entity06_confirm
                  page: buttonpage01
                  component: button06
                - entity: !input entity07
                  name: !input entity07_name
                  icon: !input entity07_icon
                  icon_color_rgb: !input entity07_icon_color
                  confirm: !input entity07_confirm
                  page: buttonpage01
                  component: button07
                - entity: !input entity08
                  name: !input entity08_name
                  icon: !input entity08_icon
                  icon_color_rgb: !input entity08_icon_color
                  confirm: !input entity08_confirm
                  page: buttonpage01
                  component: button08
                - entity: !input entity09
                  name: !input entity09_name
                  icon: !input entity09_icon
                  icon_color_rgb: !input entity09_icon_color
                  confirm: !input entity09_confirm
                  page: buttonpage02
                  component: button01
                - entity: !input entity10
                  name: !input entity10_name
                  icon: !input entity10_icon
                  icon_color_rgb: !input entity10_icon_color
                  confirm: !input entity10_confirm
                  page: buttonpage02
                  component: button02
                - entity: !input entity11
                  name: !input entity11_name
                  icon: !input entity11_icon
                  icon_color_rgb: !input entity11_icon_color
                  confirm: !input entity11_confirm
                  page: buttonpage02
                  component: button03
                - entity: !input entity12
                  name: !input entity12_name
                  icon: !input entity12_icon
                  icon_color_rgb: !input entity12_icon_color
                  confirm: !input entity12_confirm
                  page: buttonpage02
                  component: button04
                - entity: !input entity13
                  name: !input entity13_name
                  icon: !input entity13_icon
                  icon_color_rgb: !input entity13_icon_color
                  confirm: !input entity13_confirm
                  page: buttonpage02
                  component: button05
                - entity: !input entity14
                  name: !input entity14_name
                  icon: !input entity14_icon
                  icon_color_rgb: !input entity14_icon_color
                  confirm: !input entity14_confirm
                  page: buttonpage02
                  component: button06
                - entity: !input entity15
                  name: !input entity15_name
                  icon: !input entity15_icon
                  icon_color_rgb: !input entity15_icon_color
                  confirm: !input entity15_confirm
                  page: buttonpage02
                  component: button07
                - entity: !input entity16
                  name: !input entity16_name
                  icon: !input entity16_icon
                  icon_color_rgb: !input entity16_icon_color
                  confirm: !input entity16_confirm
                  page: buttonpage02
                  component: button08
                - entity: !input entity17
                  name: !input entity17_name
                  icon: !input entity17_icon
                  icon_color_rgb: !input entity17_icon_color
                  confirm: !input entity17_confirm
                  page: buttonpage03
                  component: button01
                - entity: !input entity18
                  name: !input entity18_name
                  icon: !input entity18_icon
                  icon_color_rgb: !input entity18_icon_color
                  confirm: !input entity18_confirm
                  page: buttonpage03
                  component: button02
                - entity: !input entity19
                  name: !input entity19_name
                  icon: !input entity19_icon
                  icon_color_rgb: !input entity19_icon_color
                  confirm: !input entity19_confirm
                  page: buttonpage03
                  component: button03
                - entity: !input entity20
                  name: !input entity20_name
                  icon: !input entity20_icon
                  icon_color_rgb: !input entity20_icon_color
                  confirm: !input entity20_confirm
                  page: buttonpage03
                  component: button04
                - entity: !input entity21
                  name: !input entity21_name
                  icon: !input entity21_icon
                  icon_color_rgb: !input entity21_icon_color
                  confirm: !input entity21_confirm
                  page: buttonpage03
                  component: button05
                - entity: !input entity22
                  name: !input entity22_name
                  icon: !input entity22_icon
                  icon_color_rgb: !input entity22_icon_color
                  confirm: !input entity22_confirm
                  page: buttonpage03
                  component: button06
                - entity: !input entity23
                  name: !input entity23_name
                  icon: !input entity23_icon
                  icon_color_rgb: !input entity23_icon_color
                  confirm: !input entity23_confirm
                  page: buttonpage03
                  component: button07
                - entity: !input entity24
                  name: !input entity24_name
                  icon: !input entity24_icon
                  icon_color_rgb: !input entity24_icon_color
                  confirm: !input entity24_confirm
                  page: buttonpage03
                  component: button08
                - entity: !input entity25
                  name: !input entity25_name
                  icon: !input entity25_icon
                  icon_color_rgb: !input entity25_icon_color
                  confirm: !input entity25_confirm
                  page: buttonpage04
                  component: button01
                - entity: !input entity26
                  name: !input entity26_name
                  icon: !input entity26_icon
                  icon_color_rgb: !input entity26_icon_color
                  confirm: !input entity26_confirm
                  page: buttonpage04
                  component: button02
                - entity: !input entity27
                  name: !input entity27_name
                  icon: !input entity27_icon
                  icon_color_rgb: !input entity27_icon_color
                  confirm: !input entity27_confirm
                  page: buttonpage04
                  component: button03
                - entity: !input entity28
                  name: !input entity28_name
                  icon: !input entity28_icon
                  icon_color_rgb: !input entity28_icon_color
                  confirm: !input entity28_confirm
                  page: buttonpage04
                  component: button04
                - entity: !input entity29
                  name: !input entity29_name
                  icon: !input entity29_icon
                  icon_color_rgb: !input entity29_icon_color
                  confirm: !input entity29_confirm
                  page: buttonpage04
                  component: button05
                - entity: !input entity30
                  name: !input entity30_name
                  icon: !input entity30_icon
                  icon_color_rgb: !input entity30_icon_color
                  confirm: !input entity30_confirm
                  page: buttonpage04
                  component: button06
                - entity: !input entity31
                  name: !input entity31_name
                  icon: !input entity31_icon
                  icon_color_rgb: !input entity31_icon_color
                  confirm: !input entity31_confirm
                  page: buttonpage04
                  component: button07
                - entity: !input entity32
                  name: !input entity32_name
                  icon: !input entity32_icon
                  icon_color_rgb: !input entity32_icon_color
                  confirm: !input entity32_confirm
                  page: buttonpage04
                  component: button08
                confirm_list: "{{\n  button_pages_buttons[first_button:last_button]\n
                  \ | sort(attribute=\"component\")\n  | map(attribute=\"confirm\")\n
                  \ | list\n}}\n"
                confirm_value: "{% set ns = namespace(decimal_value = 0, index = 0)
                  %} {% for confirm_item in confirm_list %}\n    {% if (confirm_item)
                  %}\n        {% set ns.decimal_value = ns.decimal_value + (2 ** ns.index)
                  %}\n    {% endif %}\n    {% set ns.index = ns.index + 1 %}\n{% endfor
                  %} {{ ns.decimal_value }}\n"
            - if: '{{ button_page_index >= 0 and button_page_index <= 3 }}'
              then:
              - if: '{{ button_pages_labels[button_page_index].label | length > 0
                  }}'
                then:
                - service: '{{ nextion.command.text_printf }}'
                  data:
                    component: '{{ "bpage%02d_label" | format(button_page_index+1)
                      }}'
                    message: '{{ button_pages_labels[button_page_index].label }}'
                  continue_on_error: true
              - *id001
              - service: '{{ nextion.command.value }}'
                data:
                  component: confirm
                  message: '{{ confirm_value }}'
                continue_on_error: true
              - variables:
                  show_while_loading: !input show_while_loading
              - if: '{{ show_while_loading }}'
                then:
                - *id001
                - service: '{{ nextion.command.show_all }}'
                  continue_on_error: true
              - repeat:
                  for_each: '{{ button_pages_buttons[first_button:last_button] }}'
                  sequence: &id016
                  - if: "{{\n  repeat.item.entity is string and\n  repeat.item.entity
                      | length > 0 and\n  repeat.item.entity.split(\".\") | default([])
                      | count > 0\n}}\n"
                    then:
                    - variables:
                        item_domain: '{{ repeat.item.entity.split(".")[0] | default("unknown")
                          }}'
                        current_entity_state: '{{ states(repeat.item.entity) | default("unavailable")
                          }}'
                        current_entity_state_available: '{{ current_entity_state not
                          in ["unavailable"] }}'
                        btn_pic: "{{\n  nextion.pic.button.on\n  if current_entity_state
                          in [\"on\", \"open\", \"opening\", \"home\", \"playing\"]\n
                          \ or (item_domain == \"climate\" and current_entity_state
                          != \"off\")\n  or (item_domain in [\"button\",\"input_button\",\"scene\"]
                          and trigger.id is match \"current_state_entity\")\n  else
                          nextion.pic.button.off\n}}\n"
                        btn_bg: "{{\n  nextion.color.white\n  if current_entity_state
                          in [\"on\", \"open\", \"opening\", \"home\", \"playing\"]\n
                          \ or (item_domain == \"climate\" and current_entity_state
                          != \"off\")\n  or (item_domain in [\"button\",\"input_button\",\"scene\"]
                          and trigger.id is match \"current_state_entity\")\n  else
                          nextion.color.grey_dark\n}}\n"
                        btn_icon_font: "{% if not current_entity_state_available %}\n
                          \ {{ nextion.color.red }}\n{% elif current_entity_state
                          in [\"off\", \"closed\", \"closing\"] or (item_domain ==
                          \"person\" and current_entity_state != \"home\") %}\n  {{
                          nextion.color.grey_light }}\n{% elif item_domain in [\"button\",
                          \"input_button\", \"scene\"] and trigger.id is match \"current_state_entity\"
                          %}\n  {{ [ repeat.item.icon_color_rgb ] if is_number(repeat.item.icon_color_rgb)
                          else repeat.item.icon_color_rgb }}\n{% elif item_domain
                          in [\"button\", \"input_button\", \"scene\"] %}\n  {{ nextion.color.grey_light
                          }}\n{% elif current_entity_state in [\"on\", \"open\", \"opening\",
                          \"home\"] or (item_domain == \"climate\" and current_entity_state
                          != \"off\") %}\n  {{ [ repeat.item.icon_color_rgb ] if is_number(repeat.item.icon_color_rgb)
                          else repeat.item.icon_color_rgb }}\n{% else %}{{ nextion.color.red
                          }} {% endif %}\n"
                        btn_txt_font: "{% if not current_entity_state_available %}{{
                          nextion.color.white }} {% elif current_entity_state in [\"off\",
                          \"closed\", \"closing\"] or (item_domain == \"person\" and
                          current_entity_state != \"home\") %}\n  {{ nextion.color.white
                          }}\n{% elif item_domain in [\"button\", \"input_button\",
                          \"scene\"] and trigger.id is match \"current_state_entity\"
                          %}\n  {{ nextion.color.grey_dark }}\n{% elif item_domain
                          in [\"button\", \"input_button\", \"scene\"] %}\n  {{ nextion.color.white
                          }}\n{% elif current_entity_state in [\"on\", \"open\", \"opening\",
                          \"home\", \"playing\"] or (item_domain == \"climate\" and
                          current_entity_state != \"off\") %}\n  {{ nextion.color.grey_dark
                          }}\n{% else %}\n  {{ nextion.color.white }}\n{% endif %}"
                        btn_bri_font: '{{ btn_txt_font }}'
                        btn_icon: "{% if not current_entity_state_available %}{{ nextion.icon.domain.unknown
                          }} {% elif repeat.item.icon | length > 0 %}\n  {{\n    all_icons[repeat.item.icon.split(\":\")[1]]
                          | default(all_icons.unknown)\n    if repeat.item.icon.split(\":\")
                          | count > 0\n    else repeat.item.icon\n  }}\n{% elif repeat.item.entity
                          and repeat.item.entity.split(\".\") | count > 1 %}\n  {{
                          nextion.icon.domain[repeat.item.entity.split(\".\")[0] if
                          repeat.item.entity else \"unknown\"] }}\n{% else %}{{ nextion.icon.domain.unknown
                          }} {% endif %}\n"
                        btn_label_tmp: "{{\n  repeat.item.name\n  if repeat.item.name
                          is string and repeat.item.name | length > 0\n  else state_attr(repeat.item.entity,
                          \"friendly_name\")\n}}\n"
                        btn_label: "{{\n  btn_label_tmp\n  if btn_label_tmp is string
                          and btn_label_tmp | length > 0\n  else\n    (\n      item_domain\n
                          \     if item_domain is string and item_domain | length
                          > 0\n      else \"\"\n    )\n}}\n"
                        btn_bri_txt: "{% if not current_entity_state_available %}
                          0 {% elif item_domain == \"light\" and current_entity_state
                          == \"on\" and state_attr(repeat.item.entity, \"brightness\")
                          != None %}\n  {{ (state_attr(repeat.item.entity, \"brightness\")
                          | int * 100 /255) | round(0) }}%\n{% elif item_domain ==
                          \"fan\" and current_entity_state == \"on\" and state_attr(repeat.item.entity,
                          \"percentage\") != None %}\n  {{ state_attr(repeat.item.entity,
                          \"percentage\") | round(0, default=0) }}%\n{% elif item_domain
                          == \"cover\" and current_entity_state in [\"open\", \"opening\",
                          \"closing\"] and state_attr(repeat.item.entity, \"current_position\")
                          != None %}\n  {{ (state_attr(repeat.item.entity, \"current_position\")
                          | int(100)) | round(0) }}%\n{% elif item_domain == \"climate\"
                          and current_entity_state != \"off\" and state_attr(repeat.item.entity,
                          'current_temperature') != None %}\n  {{ (state_attr(repeat.item.entity,
                          'current_temperature') | float) | round(0) }}{{ temperature_units
                          }}\n{% else -%} 0 {% endif -%}"
                    - *id001
                    - service: '{{ nextion.command.set_button }}'
                      data:
                        btn_id: '{{ repeat.item.page }}.{{ repeat.item.component }}'
                        btn_pic: '{{ btn_pic }}'
                        btn_bg: '{{ [ btn_bg ] if is_number(btn_bg) else btn_bg }}'
                        btn_icon_font: '{{ [ btn_icon_font ] if is_number(btn_icon_font)
                          else btn_icon_font }}'
                        btn_txt_font: '{{ [ btn_txt_font ] if is_number(btn_txt_font)
                          else btn_txt_font }}'
                        btn_bri_font: '{{ [ btn_bri_font ] if is_number(btn_bri_font)
                          else btn_bri_font }}'
                        btn_icon: '{{ btn_icon }}'
                        btn_label: '{{ btn_label }}'
                        btn_bri_txt: '{{ btn_bri_txt }}'
                      continue_on_error: true
                    - if: '{{ item_domain in ["button","input_button","scene"] and
                        trigger.id is match "current_state_entity" }}'
                      then:
                      - delay:
                          milliseconds: 800
                      - service: '{{ nextion.command.set_button }}'
                        data:
                          btn_id: '{{ repeat.item.page }}.{{ repeat.item.component
                            }}'
                          btn_pic: '{{ nextion.pic.button.off }}'
                          btn_bg: '{{ nextion.color.grey_dark }}'
                          btn_icon_font: '{{ nextion.color.grey_light }}'
                          btn_txt_font: '{{ nextion.color.white }}'
                          btn_bri_font: '{{ [ btn_bri_font ] if is_number(btn_bri_font)
                            else btn_bri_font }}'
                          btn_icon: '{{ btn_icon }}'
                          btn_label: '{{ btn_label }}'
                          btn_bri_txt: '{{ btn_bri_txt }}'
                          btn_confirm: '{{ repeat.item.confirm }}'
                        continue_on_error: true
              - if: '{{ not show_while_loading }}'
                then:
                - *id001
                - service: '{{ nextion.command.show_all }}'
                  continue_on_error: true
              else:
              - *id001
              - service: '{{ nextion.command.show_all }}'
                continue_on_error: true
          - alias: Light settings page
            conditions: '{{ nspanel_event.page == page.light }}'
            sequence: &id017
            - variables:
                light_entity: '{{ nspanel_event.entity if nspanel_event is defined
                  and nspanel_event.entity is defined else trigger.entity_id }}'
                supported_color_modes: '{{ state_attr(light_entity, "supported_color_modes")
                  | default("unknown") }}'
                color_mode_color: "{{\n  \"hs\" in supported_color_modes\n  or \"xy\"
                  in supported_color_modes\n  or \"rgb\" in supported_color_modes\n
                  \ or \"rgbw\" in supported_color_modes\n  or \"rgbww\" in supported_color_modes\n}}\n"
                color_mode_color_temp: '{{ "color_temp" in supported_color_modes }}'
            - variables:
                curr_brightness: '{{ (state_attr(light_entity, "brightness") | int(0)
                  * 100 / 255) | round(0) }}'
            - *id001
            - service: '{{ nextion.command.value }}'
              data:
                component: light.lightslider
                message: '{{ curr_brightness }}'
              continue_on_error: true
            - *id001
            - service: '{{ nextion.command.text_printf }}'
              data:
                component: light.light_value
                message: '{{ curr_brightness }}%'
              continue_on_error: true
            - *id001
            - service: '{{ nextion.command.text_printf }}'
              data:
                component: light.light_value_2
                message: '{{ curr_brightness }}%'
              continue_on_error: true
            - if: '{{ color_mode_color_temp }}'
              then:
              - variables:
                  curr_color_temp: '{{ state_attr(light_entity, "color_temp") | int(-1)
                    }}'
                  min_mireds: '{{ state_attr(light_entity, "min_mireds") | int(153)
                    }}'
                  max_mireds: '{{ state_attr(light_entity, "max_mireds") | int(500)
                    }}'
              - variables:
                  curr_color_temp: "{{\n  curr_color_temp\n  if curr_color_temp >=
                    min_mireds and curr_color_temp <= max_mireds\n  else ((min_mireds+max_mireds)/2)
                    | int(327)\n}}\n"
              - condition: '{{ is_number(curr_color_temp) }}'
              - *id001
              - service: '{{ nextion.command.text_printf }}'
                data:
                  component: light.temp_value
                  message: '{{ curr_color_temp }}'
                continue_on_error: true
              - *id001
              - service: '{{ nextion.command.text_printf }}'
                data:
                  component: light.temp_value_2
                  message: '{{ curr_color_temp }}'
                continue_on_error: true
              - *id001
              - service: '{{ nextion.command.value }}'
                data:
                  component: light.tempslider
                  message: '{{ curr_color_temp }}'
                continue_on_error: true
              - *id001
              - service: '{{ nextion.command.printf }}'
                data:
                  cmd: tempslider.minval={{ min_mireds }}
                continue_on_error: true
              - *id001
              - service: '{{ nextion.command.printf }}'
                data:
                  cmd: tempslider.maxval={{ max_mireds }}
                continue_on_error: true
              - *id001
              - service: '{{ nextion.command.show }}'
                data:
                  component: temp_button
                continue_on_error: true
              - *id001
              - service: '{{ nextion.command.show }}'
                data:
                  component: temp_value_2
                continue_on_error: true
              - *id001
              - service: '{{ nextion.command.show }}'
                data:
                  component: temp_touch
                continue_on_error: true
            - if: '{{ color_mode_color }}'
              then:
              - *id001
              - service: '{{ nextion.command.show }}'
                data:
                  component: color_button
                continue_on_error: true
              - *id001
              - service: '{{ nextion.command.show }}'
                data:
                  component: color_touch
                continue_on_error: true
          - alias: Cover settings page
            conditions: '{{ nspanel_event.page == page.cover }}'
            sequence: &id018
            - variables:
                cover_entity: '{{ nspanel_event.entity if nspanel_event is defined
                  and nspanel_event.entity is defined else trigger.entity_id }}'
            - service: '{{ nextion.command.value }}'
              data:
                component: cover.coverslider
                message: '{{ (state_attr(cover_entity, "current_position") | int )
                  | round(0) }}'
              continue_on_error: true
            - *id001
            - service: '{{ nextion.command.text_printf }}'
              data:
                component: cover.cover_value
                message: '{{ (state_attr(cover_entity, "current_position") | int )
                  | round(0) }} %'
              continue_on_error: true
            - variables:
                battery_level: "{% if state_attr(cover_entity, \"battery\") | default(\"unavailable\")
                  not in [\"unavailable\", \"unknown\", \"\", None] %}\n  {{ state_attr(cover_entity,
                  \"battery\") | default(\"unavailable\") }}\n{% elif expand(device_entities(device_id(cover_entity)))\n
                  \       | selectattr(\"attributes.device_class\", \"defined\")\n
                  \       | selectattr(\"attributes.device_class\", \"eq\", \"battery\")\n
                  \       | map(attribute=\"state\")\n        | map(\"float\")\n        |
                  list\n        | count > 0 %}\n  {{\n    expand(device_entities(device_id(cover_entity)))\n
                  \   | selectattr(\"attributes.device_class\", \"defined\")\n    |
                  selectattr(\"attributes.device_class\", \"eq\", \"battery\")\n    |
                  map(attribute=\"state\") | map(\"float\")\n    | list\n    | first\n
                  \   | round(0)\n  }}\n{% elif has_value(cover_entity | replace(\"cover.\",\"sensor.\")
                  ~ \"_battery\") %}\n  {{ states(cover_entity | replace(\"cover.\",\"sensor.\")
                  ~ \"_battery\", rounded=true) | default(\"unavailable\") }}\n{%
                  elif has_value(cover_entity | replace(\"cover.\",\"sensor.\") |
                  replace(\"cover\", \"battery\")) %}\n  {{ states(cover_entity |
                  replace(\"cover.\",\"sensor.\") | replace(\"cover\", \"battery\"),
                  rounded=true) | default(\"unavailable\") }}\n{% else %} unavailable
                  {% endif %}\n"
            - if: '{{ is_number(battery_level) }}'
              then:
              - *id001
              - service: '{{ nextion.command.text_printf }}'
                data:
                  component: cover.battery_value
                  message: '{{ battery_level }} %'
                continue_on_error: true
              - *id001
              - service: '{{ nextion.command.set_component_color }}'
                data:
                  component: cover.battery_icon
                  foreground: '{{ nextion.color.grey_super_light }}'
                  background: []
                continue_on_error: true
              - *id001
              - service: '{{ nextion.command.text_printf }}'
                data:
                  component: cover.battery_icon
                  message: '{{ all_icons["battery-medium"] }}'
                continue_on_error: true
          - alias: Fan settings page
            conditions: '{{ nspanel_event.page == page.fan }}'
            sequence: &id020
            - variables:
                fan_entity: '{{ nspanel_event.entity if nspanel_event is defined and
                  nspanel_event.entity is defined else trigger.entity_id }}'
                fan:
                  supported_features: '{{ state_attr(fan_entity, "supported_features")
                    | int(0) }}'
                  percentage: "{{\n  state_attr(fan_entity, \"percentage\") | int(0)\n
                    \ if is_state(fan_entity, 'on')\n  else 0\n}}\n"
                  steps: "{% set percentage_step = state_attr(fan_entity, \"percentage_step\")
                    | float(0) %} {{\n  (100/percentage_step) | round(0) | int(0)\n
                    \ if percentage_step > 0\n  else 0\n}}\n"
            - condition: '{{ fan.steps > 0 and fan.supported_features | bitwise_and(1)
                > 0 }}'
            - service: '{{ nextion.command.value }}'
              data:
                component: fanslider
                message: '{{ ((fan.percentage / 100) * fan.steps) | round(0) | int(0)
                  }}'
              continue_on_error: true
            - *id001
            - service: '{{ nextion.command.printf }}'
              data:
                cmd: fanslider.maxval={{ fan.steps }}
              continue_on_error: true
            - *id001
            - service: '{{ nextion.command.text_printf }}'
              data:
                component: fan_value
                message: '{{ fan.percentage }}%'
              continue_on_error: true
            - *id001
            - service: '{{ nextion.command.set_component_color }}'
              data:
                component: fan.button_up
                foreground: '{{ nextion.color.grey_white if fan.percentage < 100 else
                  nextion.color.grey_dark }}'
                background: []
              continue_on_error: true
            - *id001
            - service: '{{ nextion.command.set_component_color }}'
              data:
                component: fan.button_down
                foreground: '{{ nextion.color.grey_white if fan.percentage > 0 else
                  nextion.color.grey_dark }}'
                background: []
              continue_on_error: true
            - *id001
            - service: '{{ nextion.command.set_component_color }}'
              data:
                component: fan.button_off
                foreground: '{{ nextion.color.grey_white if fan.percentage > 0 else
                  nextion.color.grey_dark }}'
                background: []
              continue_on_error: true
          - alias: Media player settings page
            conditions: '{{ nspanel_event.page == page.media_player }}'
            sequence: &id021
            - variables:
                media_player_entity: '{{ nspanel_event.entity if nspanel_event is
                  defined and nspanel_event.entity is defined else trigger.entity_id
                  }}'
                wait_completed: false
            - alias: Refresh page in a loop
              repeat:
                sequence:
                - service: homeassistant.update_entity
                  data:
                    entity_id: '{{ nspanel_event.entity }}'
                  continue_on_error: true
                - delay:
                    milliseconds: '{{ media_player_update_delay }}'
                - variables:
                    media_player:
                      state: '{{ states(media_player_entity) }}'
                      is_volume_muted: '{{ state_attr(media_player_entity, "is_volume_muted")
                        | default(false) }}'
                      friendly_name: '{{ state_attr(media_player_entity, "friendly_name")
                        | default("Media player") }}'
                      volume_level: '{{ (state_attr(media_player_entity, "volume_level")
                        | round(2, default=0) * 100) | int(0) }}'
                      media_title: '{{ state_attr(media_player_entity, "media_title")
                        }}'
                      media_artist: '{{ state_attr(media_player_entity, "media_artist")
                        }}'
                      media_duration: '{{ state_attr(media_player_entity, "media_duration")
                        | int(0) }}'
                      media_position: '{{ state_attr(media_player_entity, "media_position")
                        | int(0) }}'
                      media_position_updated_at: '{{ state_attr(media_player_entity,
                        "media_position_updated_at") | default(now()) }}'
                      supported_features: '{{ state_attr(media_player_entity, "supported_features")
                        | int(0) }}'
                - service: '{{ nextion.command.media_player }}'
                  data:
                    entity: '{{ media_player_entity }}'
                    state: '{{ media_player.state if media_player.state is string
                      else "" }}'
                    is_volume_muted: '{{ media_player.is_volume_muted if media_player.is_volume_muted
                      is boolean else false }}'
                    friendly_name: '{{ media_player.friendly_name if media_player.friendly_name
                      is string else "" }}'
                    volume_level: '{{ media_player.volume_level }}'
                    media_title: '{{ media_player.media_title if media_player.media_title
                      is string and media_player.media_title not in [null, None, "unknown",
                      "unavailable"] else "" }}'
                    media_artist: '{{ media_player.media_artist if media_player.media_artist
                      is string and media_player.media_artist not in [null, None,
                      "unknown", "unavailable"] else "" }}'
                    media_duration: '{{ media_player.media_duration }}'
                    media_position: '{{ media_player.media_position }}'
                    media_position_delta: '{{ (now() | as_timestamp - media_player.media_position_updated_at
                      | as_timestamp | default(now() | as_timestamp)) if media_player.media_position_updated_at
                      not in [None, none, "", "unknown", "unavailable", false, 0]
                      and media_player.media_position_updated_at else 0 }}'
                    supported_features: '{{ media_player.supported_features }}'
                  continue_on_error: true
                - wait_template: '{{ states(currentpage) != page.media_player }}'
                  timeout:
                    milliseconds: '{{ media_player_update_interval }}'
                  continue_on_timeout: true
                - variables:
                    wait_completed: '{{ wait.completed }}'
                until:
                - or:
                  - '{{ wait_completed }}'
                  - '{{ states(currentpage) != page.media_player }}'
                  - '{{ nspanel_event.type != "page_changed" }}'
          - alias: Alarm settings page
            conditions: '{{ nspanel_event.page == page.alarm }}'
            sequence: &id029
            - variables:
                alarm_entity: !input alarm
            - if: '{{ alarm_entity is string and alarm_entity is match "alarm_control_panel."
                }}'
              then:
              - variables:
                  alarm:
                    state: '{{ states(alarm_entity) | default("unavailable") }}'
                    friendly_name: '{{ state_attr(alarm_entity, "friendly_name") }}'
                    supported_features: '{{ state_attr(alarm_entity, "supported_features")
                      | int(0) }}'
                    code_format: '{{ state_attr(alarm_entity, "code_format") }}'
                    code_arm_required: '{{ state_attr(alarm_entity, "code_arm_required")
                      }}'
              - condition: '{{ alarm.supported_features > 0 }}'
              - service: '{{ nextion.command.alarm_settings }}'
                data:
                  page_title: '{{ alarm.friendly_name }}'
                  state: '{{ alarm.state }}'
                  supported_features: '{{ alarm.supported_features }}'
                  code_format: '{{ alarm.code_format if alarm.code_format else "none"
                    }}'
                  code_arm_required: '{{ alarm.code_arm_required if alarm.code_arm_required
                    else false }}'
                  entity: '{{ alarm_entity }}'
                  mui_alarm: '{{ dict.values(mui[language].alarm) | list }}'
                continue_on_error: true
          - alias: Climate page
            conditions: '{{ nspanel_event.page == page.climate }}'
            sequence: &id019
            - variables:
                climate_entity_temp: '{{ nspanel_event.entity if nspanel_event is
                  defined and nspanel_event.entity is defined else trigger.entity_id
                  }}'
                climate_entity: '{{ climate_entity_temp if climate_entity_temp is
                  string and climate_entity_temp | length > 0 and climate_entity_temp
                  != "embedded_climate" else climate }}'
                settings_entity_domain: "{{\n  climate_entity.split(\".\")[0]\n  if\n
                  \   climate_entity is defined and\n    climate_entity is string
                  and\n    climate_entity.split(\".\") | count > 0\n  else \"unknown\"\n}}\n"
                hvac_modes: '{{ state_attr(climate_entity, "hvac_modes") if settings_entity_domain
                  == "climate" }}'
            - condition: '{{ settings_entity_domain == "climate" }}'
            - service: '{{ nextion.command.text_printf }}'
              data:
                component: page_label
                message: '{{ state_attr(climate_entity, "friendly_name") }}'
              continue_on_error: true
            - &id024
              variables:
                climate_page_entities:
                - entity: !input climate_value01
                  icon: !input climate_value01_icon
                  icon_color_rgb: !input climate_value01_icon_color
                  label_color_rgb: !input climate_value01_label_color
                  page: climate
                  component: value01
                - entity: !input climate_value02
                  icon: !input climate_value02_icon
                  icon_color_rgb: !input climate_value02_icon_color
                  label_color_rgb: !input climate_value02_label_color
                  page: climate
                  component: value02
                - entity: !input climate_value03
                  icon: !input climate_value03_icon
                  icon_color_rgb: !input climate_value03_icon_color
                  label_color_rgb: !input climate_value03_label_color
                  page: climate
                  component: value03
                - entity: !input climate_value04
                  icon: !input climate_value04_icon
                  icon_color_rgb: !input climate_value04_icon_color
                  label_color_rgb: !input climate_value04_label_color
                  page: climate
                  component: value04
            - repeat:
                for_each: '{{ climate_page_entities }}'
                sequence: *id007
            - &id027
              if: '{{ not (climate_entity == climate and embedded_climate) }}'
              then:
              - variables:
                  current_temp: '{{ state_attr(climate_entity, "current_temperature")
                    | float(-999) | round(1) }}'
                  target_temp: "{{\n  state_attr(climate_entity, \"temperature\")
                    | float(-999) | round(1)\n  if has_value(climate_entity)\n  else
                    -999\n}}\n"
                  temp_offset: '{{ (state_attr(climate_entity, "min_temp") | float(5)
                    * 10) | round(0) | int }}'
                  max_temp: '{{ (state_attr(climate_entity, "max_temp") | float(25)
                    * 10) | round(0) | int }}'
                  temp_step: "{% set target_temp_step = state_attr(climate_entity,
                    \"target_temp_step\") %} {% if not is_number(target_temp_step)
                    %}\n  {% set target_temp_step = state_attr(climate_entity, \"target_temperature_step\")
                    %}\n{% endif %} {% set target_temp_step = target_temp_step | float(0.5)
                    | abs %} {{ ((10 * target_temp_step) | round(0) | int) if is_number(target_temp_step)
                    and target_temp_step > 0 else 10 }}\n"
                  total_steps: '{{ ((max_temp-temp_offset)/temp_step) | round(0) |
                    int }}'
                  climate_state: '{{ states(climate_entity) | default("unavailable")
                    if climate_entity is string else "unavailable" }}'
                  hvac_action: '{{ state_attr(climate_entity, "hvac_action") }}'
                  climate_action: '{{ hvac_action if hvac_action not in ["unavailable",
                    "unknown", "", None] else climate_state }}'
                  climate_icon: '{% if "off" in climate_action %}{{ all_icons.blank
                    }} {% elif "heating" in climate_action or "heat" in climate_action
                    %}{{ all_icons["thermometer-lines"] }} {% elif "cooling" in climate_action
                    or "cool" in climate_action %}{{ all_icons.snowflake }} {% elif
                    "drying" in climate_action or "dry" in climate_action %}{{ all_icons["water-percent"]
                    }} {% elif "fan" in climate_action or "fan_only" in climate_action
                    %}{{ all_icons.fan }} {% elif "heat_cool" in climate_action %}{{
                    all_icons.autorenew }} {% elif "auto" in climate_action %}{{ all_icons["calendar-sync"]
                    }} {% elif "idle" in climate_action %}{{ all_icons.thermometer
                    }} {% else %}{{ all_icons.blank }} {% endif %}

                    '
              - *id001
              - service: '{{ nextion.command.set_climate }}'
                data:
                  current_temp: '{{ current_temp }}'
                  target_temp: '{{ target_temp }}'
                  temp_step: '{{ temp_step }}'
                  total_steps: '{{ total_steps }}'
                  temp_offset: '{{ temp_offset }}'
                  climate_icon: '{{ climate_icon }}'
                  embedded_climate: '{{ embedded_climate }}'
                  entity: '{{ climate_entity }}'
                continue_on_error: true
            - &id028
              if: '{{ not (climate_entity == climate and embedded_climate) }}'
              then:
              - repeat:
                  for_each: '{{ page_climate.buttons.hvac_mode }}'
                  sequence:
                  - condition: '{{ repeat.item.mode in hvac_modes }}'
                  - *id001
                  - service: '{{ nextion.command.set_component_color }}'
                    data:
                      component: climate.{{ repeat.item.component }}_icon
                      foreground: "{{\n  nextion.color[repeat.item.color]\n  if states(climate_entity)
                        == repeat.item.mode\n  else nextion.color.disabled\n}}\n"
                      background: []
                    continue_on_error: true
                  - *id001
                  - service: '{{ nextion.command.text_printf }}'
                    data:
                      component: climate.{{ repeat.item.component }}_icon
                      message: '{{ all_icons[repeat.item.icon] }}'
                    continue_on_error: true
                  - *id001
                  - service: '{{ nextion.command.show }}'
                    data:
                      component: '{{ repeat.item.component }}'
                    continue_on_error: true
            - &id025
              if: '{{ true }}'
              then:
              - &id011
                variables:
                  climate_custom_buttons:
                  - entity: !input climate_button08
                    icon: !input climate_button08_icon
                    icon_color_rgb: !input climate_button08_icon_color
                    component: button08
                  - entity: !input climate_button09
                    icon: !input climate_button09_icon
                    icon_color_rgb: !input climate_button09_icon_color
                    component: button09
              - repeat:
                  for_each: '{{ climate_custom_buttons }}'
                  sequence:
                  - condition: '{{ repeat.item.entity is defined and repeat.item.entity
                      is string and repeat.item.entity | length > 0 }}'
                  - variables:
                      entity_domain: "{{\n  repeat.item.entity.split(\".\")[0]\n  if\n
                        \   repeat.item.entity is defined and\n    repeat.item.entity
                        is string and\n    repeat.item.entity.split(\".\") | count
                        > 0\n  else \"unknown\"\n}}\n"
                  - condition: '{{ entity_domain != "unknown" }}'
                  - *id001
                  - service: '{{ nextion.command.set_component_color }}'
                    data:
                      component: climate.{{ repeat.item.component }}_icon
                      foreground: "{{\n  repeat.item.icon_color_rgb\n  if states(repeat.item.entity)
                        in [\"on\", \"true\", true, \"open\", \"opening\"]\n  else
                        nextion.color.disabled\n}}\n"
                      background: []
                    continue_on_error: true
                  - *id001
                  - service: '{{ nextion.command.text_printf }}'
                    data:
                      component: climate.{{ repeat.item.component }}_icon
                      message: "{{\n  all_icons[repeat.item.icon.split(\":\")[1]]
                        | default(all_icons.unknown)\n  if repeat.item.icon is defined
                        and repeat.item.icon is string and \":\" in repeat.item.icon
                        and repeat.item.icon.split(\":\") | count > 0\n  else nextion.icon.domain[entity_domain]
                        | default(all_icons.unknown)\n}}\n"
                    continue_on_error: true
                  - *id001
                  - service: '{{ nextion.command.show }}'
                    data:
                      component: '{{ repeat.item.component }}'
                    continue_on_error: true
          - alias: Entity pages
            conditions: '{{ nspanel_event.page in page.entitypages }}'
            sequence: &id015
            - &id022
              variables:
                entitypages_value_alignment_temp: !input entitypages_value_alignment
                entitypages_value_alignment: "{{\n  entitypages_value_alignment_temp
                  | int\n  if\n    is_number(entitypages_value_alignment_temp) and\n
                  \   entitypages_value_alignment_temp | int >= 0 and\n    entitypages_value_alignment_temp
                  | int <= 2\n  else 0\n}}\n"
                entity_pages_labels:
                - label: !input entity_page01_label
                - label: !input entity_page02_label
                - label: !input entity_page03_label
                - label: !input entity_page04_label
                entity_pages_entities:
                - entity: !input entities_entity01
                  name: !input entities_entity01_name
                  icon: !input entities_entity01_icon
                  page: entitypage01
                  component: value01
                - entity: !input entities_entity02
                  name: !input entities_entity02_name
                  icon: !input entities_entity02_icon
                  page: entitypage01
                  component: value02
                - entity: !input entities_entity03
                  name: !input entities_entity03_name
                  icon: !input entities_entity03_icon
                  page: entitypage01
                  component: value03
                - entity: !input entities_entity04
                  name: !input entities_entity04_name
                  icon: !input entities_entity04_icon
                  page: entitypage01
                  component: value04
                - entity: !input entities_entity05
                  name: !input entities_entity05_name
                  icon: !input entities_entity05_icon
                  page: entitypage01
                  component: value05
                - entity: !input entities_entity06
                  name: !input entities_entity06_name
                  icon: !input entities_entity06_icon
                  page: entitypage01
                  component: value06
                - entity: !input entities_entity07
                  name: !input entities_entity07_name
                  icon: !input entities_entity07_icon
                  page: entitypage01
                  component: value07
                - entity: !input entities_entity08
                  name: !input entities_entity08_name
                  icon: !input entities_entity08_icon
                  page: entitypage01
                  component: value08
                - entity: !input entities_entity09
                  name: !input entities_entity09_name
                  icon: !input entities_entity09_icon
                  page: entitypage02
                  component: value01
                - entity: !input entities_entity10
                  name: !input entities_entity10_name
                  icon: !input entities_entity10_icon
                  page: entitypage02
                  component: value02
                - entity: !input entities_entity11
                  name: !input entities_entity11_name
                  icon: !input entities_entity11_icon
                  page: entitypage02
                  component: value03
                - entity: !input entities_entity12
                  name: !input entities_entity12_name
                  icon: !input entities_entity12_icon
                  page: entitypage02
                  component: value04
                - entity: !input entities_entity13
                  name: !input entities_entity13_name
                  icon: !input entities_entity13_icon
                  page: entitypage02
                  component: value05
                - entity: !input entities_entity14
                  name: !input entities_entity14_name
                  icon: !input entities_entity14_icon
                  page: entitypage02
                  component: value06
                - entity: !input entities_entity15
                  name: !input entities_entity15_name
                  icon: !input entities_entity15_icon
                  page: entitypage02
                  component: value07
                - entity: !input entities_entity16
                  name: !input entities_entity16_name
                  icon: !input entities_entity16_icon
                  page: entitypage02
                  component: value08
                - entity: !input entities_entity17
                  name: !input entities_entity17_name
                  icon: !input entities_entity17_icon
                  page: entitypage03
                  component: value01
                - entity: !input entities_entity18
                  name: !input entities_entity18_name
                  icon: !input entities_entity18_icon
                  page: entitypage03
                  component: value02
                - entity: !input entities_entity19
                  name: !input entities_entity19_name
                  icon: !input entities_entity19_icon
                  page: entitypage03
                  component: value03
                - entity: !input entities_entity20
                  name: !input entities_entity20_name
                  icon: !input entities_entity20_icon
                  page: entitypage03
                  component: value04
                - entity: !input entities_entity21
                  name: !input entities_entity21_name
                  icon: !input entities_entity21_icon
                  page: entitypage03
                  component: value05
                - entity: !input entities_entity22
                  name: !input entities_entity22_name
                  icon: !input entities_entity22_icon
                  page: entitypage03
                  component: value06
                - entity: !input entities_entity23
                  name: !input entities_entity23_name
                  icon: !input entities_entity23_icon
                  page: entitypage03
                  component: value07
                - entity: !input entities_entity24
                  name: !input entities_entity24_name
                  icon: !input entities_entity24_icon
                  page: entitypage03
                  component: value08
                - entity: !input entities_entity25
                  name: !input entities_entity25_name
                  icon: !input entities_entity25_icon
                  page: entitypage04
                  component: value01
                - entity: !input entities_entity26
                  name: !input entities_entity26_name
                  icon: !input entities_entity26_icon
                  page: entitypage04
                  component: value02
                - entity: !input entities_entity27
                  name: !input entities_entity27_name
                  icon: !input entities_entity27_icon
                  page: entitypage04
                  component: value03
                - entity: !input entities_entity28
                  name: !input entities_entity28_name
                  icon: !input entities_entity28_icon
                  page: entitypage04
                  component: value04
                - entity: !input entities_entity29
                  name: !input entities_entity29_name
                  icon: !input entities_entity29_icon
                  page: entitypage04
                  component: value05
                - entity: !input entities_entity30
                  name: !input entities_entity30_name
                  icon: !input entities_entity30_icon
                  page: entitypage04
                  component: value06
                - entity: !input entities_entity31
                  name: !input entities_entity31_name
                  icon: !input entities_entity31_icon
                  page: entitypage04
                  component: value07
                - entity: !input entities_entity32
                  name: !input entities_entity32_name
                  icon: !input entities_entity32_icon
                  page: entitypage04
                  component: value08
            - variables:
                entity_page_index: '{{ (nspanel_event.page[-2:] | int(-1)) - 1 }}'
                first_entity: '{{ entity_page_index * 8 }}'
                last_entity: '{{ first_entity + 8 }}'
            - if: '{{ entity_pages_labels[entity_page_index].label | length > 0 }}'
              then:
              - service: '{{ nextion.command.text_printf }}'
                data:
                  component: '{{ "entity%02d_label" | format(entity_page_index + 1)
                    }}'
                  message: '{{ entity_pages_labels[entity_page_index].label }}'
                continue_on_error: true
              - *id001
            - repeat:
                for_each: '{{ entity_pages_entities[first_entity:last_entity] }}'
                sequence: &id023
                - if: '{{ repeat.item.entity is string and repeat.item.entity | length
                    > 0 }}'
                  then:
                  - variables:
                      repeat_item_state: '{{ states(repeat.item.entity, rounded=true)
                        | default("unavailable") }}'
                      repeat_item_icon: "{% if repeat.item.icon is string and repeat.item.icon
                        | length > 0 %}\n  {{\n    all_icons[repeat.item.icon.split(\":\")[1]]
                        | default(all_icons.unknown)\n    if repeat.item.icon.split(\":\")
                        | count > 0\n    else repeat.item.icon\n  }}\n{% elif state_attr(repeat.item.entity,
                        \"icon\") | default(\"\") not in [\"unavailable\", \"unknown\",
                        \"\", None] %}\n  {{ all_icons[state_attr(repeat.item.entity,
                        \"icon\").split(\":\")[1]] | default(None) }}\n{% endif %}\n"
                  - service: '{{ nextion.command.set_entity }}'
                    data:
                      ent_id: '{{ repeat.item.page }}.{{ repeat.item.component }}'
                      ent_icon: '{{ repeat_item_icon if repeat_item_icon else all_icons.blank
                        }}'
                      ent_label: '{%- if repeat.item.name | length > 0 -%} {{ repeat.item.name
                        }} {%- elif repeat_item_state in ["unavailable", "unknown",
                        "", None] -%} {{ repeat.item.entity }} {%- else -%} {{ state_attr(repeat.item.entity,
                        "friendly_name") | default(mui[language].no_name) }} {%- endif
                        -%}'
                      ent_value: '{{ repeat_item_state ~ ((state_attr(repeat.item.entity,
                        "unit_of_measurement") | default("")) if state_attr(repeat.item.entity,
                        "unit_of_measurement") is string else "") }}'
                      ent_value_xcen: '{{ entitypages_value_alignment }}'
                    continue_on_error: true
          - alias: Weather pages
            conditions: '{{ nspanel_event.page in page.weatherpages }}'
            sequence:
            - variables:
                weather_attribution: '{{ state_attr(weather_entity, "attribution")
                  if weather_entity is string }}'
                weather_type: '{% if not weather_attribution %} unavailable {% elif
                  "AccuWeather" in weather_attribution %} AccuWeather {% elif "OpenWeatherMap"
                  in weather_attribution %} OpenWeather {% elif "SMHI" in weather_attribution
                  %} SMHI {% elif "met.no" in weather_attribution %} Met.no {% elif
                  "Météo-France" in weather_attribution %} Meteo_France {% else %}
                  Other {% endif %}

                  '
                weather_units:
                  hours_of_sun: '{{ state_attr(weather_entity, "hours_of_sun_unit")
                    | default("h") if weather_entity is string and state_attr(weather_entity,
                    "hours_of_sun_unit") else "h" }}'
                  precipitation: '{{ state_attr(weather_entity, "precipitation_unit")
                    | default("") if weather_entity is string and state_attr(weather_entity,
                    "precipitation_unit") }}'
                  precipitation_probability: '{{ state_attr(weather_entity, "precipitation_probability_unit")
                    | default("%") if weather_entity is string and state_attr(weather_entity,
                    "precipitation_probability_unit") else "%" }}'
                  pressure: '{{ state_attr(weather_entity, "pressure_unit") | default("")
                    if weather_entity is string and state_attr(weather_entity, "pressure_unit")
                    }}'
                  thunderstorm_probability: '{{ state_attr(weather_entity, "thunderstorm_probability_unit")
                    | default("%") if weather_entity is string and state_attr(weather_entity,
                    "thunderstorm_probability_unit") else "%" }}'
                  uv_index: '{{ state_attr(weather_entity, "uv_index_unit") | default("")
                    if weather_entity is string and state_attr(weather_entity, "uv_index_unit")
                    }}'
                  wind_speed: '{{ state_attr(weather_entity, "wind_speed_unit") |
                    default("") if weather_entity is string and state_attr(weather_entity,
                    "wind_speed_unit") }}'
                page_name: '{{ nspanel_event.page }}'
                page_index: '{{ (page_name[-2:] | int(0)) - 1 }}'
            - service: '{{ nextion.command.text_printf }}'
              data:
                component: '{{ page_name }}.day'
                message: '{{ (dict.values(mui[language].relative_day) | list)[page_index]
                  }}'
              continue_on_error: true
            - *id001
            - service: '{{ nextion.command.text_printf }}'
              data:
                component: '{{ page_name }}.date'
                message: "{{\n  as_timestamp(now() + timedelta(days= (page_index)))\n
                  \ | timestamp_custom\n    (\n      date_format\n      | replace(\"%A\",
                  (dict.values(mui[language].weekdays) | list)[(now() + timedelta(days=
                  (page_index))).weekday()])\n      | replace(\"%a\", (dict.values(mui[language].weekdays_short)
                  | list)[(now() + timedelta(days= (page_index))).weekday()])\n      |
                  replace(\"%B\", (dict.values(mui[language].months) | list)[(now()
                  + timedelta(days= (page_index))).month-1])\n      | replace(\"%b\",
                  (dict.values(mui[language].months_short) | list)[(now() + timedelta(days=
                  (page_index))).month-1])\n    )\n}}\n"
              continue_on_error: true
            - *id001
            - variables:
                datetime_is_string: '{{ state_attr(weather_entity, "forecast")[0]
                  is defined and state_attr(weather_entity, "forecast")[0]["datetime"]
                  is string }}'
                forecast_day: "{% if datetime_is_string %}\n  {{\n    state_attr(weather_entity,
                  \"forecast\") | default([])\n    | selectattr(\"datetime\", \"defined\")\n
                  \   | selectattr(\"datetime\", \">=\", (today_at(\"00:00\") + timedelta(days=
                  page_index)) | as_timestamp | timestamp_utc )\n    | selectattr(\"datetime\",
                  \"<\", (today_at(\"00:00\") + timedelta(days= (page_index+1))) |
                  as_timestamp | timestamp_utc )\n    | list\n  }}\n{% else %}\n  [\n
                  \   {\n      'datetime': '{{ state_attr(weather_entity, \"forecast\")
                  | default([])\n        | selectattr(\"datetime\", \"defined\")\n
                  \       | selectattr(\"datetime\", \">=\", (today_at(\"00:00\")
                  + timedelta(days= page_index)) | as_timestamp | as_datetime )\n
                  \       | selectattr(\"datetime\", \"<\", (today_at(\"00:00\") +
                  timedelta(days= (page_index+1))) | as_timestamp | as_datetime )\n
                  \       | map(attribute=\"datetime\") | list | first | as_timestamp
                  | timestamp_utc\n        if state_attr(weather_entity, \"forecast\")
                  | default([])\n        | selectattr(\"datetime\", \"defined\")\n
                  \       | selectattr(\"datetime\", \">=\", (today_at(\"00:00\")
                  + timedelta(days= page_index)) | as_timestamp | as_datetime )\n
                  \       | selectattr(\"datetime\", \"<\", (today_at(\"00:00\") +
                  timedelta(days= (page_index+1))) | as_timestamp | as_datetime )\n
                  \       | map(attribute=\"datetime\") | list | count > 0\n        else
                  \"\" }}',\n      'condition': '{{ state_attr(weather_entity, \"forecast\")
                  | default([])\n        | selectattr(\"condition\", \"defined\")\n
                  \       | selectattr(\"datetime\", \"defined\")\n        | selectattr(\"datetime\",
                  \">=\", (today_at(\"00:00\") + timedelta(days= page_index)) | as_timestamp
                  | as_datetime )\n        | selectattr(\"datetime\", \"<\", (today_at(\"00:00\")
                  + timedelta(days= (page_index+1))) | as_timestamp | as_datetime
                  )\n        | map(attribute=\"condition\") | list | first\n        if
                  state_attr(weather_entity, \"forecast\") | default([])\n        |
                  selectattr(\"condition\", \"defined\")\n        | selectattr(\"datetime\",
                  \"defined\")\n        | selectattr(\"datetime\", \">=\", (today_at(\"00:00\")
                  + timedelta(days= page_index)) | as_timestamp | as_datetime )\n
                  \       | selectattr(\"datetime\", \"<\", (today_at(\"00:00\") +
                  timedelta(days= (page_index+1))) | as_timestamp | as_datetime )\n
                  \       | map(attribute=\"condition\") | list | count > 0\n        else
                  \"\" }}',\n      'temperature': '{{ state_attr(weather_entity, \"forecast\")
                  | default([])\n        | selectattr(\"temperature\", \"defined\")\n
                  \       | selectattr(\"datetime\", \"defined\")\n        | selectattr(\"datetime\",
                  \">=\", (today_at(\"00:00\") + timedelta(days= page_index)) | as_timestamp
                  | as_datetime )\n        | selectattr(\"datetime\", \"<\", (today_at(\"00:00\")
                  + timedelta(days= (page_index+1))) | as_timestamp | as_datetime
                  )\n        | map(attribute=\"temperature\") | list | first\n        if
                  state_attr(weather_entity, \"forecast\") | default([])\n        |
                  selectattr(\"temperature\", \"defined\")\n        | selectattr(\"datetime\",
                  \"defined\")\n        | selectattr(\"datetime\", \">=\", (today_at(\"00:00\")
                  + timedelta(days= page_index)) | as_timestamp | as_datetime )\n
                  \       | selectattr(\"datetime\", \"<\", (today_at(\"00:00\") +
                  timedelta(days= (page_index+1))) | as_timestamp | as_datetime )\n
                  \       | map(attribute=\"temperature\") | list | count > 0\n        else
                  \"\" }}',\n      'templow': '{{ state_attr(weather_entity, \"forecast\")
                  | default([])\n        | selectattr(\"templow\", \"defined\")\n
                  \       | selectattr(\"datetime\", \"defined\")\n        | selectattr(\"datetime\",
                  \">=\", (today_at(\"00:00\") + timedelta(days= page_index)) | as_timestamp
                  | as_datetime )\n        | selectattr(\"datetime\", \"<\", (today_at(\"00:00\")
                  + timedelta(days= (page_index+1))) | as_timestamp | as_datetime
                  )\n        | map(attribute=\"templow\") | list | first\n        if
                  state_attr(weather_entity, \"forecast\") | default([])\n        |
                  selectattr(\"templow\", \"defined\")\n        | selectattr(\"datetime\",
                  \"defined\")\n        | selectattr(\"datetime\", \">=\", (today_at(\"00:00\")
                  + timedelta(days= page_index)) | as_timestamp | as_datetime )\n
                  \       | selectattr(\"datetime\", \"<\", (today_at(\"00:00\") +
                  timedelta(days= (page_index+1))) | as_timestamp | as_datetime )\n
                  \       | map(attribute=\"templow\") | list | count > 0\n        else
                  \"\" }}',\n      'precipitation': '{{ state_attr(weather_entity,
                  \"forecast\") | default([])\n        | selectattr(\"precipitation\",
                  \"defined\")\n        | selectattr(\"datetime\", \"defined\")\n
                  \       | selectattr(\"datetime\", \">=\", (today_at(\"00:00\")
                  + timedelta(days= page_index)) | as_timestamp | as_datetime )\n
                  \       | selectattr(\"datetime\", \"<\", (today_at(\"00:00\") +
                  timedelta(days= (page_index+1))) | as_timestamp | as_datetime )\n
                  \       | map(attribute=\"precipitation\") | list | first\n        if
                  state_attr(weather_entity, \"forecast\") | default([])\n        |
                  selectattr(\"precipitation\", \"defined\")\n        | selectattr(\"datetime\",
                  \"defined\")\n        | selectattr(\"datetime\", \">=\", (today_at(\"00:00\")
                  + timedelta(days= page_index)) | as_timestamp | as_datetime )\n
                  \       | selectattr(\"datetime\", \"<\", (today_at(\"00:00\") +
                  timedelta(days= (page_index+1))) | as_timestamp | as_datetime )\n
                  \       | map(attribute=\"precipitation\") | list | count > 0\n
                  \       else \"\" }}',\n      'wind_speed': '{{ state_attr(weather_entity,
                  \"forecast\") | default([])\n        | selectattr(\"wind_speed\",
                  \"defined\")\n        | selectattr(\"datetime\", \"defined\")\n
                  \       | selectattr(\"datetime\", \">=\", (today_at(\"00:00\")
                  + timedelta(days= page_index)) | as_timestamp | as_datetime )\n
                  \       | selectattr(\"datetime\", \"<\", (today_at(\"00:00\") +
                  timedelta(days= (page_index+1))) | as_timestamp | as_datetime )\n
                  \       | map(attribute=\"wind_speed\") | list | first\n        if
                  state_attr(weather_entity, \"forecast\") | default([])\n        |
                  selectattr(\"wind_speed\", \"defined\")\n        | selectattr(\"datetime\",
                  \"defined\")\n        | selectattr(\"datetime\", \">=\", (today_at(\"00:00\")
                  + timedelta(days= page_index)) | as_timestamp | as_datetime )\n
                  \       | selectattr(\"datetime\", \"<\", (today_at(\"00:00\") +
                  timedelta(days= (page_index+1))) | as_timestamp | as_datetime )\n
                  \       | map(attribute=\"wind_speed\") | list | count > 0\n        else
                  \"\" }}'\n    }\n  ]\n{% endif %}\n"
            - if: '{{ forecast_day | count > 0 or page_index == 0 }}'
              then:
              - variables:
                  metnoweather: '{{ weather_type == "Met.no" }}'
                  metnoweather_hourly_forecast: '{{ state_attr(weather_entity ~ "_hourly",
                    "forecast") if metnoweather and has_value(weather_entity ~ "_hourly")
                    }}'
                  forecast_day: "{% if forecast_day | count > 0 %}{{ forecast_day
                    }} {% elif metnoweather and metnoweather_hourly_forecast %}\n
                    \ {{ metnoweather_hourly_forecast\n    | selectattr(\"datetime\",
                    \"defined\")\n    | selectattr(\"datetime\", \">=\", (today_at(\"00:00\")
                    + timedelta(days= page_index)) | as_timestamp | timestamp_utc
                    )\n    | selectattr(\"datetime\", \"<\", (today_at(\"00:00\")
                    + timedelta(days= (page_index+1))) | as_timestamp | timestamp_utc
                    )\n    | list\n  }}\n{% endif %}\n"
              - variables:
                  forecast_day: "{% if forecast_day | count > 0 %}{{ forecast_day
                    }} {% elif page_index == 0 %}\n  [\n    {\n      'condition':
                    '{{ states(weather_entity) }}',\n      'temperature': '{{ state_attr(weather_entity,
                    \"temperature\") }}',\n      'wind_speed': '{{ state_attr(weather_entity,
                    \"wind_speed\") }}'\n    }\n  ]\n{% endif %}\n"
              - if: '{{ forecast_day | count > 0 }}'
                then:
                - variables:
                    accuweather: '{{ weather_type == "AccuWeather" }}'
                    accuweather_day_name: '{{ "day_" ~ page_index }}'
                    accuweather_sensor_prefix: '{{ "sensor." ~ (weather_entity | replace("weather.",""))
                      ~ "_" }}'
                    accuweather_sensor_sufix: '{{ "_" ~ page_index ~ "d" }}'
                    temp_min: "{{ forecast_day | selectattr(\"templow\", \"defined\")
                      | map(attribute=\"templow\") | map(\"float\") | list | min\n
                      \ if forecast_day | selectattr(\"templow\", \"defined\") | map(attribute=\"templow\")
                      | map(\"float\") | list | count > 0\n  else forecast_day | selectattr(\"temperature\",
                      \"defined\") | rejectattr(\"temperature\", \"eq\", \"\") | map(attribute=\"temperature\")
                      | map(\"float\") | list | min | default(\"unknown\")\n}}\n"
                    temp_max: "{{\n  forecast_day | selectattr(\"temperature\", \"defined\")
                      | rejectattr(\"temperature\", \"eq\", \"\") | map(attribute=\"temperature\")
                      | map(\"float\") | list | max\n  if forecast_day | selectattr(\"temperature\",
                      \"defined\") | rejectattr(\"temperature\", \"eq\", \"\") | map(attribute=\"temperature\")
                      | map(\"float\") | list | count > 0\n}}\n"
                    condition: "{{\n  forecast_day | selectattr(\"condition\", \"defined\")
                      | rejectattr(\"condition\", \"eq\", \"\") | map(attribute=\"condition\")
                      | list | first\n  if forecast_day | selectattr(\"condition\",
                      \"defined\") | rejectattr(\"condition\", \"eq\", \"\") | map(attribute=\"condition\")
                      | list | count > 0\n}}\n"
                    precipitation: "{{\n  forecast_day | selectattr(\"precipitation\",
                      \"defined\") | rejectattr(\"precipitation\", \"eq\", \"\") |
                      map(attribute=\"precipitation\") | map(\"float\") | list | sum
                      | round(0)\n  if forecast_day | selectattr(\"precipitation\",
                      \"defined\") | rejectattr(\"precipitation\", \"eq\", \"\") |
                      map(attribute=\"precipitation\") | map(\"float\") | list | count
                      > 0\n}}\n"
                    precipitation_probability: "{{\n  forecast_day | selectattr(\"precipitation_probability\",
                      \"defined\") | rejectattr(\"precipitation_probability\", \"eq\",
                      \"\") | map(attribute=\"precipitation_probability\") | map(\"float\")
                      | list | max | round(0)\n  if forecast_day | selectattr(\"precipitation_probability\",
                      \"defined\") | rejectattr(\"precipitation_probability\", \"eq\",
                      \"\") | map(attribute=\"precipitation_probability\") | map(\"float\")
                      | list | count > 0\n}}\n"
                    pressure: "{{\n  forecast_day | selectattr(\"pressure\", \"defined\")
                      | rejectattr(\"pressure\", \"eq\", \"\") | map(attribute=\"pressure\")
                      | map(\"float\") | list | max | round(0)\n  if forecast_day
                      | selectattr(\"pressure\", \"defined\") | rejectattr(\"pressure\",
                      \"eq\", \"\") | map(attribute=\"pressure\") | map(\"float\")
                      | list | count > 0\n}}\n"
                    wind_speed: "{{\n  forecast_day | selectattr(\"wind_speed\", \"defined\")
                      | rejectattr(\"wind_speed\", \"eq\", \"\") | map(attribute=\"wind_speed\")
                      | map(\"float\") | list | max | round(0)\n  if forecast_day
                      | selectattr(\"wind_speed\", \"defined\") | rejectattr(\"wind_speed\",
                      \"eq\", \"\") | map(attribute=\"wind_speed\") | map(\"float\")
                      | list | count > 0\n}}\n"
                    hours_of_sun: "{{\n  states(accuweather_sensor_prefix ~ \"hours_of_sun\"
                      ~ accuweather_sensor_sufix, rounded=true) | default(\"unknown\")\n
                      \ if accuweather\n  else\n    (\n      forecast_day | selectattr(\"hours_of_sun\",
                      \"defined\") | rejectattr(\"hours_of_sun\", \"eq\", \"\") |
                      map(attribute=\"hours_of_sun\") | map(\"float\") | list | sum
                      | round(0)\n      if forecast_day | selectattr(\"hours_of_sun\",
                      \"defined\") | rejectattr(\"hours_of_sun\", \"eq\", \"\") |
                      map(attribute=\"hours_of_sun\") | map(\"float\") | list | count
                      > 0\n    )\n}}\n"
                    uv_index: "{{\n  states(accuweather_sensor_prefix ~ \"uv_index\"
                      ~ accuweather_sensor_sufix, rounded=true) | default(\"unknown\")\n
                      \ if accuweather\n  else\n    (\n      forecast_day | selectattr(\"uv_index\",
                      \"defined\") | rejectattr(\"uv_index\", \"eq\", \"\") | map(attribute=\"uv_index\")
                      | map(\"float\") | list | max | round(0)\n      if forecast_day
                      | selectattr(\"uv_index\", \"defined\") | rejectattr(\"uv_index\",
                      \"eq\", \"\") | map(attribute=\"uv_index\") | map(\"float\")
                      | list | count > 0\n    )\n}}\n"
                    thunderstorm_probability: "{{\n  states(accuweather_sensor_prefix
                      ~ \"thunderstorm_probability_day\" ~ accuweather_sensor_sufix,
                      rounded=true) | default(\"unknown\")\n  if accuweather\n  else\n
                      \   (\n      forecast_day | selectattr(\"thunderstorm_probability\",
                      \"defined\") | rejectattr(\"thunderstorm_probability\", \"eq\",
                      \"\") | map(attribute=\"thunderstorm_probability\") | map(\"float\")
                      | list | max | round(0)\n      if forecast_day | selectattr(\"thunderstorm_probability\",
                      \"defined\") | rejectattr(\"thunderstorm_probability\", \"eq\",
                      \"\") | map(attribute=\"thunderstorm_probability\") | map(\"float\")
                      | list | count > 0\n    )\n}}\n"
                    parameters:
                    - name: hours_of_sun
                      visibility: '{{ is_number(hours_of_sun) }}'
                      value: '{{ (hours_of_sun ~ " " ~ weather_units.hours_of_sun)
                        if is_number(hours_of_sun) }}'
                      icon: '{{ nextion.icon.weather.sun }}'
                    - name: thunderstorm_probability
                      visibility: '{{ is_number(thunderstorm_probability) }}'
                      value: '{{ (thunderstorm_probability ~ weather_units.thunderstorm_probability)
                        if is_number(thunderstorm_probability) }}'
                      icon: '{{ nextion.icon.weather.lightning }}'
                    - name: precipitation
                      visibility: '{{ is_number(precipitation) or is_number(precipitation_probability)
                        }}'
                      value: '{{ (precipitation ~ " " ~ weather_units.precipitation)
                        if is_number(precipitation) }} {{ "-" if is_number(precipitation)
                        and is_number(precipitation_probability) }} {{ (precipitation_probability
                        ~ weather_units.precipitation_probability) if is_number(precipitation_probability)
                        }}

                        '
                      icon: '{{ nextion.icon.weather.rain }}'
                    - name: uv_index
                      visibility: '{{ is_number(uv_index) }}'
                      value: '{{ (state_attr(accuweather_sensor_prefix ~ "uv_index"
                        ~ accuweather_sensor_sufix, "level") | default(None) ~ ":
                        ") if weather_type == "AccuWeather" }} {{ (uv_index ~ weather_units.uv_index)
                        if is_number(uv_index) }}

                        '
                      icon: '{{ nextion.icon.weather.protect }}'
                    - name: wind_speed
                      visibility: '{{ is_number(wind_speed) }}'
                      value: '{{ (wind_speed ~ " " ~ weather_units.wind_speed) if
                        is_number(wind_speed) }}'
                      icon: '{{ nextion.icon.weather.wind }}'
                    - name: pressure
                      visibility: '{{ is_number(pressure) }}'
                      value: '{{ (pressure ~ " " ~ weather_units.pressure) if is_number(pressure)
                        }}'
                      icon: '{{ nextion.icon.weather.gauge }}'
                - if: '{{ condition not in ["unknown", None] }}'
                  then:
                  - service: '{{ nextion.command.printf }}'
                    data:
                      cmd: "{{ page_name }}.weather_icon.pic={{\n  nextion.pic.weather[states(weather_entity)
                        | default(\"unavailable\") if weather_entity is string else
                        \"unavailable\"] | default(None)\n  if condition == \"unknown\"
                        and page_name == page.weatherpages[0]\n  else nextion.pic.weather[condition]
                        | default(None)\n}}\n"
                    continue_on_error: true
                  - *id001
                - variables:
                    temperature_string: '{{ (temp_min | round(0) ~ temperature_units)
                      if is_number(temp_min) }} {{ "/" if is_number(temp_min) and
                      is_number(temp_max) and temp_min != temp_max }} {{ (temp_max
                      | round(0) ~ temperature_units) if is_number(temp_max) and temp_min
                      != temp_max }}

                      '
                - if: '{{ (is_number(temp_min) or is_number(temp_max)) and temperature_string
                    is string and temperature_string | length > 0 }}'
                  then:
                  - service: '{{ nextion.command.text_printf }}'
                    data:
                      component: '{{ page_name }}.temperature'
                      message: '{{ temperature_string }}'
                    continue_on_error: true
                  - *id001
                - repeat:
                    for_each: '{{ (parameters | selectattr("visibility", "eq", true)
                      | list)[:5] }}'
                    sequence:
                    - service: '{{ nextion.command.text_printf }}'
                      data:
                        component: '{{ page_name }}.value0{{ repeat.index }}'
                        message: '{{ repeat.item.value }}'
                      continue_on_error: true
                    - *id001
                    - service: '{{ nextion.command.text_printf }}'
                      data:
                        component: '{{ page_name }}.value0{{ repeat.index }}_icon'
                        message: '{{ repeat.item.icon }}'
                      continue_on_error: true
                    - *id001
                else: &id008
                - service: '{{ nextion.command.text_printf }}'
                  data:
                    component: '{{ page_name }}.value01'
                    message: '{{ mui[language].unavailable }}'
                  continue_on_error: true
                - *id001
              else: *id008
      - alias: Button click
        conditions:
        - '{{ nspanel_event.type == "button_click" }}'
        sequence:
        - choose:
          - alias: Hardware buttons
            conditions:
            - '{{ nspanel_event.component in ["hw_bt_left", "hw_bt_right"] }}'
            sequence:
            - *id004
            - variables:
                last_click_button: '{{ hardware.buttons.left if nspanel_event.component
                  == "hw_bt_left" else hardware.buttons.right }}'
                entity_domain: "{{\n  last_click_button.entity.split(\".\")[0] | default(\"unknown\")\n
                  \ if\n    last_click_button.entity is string and\n    last_click_button.entity
                  | length > 0 and\n    last_click_button.entity.split(\".\") | count
                  > 0\n  else \"unknown\"\n}}\n"
            - choose:
              - alias: Long click
                conditions:
                - '{{ nspanel_event.command == "long_click"}}'
                sequence:
                - choose:
                  - alias: Default
                    conditions:
                    - '{{ last_click_button.hold_select == "Default" and last_click_button.entity
                      | length > 0 }}'
                    - '{{ entity_domain in ["climate", "cover", "light", "fan", "media_player"]
                      }}'
                    - '{{ entity_domain != "cover" or state_attr(last_click_button.entity,
                      "supported_features") | int(0) | bitwise_and(4) > 0 }}'
                    - '{{ entity_domain != "fan" or state_attr(last_click_button.entity,
                      "supported_features") | int(0) | bitwise_and(1) > 0 }}'
                    - '{{ entity_domain != "light" or state_attr(last_click_button.entity,
                      "supported_color_modes") | default("unknown") | string not in
                      ["unknown", "onoff", enum.color_mode.unknown, enum.color_mode.onoff,
                      "", none] }}'
                    sequence:
                    - service: '{{ nextion.command.open_entity_settings_page }}'
                      data:
                        page: '{{ entity_domain }}'
                        page_label: '{{ last_click_button.name if last_click_button.name
                          is string and last_click_button.name | length > 0 else state_attr(last_click_button.entity,
                          "friendly_name") }}'
                        page_icon: '{{ nextion.icon.domain[entity_domain] }}'
                        page_icon_color:
                        - -1
                        entity: '{{ "embedded_climate" if last_click_button.entity
                          == thermostat_embedded else last_click_button.entity }}'
                        back_page: '{{ page.home }}'
                      continue_on_error: true
                  - alias: Custom action - Left
                    conditions: '{{ last_click_button.hold_select == "Custom Action"
                      and nspanel_event.component == "hw_bt_left" }}'
                    sequence: !input left_button_hold_custom_action
                  - alias: Custom action - Right
                    conditions: '{{ last_click_button.hold_select == "Custom Action"
                      and nspanel_event.component == "hw_bt_right" }}'
                    sequence: !input right_button_hold_custom_action
              - alias: Short click
                conditions:
                - '{{ nspanel_event.command == "short_click"}}'
                sequence:
                - condition: '{{ last_click_button.entity | length > 0 }}'
                - condition: '{{ nspanel_event.component != "hw_bt_left" or hardware.buttons.left.entity
                    != relay01_entity }}'
                - condition: '{{ nspanel_event.component != "hw_bt_right" or hardware.buttons.right.entity
                    != relay02_entity }}'
                - &id010
                  if: '{{ true }}'
                  then:
                  - service: "{% if entity_domain in [\"cover\"] and states(last_click_button.entity)
                      in [\"opening\", \"closing\"] and state_attr(last_click_button.entity,
                      \"supported_features\") | int(0) | bitwise_and(4) == 0 %}\n
                      \ {{ entity_domain }}.stop_cover\n{% elif entity_domain in [\"light\",
                      \"switch\", \"cover\", \"input_boolean\", \"automation\", \"fan\"]
                      %}\n  {{ entity_domain }}.toggle\n{% elif entity_domain in [\"button\",
                      \"input_button\"] %}\n  {{ entity_domain }}.press\n{% elif entity_domain
                      in [\"scene\", \"script\"] %}\n  {{ entity_domain }}.turn_on\n{%
                      elif entity_domain in [\"media_player\"] %}\n  {{ entity_domain
                      }}.media_play_pause\n{% else %}\n  homeassistant.update_entity\n{%
                      endif %}\n"
                    data:
                      entity_id: '{{ last_click_button.entity }}'
                    continue_on_error: true
                  - if: '{{ entity_domain in ["media_player"] }}'
                    then:
                    - delay:
                        milliseconds: '{{ media_player_update_delay }}'
                    - service: homeassistant.update_entity
                      data:
                        entity_id: '{{ last_click_button.entity }}'
                      continue_on_error: true
          - alias: Buttons pages
            conditions:
            - '{{ nspanel_event.page in page.buttonpages }}'
            sequence:
            - *id009
            - variables:
                last_click_button: '{{ button_pages_buttons | selectattr("page", "defined")
                  | selectattr("page", "eq", nspanel_event.page) | selectattr("component",
                  "defined") | selectattr("component", "eq", nspanel_event.component)
                  | list }}'
            - condition: '{{ last_click_button | count >= 0 }}'
            - variables:
                last_click_button: '{{ last_click_button[0] }}'
                entity_domain: "{{\n  last_click_button.entity.split(\".\")[0] | default(\"unknown\")\n
                  \ if\n    last_click_button.entity is string and\n    last_click_button.entity
                  | length > 0 and\n    last_click_button.entity.split(\".\") | count
                  > 0\n  else \"unknown\"\n}}\n"
            - choose:
              - alias: Long click
                conditions:
                - '{{ nspanel_event.command == "long_click" }}'
                - '{{ entity_domain != "cover" or state_attr(last_click_button.entity,
                  "supported_features") | int(0) | bitwise_and(4) > 0 }}'
                - '{{ entity_domain != "fan" or state_attr(last_click_button.entity,
                  "supported_features") | int(0) | bitwise_and(1) > 0 }}'
                - '{{ entity_domain != "light" or state_attr(last_click_button.entity,
                  "supported_color_modes") | default("unknown") | string not in ["unknown",
                  "onoff", enum.color_mode.unknown, enum.color_mode.onoff, "", none]
                  }}'
                sequence:
                - service: '{{ nextion.command.open_entity_settings_page }}'
                  data:
                    page: '{{ entity_domain }}'
                    page_label: '{{ last_click_button.name if last_click_button.name
                      is string and last_click_button.name | length > 0 else state_attr(last_click_button.entity,
                      "friendly_name") }}'
                    page_icon: "{{\n  all_icons[last_click_button.icon.split(\":\")[1]]
                      | default(last_click_button.icon if last_click_button.icon is
                      defined and last_click_button.icon is string else nextion.icon.domain[entity_domain])\n
                      \ if last_click_button.icon not in [\"unavailable\", \"unknown\",
                      \"\", None] and last_click_button.icon | length > 0\n  else
                      nextion.icon.domain[entity_domain]\n}}\n"
                    page_icon_color: '{{ [ last_click_button.icon_color_rgb ] if is_number(last_click_button.icon_color_rgb)
                      else last_click_button.icon_color_rgb }}'
                    entity: '{{ "embedded_climate" if last_click_button.entity ==
                      thermostat_embedded else last_click_button.entity }}'
                    back_page: '{{ nspanel_event.page }}'
                  continue_on_error: true
              - alias: Short click
                conditions:
                - '{{ nspanel_event.command == "short_click" }}'
                - '{{ entity_domain not in ["unknown", "person", "binary_sensor",
                  "sensor"] }}'
                sequence:
                - *id010
          - alias: Climate page
            conditions:
            - '{{ nspanel_event.page == page.climate }}'
            sequence:
            - *id011
            - variables:
                last_click_button: '{{ climate_custom_buttons | selectattr("component",
                  "defined") | selectattr("component", "eq", nspanel_event.component)
                  | list }}'
            - condition: '{{ last_click_button | count >= 0 }}'
            - variables:
                last_click_button: '{{ last_click_button[0] }}'
                entity_domain: "{{\n  last_click_button.entity.split(\".\")[0] | default(\"unknown\")\n
                  \ if\n    last_click_button.entity is string and\n    last_click_button.entity
                  | length > 0 and\n    last_click_button.entity.split(\".\") | count
                  > 0\n  else \"unknown\"\n}}\n"
            - choose:
              - alias: Long click
                conditions:
                - '{{ nspanel_event.command == "long_click" }}'
                sequence:
                - choose:
                  - conditions: '{{ nspanel_event.component == "button08" }}'
                    sequence: !input climate_button08_hold_custom_action
                  - conditions: '{{ nspanel_event.component == "button09" }}'
                    sequence: !input climate_button09_hold_custom_action
              - alias: Short click
                conditions:
                - '{{ nspanel_event.command == "short_click" }}'
                - '{{ entity_domain not in ["unknown", "person", "binary_sensor",
                  "sensor"] }}'
                sequence:
                - *id010
          - alias: Home page custom buttons
            conditions:
            - '{{ nspanel_event.page == page.home }}'
            sequence:
            - *id012
            - variables:
                last_click_button: '{{ home_page_custom_buttons | selectattr("component",
                  "defined") | selectattr("component", "eq", nspanel_event.component)
                  | list }}'
            - condition: '{{ last_click_button | count >= 0 }}'
            - variables:
                last_click_button: '{{ last_click_button[0] }}'
                entity_domain: "{{\n  last_click_button.entity.split(\".\")[0] | default(\"unknown\")\n
                  \ if\n    last_click_button.entity is string and\n    last_click_button.entity
                  | length > 0 and\n    last_click_button.entity.split(\".\") | count
                  > 0\n  else \"unknown\"\n}}\n"
            - if:
              - '{{ entity_domain in ["climate", "cover", "fan", "light", "media_player"]
                }}'
              - '{{ entity_domain != "cover" or state_attr(last_click_button.entity,
                "supported_features") | int(0) | bitwise_and(4) > 0 }}'
              - '{{ entity_domain != "fan" or state_attr(last_click_button.entity,
                "supported_features") | int(0) | bitwise_and(1) > 0 }}'
              - '{{ entity_domain != "light" or state_attr(last_click_button.entity,
                "supported_color_modes") | default("unknown") | string not in ["unknown",
                "onoff", enum.color_mode.unknown, enum.color_mode.onoff, "", none]
                }}'
              then:
              - service: '{{ nextion.command.open_entity_settings_page }}'
                data:
                  page: '{{ entity_domain }}'
                  page_label: '{{ last_click_button.name if last_click_button.name
                    is string and last_click_button.name | length > 0 else state_attr(last_click_button.entity,
                    "friendly_name") }}'
                  page_icon: "{{\n  all_icons[last_click_button.icon.split(\":\")[1]]
                    | default(last_click_button.icon if last_click_button.icon is
                    defined and last_click_button.icon is string else nextion.icon.domain[entity_domain])\n
                    \ if last_click_button.icon not in [\"unavailable\", \"unknown\",
                    \"\", None] and last_click_button.icon | length > 0\n  else nextion.icon.domain[entity_domain]\n}}\n"
                  page_icon_color:
                  - -1
                  entity: '{{ "embedded_climate" if last_click_button.entity == thermostat_embedded
                    else last_click_button.entity }}'
                  back_page: '{{ page.home }}'
                continue_on_error: true
              else:
              - *id010
      - alias: Versions
        conditions:
        - '{{ nspanel_event.type == "version"}}'
        sequence:
        - if: '{{ nspanel_event.blueprint != blueprint_version }}'
          then:
          - service: persistent_notification.create
            data:
              notification_id: NSPanel_HA_Blueprint_version_mismatch_{{ nspanel_name
                }}
              title: NSPanel invalid Blueprint version
              message: 'ESPHome cannot provide a valid Blueprint version.

                - Panel: {{ nspanel_name }}

                - TFT: {{ nspanel_event.tft }}

                - ESPHome: {{ nspanel_event.esphome }}

                - Blueprint (reported by ESPHome):{{ nspanel_event.blueprint }}

                - Blueprint (expected): {{ blueprint_version }}

                '
            continue_on_error: true
          else:
          - if:
            - '{{ nspanel_event.blueprint.split(".")[0] == nspanel_event.esphome.split(".")[0]
              }}'
            - '{{ nspanel_event.blueprint.split(".")[1] == nspanel_event.esphome.split(".")[1]
              }}'
            - '{{ nspanel_event.blueprint.split(".")[0] == nspanel_event.tft.split(".")[0]
              }}'
            - '{{ nspanel_event.blueprint.split(".")[1] == nspanel_event.tft.split(".")[1]
              }}'
            then:
            - service: persistent_notification.dismiss
              data:
                notification_id: NSPanel_HA_Blueprint_version_mismatch_{{ nspanel_name
                  }}
              continue_on_error: true
            else:
            - service: persistent_notification.create
              data:
                notification_id: NSPanel_HA_Blueprint_version_mismatch_{{ nspanel_name
                  }}
                title: NSPanel component version mismatch
                message: 'There''s a version mismatch between NSPanel_HA_Blueprint
                  components. Please update all the components to the same version.

                  - Panel: {{ nspanel_name }}

                  - TFT: {{ nspanel_event.tft }}

                  - ESPHome: {{ nspanel_event.esphome }}

                  - Blueprint: {{ nspanel_event.blueprint }} (expected {{ blueprint_version
                  }})

                  '
              continue_on_error: true
      - alias: Other events
        conditions:
        - '{{ nspanel_event.type == "generic"}}'
        sequence:
        - choose:
          - alias: light settings
            conditions:
            - '{{ nspanel_event.page == page.light }}'
            - '{{ nspanel_event.component in ["rgb_color", "brightness_pct", "color_temp"]
              }}'
            - '{{ nspanel_event.entity is defined and nspanel_event.entity is string
              and nspanel_event.entity | length > 0 }}'
            sequence:
            - service: light.turn_on
              data:
                entity_id: '{{ nspanel_event.entity }}'
                '{{ nspanel_event.component }}': '{{ nspanel_event.value }}'
              continue_on_error: true
          - alias: Jump to climate page
            conditions:
            - '{{ nspanel_event.page == page.home }} '
            - '{{ nspanel_event.component == "climate" }}'
            - '{{ nspanel_event.value == "release" }}'
            - '{{ climate | length > 0 }} '
            sequence:
            - service: '{{ nextion.command.open_entity_settings_page }}'
              data:
                page: climate
                page_label: '{{ state_attr(climate, "friendly_name") }}'
                page_icon: ''
                page_icon_color:
                - -1
                entity: '{{ "embedded_climate" if climate == thermostat_embedded else
                  climate }}'
                back_page: '{{ page.home }}'
              continue_on_error: true
          - alias: Show button - Notification clear
            conditions:
            - '{{ nspanel_event.page == page.notification }}'
            - '{{ nspanel_event.component == "clear" }}'
            sequence:
            - service: switch.turn_off
              data:
                entity_id: '{{ notification_unread }}'
              continue_on_error: true
            - service: '{{ nextion.command.printf }}'
              data:
                cmd: page {{ page.home }}
              continue_on_error: true
          - alias: Show button - Notification accept
            conditions:
            - '{{ nspanel_event.page == page.notification }}'
            - '{{ nspanel_event.component == "accept" }}'
            sequence:
            - service: switch.turn_off
              data:
                entity_id: '{{ notification_unread }}'
              continue_on_error: true
            - service: '{{ nextion.command.notification_clear }}'
              data: {}
              continue_on_error: true
            - service: '{{ nextion.command.printf }}'
              data:
                cmd: page {{ page.home }}
              continue_on_error: true
  - alias: Automation reloaded
    conditions:
    - condition: trigger
      id:
      - automation_reloaded
      - ha_started
    sequence:
    - if: '{{ has_value(currentpage) }}'
      then:
      - service: persistent_notification.dismiss
        data:
          notification_id: NSPanel_HA_Blueprint_current_page_missing_{{ nspanel_name
            }}
        continue_on_error: true
      else:
      - service: persistent_notification.create
        data:
          notification_id: NSPanel_HA_Blueprint_current_page_missing_{{ nspanel_name
            }}
          title: NSPanel sensor unavailable
          message: "The sensor \"Current Page\" (`{{ currentpage }}`) is unavailable.\n-
            Panel: {{ nspanel_name }}\n- Blueprint version: {{ blueprint_version }}\n-
            Sensor's expected entity_id: {{ currentpage }}\n\nHow to fix this:\n\n
            \ 1. Go to the [device page](/config/devices/device/{{ nspanel_deviceid
            }})\n\n  2. Find the sensor \"Current page\" under the \"Sensors\" area
            (it might be in the \"sensors not shown\" group)\n\n  3. Enable the sensor\n\n
            \ 4. Wait a bit until the sensor starts providing a value (it shouldn't
            take more than half minute)\n\n  5. Go to [Developer Tools](/developer-tools/yaml)
            and click the button \"Automations\" to reload your automations\n"
        continue_on_error: true
    - *id003
    - choose:
      - conditions: '{{ page.current == page.home }}'
        sequence: *id013
      - conditions: '{{ page.current in page.buttonpages }}'
        sequence: *id014
      - conditions: '{{ page.current in page.entitypages }}'
        sequence: *id015
  - alias: Buttons entity updated
    conditions:
    - condition: trigger
      id:
      - current_state_entity01
      - current_state_entity02
      - current_state_entity03
      - current_state_entity04
      - current_state_entity05
      - current_state_entity06
      - current_state_entity07
      - current_state_entity08
      - current_state_entity09
      - current_state_entity10
      - current_state_entity11
      - current_state_entity12
      - current_state_entity13
      - current_state_entity14
      - current_state_entity15
      - current_state_entity16
      - current_state_entity17
      - current_state_entity18
      - current_state_entity19
      - current_state_entity20
      - current_state_entity21
      - current_state_entity22
      - current_state_entity23
      - current_state_entity24
      - current_state_entity25
      - current_state_entity26
      - current_state_entity27
      - current_state_entity28
      - current_state_entity29
      - current_state_entity30
      - current_state_entity31
      - current_state_entity32
    - '{{ trigger.to_state.state not in ["unavailable", "unknown", "", None] }}'
    - condition: or
      conditions:
      - '{{ page.current in page.buttonpages }}'
      - '{{ page.current in [page.light, page.cover, page.climate, page.fan, page.alarm]
        }}'
    sequence:
    - choose:
      - alias: Button pages
        conditions:
        - '{{ page.current in page.buttonpages }}'
        sequence:
        - *id009
        - repeat:
            for_each: "{{\n  button_pages_buttons\n  | selectattr(\"page\", \"defined\")\n
              \ | selectattr(\"page\", \"eq\", page.current)\n  | selectattr(\"entity\",
              \"defined\")\n  | selectattr(\"entity\", \"eq\", trigger.entity_id)\n
              \ | list\n}}\n"
            sequence: *id016
      - alias: Light settings page
        conditions:
        - '{{ page.current == page.light }}'
        - '{{ trigger.entity_id is match "light." }}'
        sequence: *id017
      - alias: Cover settings page
        conditions:
        - '{{ page.current == page.cover }}'
        - '{{ trigger.entity_id is match "cover." }}'
        sequence: *id018
      - alias: Climate page
        conditions:
        - '{{ page.current == page.climate }}'
        - '{{ trigger.entity_id is match "climate." }}'
        sequence: *id019
      - alias: Fan page
        conditions:
        - '{{ page.current == page.fan }}'
        - '{{ trigger.entity_id is match "fan." }}'
        sequence: *id020
      - alias: Media player page
        conditions:
        - '{{ page.current == page.media_player }}'
        - '{{ trigger.entity_id is match "media_player." }}'
        sequence: *id021
  - alias: Update entity pages
    conditions:
    - condition: trigger
      id:
      - trigger_entitypage01
      - trigger_entitypage02
      - trigger_entitypage03
      - trigger_entitypage04
    - '{{ page.current in page.entitypages }}'
    sequence:
    - *id022
    - repeat:
        for_each: "{{\n  entity_pages_entities\n  | selectattr(\"page\", \"defined\")\n
          \ | selectattr(\"page\", \"eq\", page.current)\n  | selectattr(\"entity\",
          \"defined\")\n  | selectattr(\"entity\", \"eq\", trigger.entity_id)\n  |
          list\n}}\n"
        sequence: *id023
  - alias: Update climate page values
    conditions:
    - condition: trigger
      id:
      - climate_value01_state
      - climate_value02_state
      - climate_value03_state
      - climate_value04_state
    - '{{ page.current == page.climate }}'
    sequence:
    - *id024
    - repeat:
        for_each: "{{\n  climate_page_entities\n  | selectattr(\"entity\", \"defined\")\n
          \ | selectattr(\"entity\", \"eq\", trigger.entity_id)\n  | list\n}}\n"
        sequence: *id007
  - alias: Update climate page custom buttons
    conditions:
    - condition: trigger
      id:
      - climate_button08_state
      - climate_button09_state
    - '{{ page.current == page.climate }}'
    sequence:
    - *id025
  - alias: Climate - Sync
    conditions:
    - condition: trigger
      id: climate_state
    sequence:
    - *id026
    - if:
      - '{{ trigger.event.data.new_state.state not in ["unavailable", "unknown", "",
        None] }}'
      - '{{ page.current == page.climate }}'
      then:
      - variables:
          climate_entity: '{{ trigger.event.data.entity_id }}'
          hvac_modes: '{{ state_attr(climate_entity, "hvac_modes") }}'
      - *id027
      - *id028
  - alias: Alarm - Sync
    conditions:
    - condition: trigger
      id: alarm_state
    sequence: *id029
  - alias: Home page - Custom buttons
    conditions:
    - condition: trigger
      id:
      - home_custom_buttons
    sequence:
    - *id012
    - repeat:
        for_each: '{{ home_page_custom_buttons | selectattr("entity", "defined") |
          selectattr("entity", "eq", trigger.event.data.entity_id) | list }}'
        sequence:
        - *id030
  - alias: Home page - Values
    conditions:
    - condition: trigger
      id:
      - home_value01_state
      - home_value02_state
      - home_value03_state
    - '{{ page.current == page.home }}'
    sequence:
    - *id031
    - repeat:
        for_each: '{{ home_page_values | selectattr("entity", "defined") | selectattr("entity",
          "eq", trigger.entity_id) | list }}'
        sequence:
        - *id007
  - alias: Home page - status bar
    conditions:
    - condition: trigger
      id:
      - chip01_state
      - chip02_state
      - chip03_state
      - chip04_state
      - chip05_state
      - chip06_state
      - chip07_state
    sequence:
    - *id032
    - repeat:
        for_each: "{{\n  home_page_status_bar\n  | selectattr(\"entity\", \"defined\")\n
          \ | selectattr(\"entity\", \"eq\", trigger.event.data.entity_id)\n  | list\n}}\n"
        sequence:
        - *id033
  - alias: Hardware button - State
    conditions:
    - condition: trigger
      id:
      - left_button_state
      - right_button_state
    - '{{ page.current == page.home }}'
    - '{{ trigger.to_state.state not in ["unavailable", "unknown", "", None] }}'
    sequence:
    - service: '{{ nextion.command.printf }}'
      data:
        cmd: home.{{ "left" if trigger.id == "left_button_state" else "right"}}_bt_pic.val={{
          1 if trigger.to_state.state in ["on", "open", "opened", "opening", "true",
          true, 1] else 0 }}
      continue_on_error: true
    - condition: '{{ trigger.to_state.state not in ["off", "closed", "closing", "on",
        "open", "closed"] }}'
    - delay:
        milliseconds: 800
    - service: '{{ nextion.command.printf }}'
      data:
        cmd: home.{{ "left" if trigger.id == "left_button_state" else "right"}}_bt_pic.val=0
      continue_on_error: true
  - alias: Outdoor temp - Entity
    conditions:
    - condition: trigger
      id: outdoortemp_state
    - '{{ page.current == page.home and is_number(trigger.event.data.new_state.state)
      }}'
    sequence:
    - *id034
  - alias: Indoor temp - Entity
    conditions:
    - condition: trigger
      id:
      - indoortemp_state
      - nspaneltemp_state
    - '{{ page.current == page.home and is_number(trigger.event.data.new_state.state)
      }}'
    sequence:
    - *id035
  - alias: Weather - State changed
    conditions:
    - condition: trigger
      id: weather_state_change
    - '{{ page.current == page.home and trigger.event.data.new_state.state not in
      ["unavailable", "unknown", "", None] }}'
    sequence:
    - *id034
    - *id001
    - *id036
  - alias: TFT auto-upload
    conditions:
    - condition: trigger
      id: tft_upload
    sequence:
    - delay:
        seconds: 2
    - service: '{{ nextion.command.tft_upload }}'
      data: {}
      continue_on_error: true
